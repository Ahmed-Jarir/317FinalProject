
AVRASM ver. 2.2.8  C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\main.asm Tue Jan 16 22:52:17 2024

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m32def.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\main.asm(80): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\ascii.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\main.asm(81): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\io.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\main.asm(82): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\read-mem.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\read-mem.inc(18): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\ascii.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\read-mem.inc(19): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\io.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\main.asm(83): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\write-mem.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\write-mem.inc(18): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\ascii.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\write-mem.inc(19): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\io.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m32def.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\main.asm(80): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\ascii.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\main.asm(81): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\io.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\main.asm(82): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\read-mem.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\read-mem.inc(18): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\ascii.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\read-mem.inc(19): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\io.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\main.asm(83): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\write-mem.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\write-mem.inc(18): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\ascii.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\write-mem.inc(19): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\io.inc'
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega32.xml ************
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m32def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega32
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega32
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M32DEF_INC_
                                 #define _M32DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega32
                                 #pragma AVRPART ADMIN PART_NAME ATmega32
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x02
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	OCR0	= 0x3c
                                 .equ	GICR	= 0x3b
                                 .equ	GIFR	= 0x3a
                                 .equ	TIMSK	= 0x39
                                 .equ	TIFR	= 0x38
                                 .equ	SPMCR	= 0x37
                                 .equ	TWCR	= 0x36
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUCSR	= 0x34
                                 .equ	TCCR0	= 0x33
                                 .equ	TCNT0	= 0x32
                                 .equ	OSCCAL	= 0x31
                                 .equ	OCDR	= 0x31
                                 .equ	SFIOR	= 0x30
                                 .equ	TCCR1A	= 0x2f
                                 .equ	TCCR1B	= 0x2e
                                 .equ	TCNT1L	= 0x2c
                                 .equ	TCNT1H	= 0x2d
                                 .equ	OCR1AL	= 0x2a
                                 .equ	OCR1AH	= 0x2b
                                 .equ	OCR1BL	= 0x28
                                 .equ	OCR1BH	= 0x29
                                 .equ	ICR1L	= 0x26
                                 .equ	ICR1H	= 0x27
                                 .equ	TCCR2	= 0x25
                                 .equ	TCNT2	= 0x24
                                 .equ	OCR2	= 0x23
                                 .equ	ASSR	= 0x22
                                 .equ	WDTCR	= 0x21
                                 .equ	UBRRH	= 0x20
                                 .equ	UCSRC	= 0x20
                                 .equ	EEARL	= 0x1e
                                 .equ	EEARH	= 0x1f
                                 .equ	EEDR	= 0x1d
                                 .equ	EECR	= 0x1c
                                 .equ	PORTA	= 0x1b
                                 .equ	DDRA	= 0x1a
                                 .equ	PINA	= 0x19
                                 .equ	PORTB	= 0x18
                                 .equ	DDRB	= 0x17
                                 .equ	PINB	= 0x16
                                 .equ	PORTC	= 0x15
                                 .equ	DDRC	= 0x14
                                 .equ	PINC	= 0x13
                                 .equ	PORTD	= 0x12
                                 .equ	DDRD	= 0x11
                                 .equ	PIND	= 0x10
                                 .equ	SPDR	= 0x0f
                                 .equ	SPSR	= 0x0e
                                 .equ	SPCR	= 0x0d
                                 .equ	UDR	= 0x0c
                                 .equ	UCSRA	= 0x0b
                                 .equ	UCSRB	= 0x0a
                                 .equ	UBRRL	= 0x09
                                 .equ	ACSR	= 0x08
                                 .equ	ADMUX	= 0x07
                                 .equ	ADCSRA	= 0x06
                                 .equ	ADCH	= 0x05
                                 .equ	ADCL	= 0x04
                                 .equ	TWDR	= 0x03
                                 .equ	TWAR	= 0x02
                                 .equ	TWSR	= 0x01
                                 .equ	TWBR	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEWE	= 1	; EEPROM Write Enable
                                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDTOE	= 4	; RW
                                 .equ	WDDE	= WDTOE	; For compatibility
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; GICR - General Interrupt Control Register
                                 .equ	GIMSK	= GICR	; For compatibility
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	INT2	= 5	; External Interrupt Request 2 Enable
                                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 7	; External Interrupt Request 1 Enable
                                 
                                 ; GIFR - General Interrupt Flag Register
                                 .equ	INTF2	= 5	; External Interrupt Flag 2
                                 .equ	INTF0	= 6	; External Interrupt Flag 0
                                 .equ	INTF1	= 7	; External Interrupt Flag 1
                                 
                                 ; MCUCR - General Interrupt Control Register
                                 .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	ISC2	= 6	; Interrupt Sense Control 2
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TCCR0 - Timer/Counter Control Register
                                 .equ	CS00	= 0	; Clock Select 1
                                 .equ	CS01	= 1	; Clock Select 1
                                 .equ	CS02	= 2	; Clock Select 2
                                 .equ	WGM01	= 3	; Waveform Generation Mode 1
                                 .equ	CTC0	= WGM01	; For compatibility
                                 .equ	COM00	= 4	; Compare match Output Mode 0
                                 .equ	COM01	= 5	; Compare Match Output Mode 1
                                 .equ	WGM00	= 6	; Waveform Generation Mode
                                 .equ	PWM0	= WGM00	; For compatibility
                                 .equ	FOC0	= 7	; Force Output Compare
                                 
                                 ; TCNT0 - Timer/Counter Register
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0 - Output Compare Register
                                 .equ	OCR0_0	= 0	; 
                                 .equ	OCR0_1	= 1	; 
                                 .equ	OCR0_2	= 2	; 
                                 .equ	OCR0_3	= 3	; 
                                 .equ	OCR0_4	= 4	; 
                                 .equ	OCR0_5	= 5	; 
                                 .equ	OCR0_6	= 6	; 
                                 .equ	OCR0_7	= 7	; 
                                 
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0	= 1	; Timer/Counter0 Output Compare Match Interrupt register
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0	= 1	; Output Compare Flag 0
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 6	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	OCIE2	= 7	; Timer/Counter2 Output Compare Match Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2	= 7	; Output Compare Flag 2
                                 
                                 ; TCCR2 - Timer/Counter2 Control Register
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM21	= 3	; Clear Timer/Counter2 on Compare Match
                                 .equ	CTC2	= WGM21	; For compatibility
                                 .equ	COM20	= 4	; Compare Output Mode bit 0
                                 .equ	COM21	= 5	; Compare Output Mode bit 1
                                 .equ	WGM20	= 6	; Pulse Width Modulator Enable
                                 .equ	PWM2	= WGM20	; For compatibility
                                 .equ	FOC2	= 7	; Force Output Compare
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2 - Timer/Counter2 Output Compare Register
                                 .equ	OCR2_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2UB	= 0	; Timer/counter Control Register2 Update Busy
                                 .equ	OCR2UB	= 1	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 2	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 3	; Asynchronous Timer/counter2
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	PWM10	= WGM10	; For compatibility
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	PWM11	= WGM11	; For compatibility
                                 .equ	FOC1B	= 2	; Force Output Compare 1B
                                 .equ	FOC1A	= 3	; Force Output Compare 1A
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	CTC10	= WGM12	; For compatibility
                                 .equ	CTC1	= WGM12	; For compatibility
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	CTC11	= WGM13	; For compatibility
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** USART ************************
                                 ; UDR - USART I/O Data Register
                                 .equ	UDR0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSRA - USART Control and Status Register A
                                 .equ	USR	= UCSRA	; For compatibility
                                 .equ	MPCM	= 0	; Multi-processor Communication Mode
                                 .equ	U2X	= 1	; Double the USART transmission speed
                                 .equ	UPE	= 2	; Parity Error
                                 .equ	PE	= UPE	; For compatibility
                                 .equ	DOR	= 3	; Data overRun
                                 .equ	FE	= 4	; Framing Error
                                 .equ	UDRE	= 5	; USART Data Register Empty
                                 .equ	TXC	= 6	; USART Transmitt Complete
                                 .equ	RXC	= 7	; USART Receive Complete
                                 
                                 ; UCSRB - USART Control and Status Register B
                                 .equ	UCR	= UCSRB	; For compatibility
                                 .equ	TXB8	= 0	; Transmit Data Bit 8
                                 .equ	RXB8	= 1	; Receive Data Bit 8
                                 .equ	UCSZ2	= 2	; Character Size
                                 .equ	CHR9	= UCSZ2	; For compatibility
                                 .equ	TXEN	= 3	; Transmitter Enable
                                 .equ	RXEN	= 4	; Receiver Enable
                                 .equ	UDRIE	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSRC - USART Control and Status Register C
                                 .equ	UCPOL	= 0	; Clock Polarity
                                 .equ	UCSZ0	= 1	; Character Size
                                 .equ	UCSZ1	= 2	; Character Size
                                 .equ	USBS	= 3	; Stop Bit Select
                                 .equ	UPM0	= 4	; Parity Mode Bit 0
                                 .equ	UPM1	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL	= 6	; USART Mode Select
                                 .equ	URSEL	= 7	; Register Select
                                 
                                 .equ	UBRRHI	= UBRRH	; For compatibility
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; SFIOR - Special Function IO Register
                                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register
                                 .equ	ADCSR	= ADCSRA	; For compatibility
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; When this bit is written to one,the Timer/Counter2 prescaler will be reset.The bit will be cleared by hardware after the operation is performed.Writing a zero to this bit will have no effect.This bit will always be read as zero if Timer/C                                 ounter2 is clocked by the internal CPU clock.If this bit is written when Timer/Counter2 is operating in asynchronous mode,the bit will remain one until the prescaler has been reset.
                                 .equ	ADFR	= ADATE	; For compatibility
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	ADTS0	= 5	; ADC Auto Trigger Source 0
                                 .equ	ADTS1	= 6	; ADC Auto Trigger Source 1
                                 .equ	ADTS2	= 7	; ADC Auto Trigger Source 2
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 ;.equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 ;.equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 ;.equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 ;.equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 .equ	SM0	= 4	; Sleep Mode Select
                                 .equ	SM1	= 5	; Sleep Mode Select
                                 .equ	SM2	= 6	; Sleep Mode Select
                                 .equ	SE	= 7	; Sleep Enable
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	MCUSR	= MCUCSR	; For compatibility
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	PSR10	= 0	; Prescaler Reset Timer/Counter1&0
                                 .equ	PSR2	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PUD	= 2	; Pull-up Disable
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	ASRE	= RWWSRE	; For compatibility
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	ASB	= RWWSB	; For compatibility
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler bits
                                 .equ	TWPS1	= 1	; TWI Prescaler bits
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	BODEN	= 6	; Brown out detector enable
                                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x003f
                                 .equ	SRAM_START	= 0x0060
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x085f
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	OC2addr	= 0x0008	; Timer/Counter2 Compare Match
                                 .equ	OVF2addr	= 0x000a	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x000c	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x000e	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0010	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x0012	; Timer/Counter1 Overflow
                                 .equ	OC0addr	= 0x0014	; Timer/Counter0 Compare Match
                                 .equ	OVF0addr	= 0x0016	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0018	; Serial Transfer Complete
                                 .equ	URXCaddr	= 0x001a	; USART, Rx Complete
                                 .equ	UDREaddr	= 0x001c	; USART Data Register Empty
                                 .equ	UTXCaddr	= 0x001e	; USART, Tx Complete
                                 .equ	ADCCaddr	= 0x0020	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x0022	; EEPROM Ready
                                 .equ	ACIaddr	= 0x0024	; Analog Comparator
                                 .equ	TWIaddr	= 0x0026	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0028	; Store Program Memory Ready
                                 
                                 .equ	INT_VECTORS_SIZE	= 42	; size in words
                                 
                                 #endif  /* _M32DEF_INC_ */
                                 
                                 
                                 ;
                                 ; Future Gadget 29, 2nd Edition Ver. 2.31
                                 ;
                                 ; COMP317 Final Project
                                 ;
                                 ; Authors:
                                 ; - Ameer Taweel (0077340)
                                 ; - Ahmed Jareer (0074982)
                                 ;
                                 ; Resources Usage:
                                 ; - Program Size: TODO
                                 ; - Data    Size: TODO
                                 ; - Registers   : TODO
                                 ;
                                 ; Summary:
                                 ;
                                 ; Multiple times during this course, we faced a situation where the code works
                                 ; in the debugger/simulator but not on the physical microcontroller. Debugging
                                 ; and fixing such issues was hard because we couldn't inspect the system's
                                 ; internal state.
                                 ;
                                 ; Therefore, built a system that is easy to inspect. It exposes a shell using
                                 ; the ANSI standard over USART. The system has commands to check the system's
                                 ; state, like memory regions and I/O pin values. Moreover, the system supports
                                 ; periodic tasks, like logging a memory region every two minutes.
                                 ;
                                 ; It also has commands for modifying the system's state, like setting a memory
                                 ; region or setting the mode of an I/O pin.
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; # Code Style
                                 ;;
                                 ;;   - No global register aliases.
                                 ;;   - Capitalize all user-defined names (constants, register aliases, labels).
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; # Constants
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 ; Baud Rate in Bits Per Second (bps)
                                 .equ BAUD_RATE = 9600
                                 ; System Oscillator Clock Frequency
                                 .equ F_OSC     = 4 * 1000 * 1000
                                 ; Contents of the UBRRH and UBRRL Registers (0 - 4095)
                                 ; Asynchronous Normal Mode (U2X = 0)
                                 .equ BAUD_UBRR = (F_OSC / (16 * BAUD_RATE)) - 1
                                 
                                 ; Maximum Command Length
                                 .equ CMD_MAX_LEN = 100
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; # Data Segment
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 ; Data Segment Start
                                 .dseg
                                 
000060                           CMD    : .byte CMD_MAX_LEN
0000c4                           CMD_IDX: .byte 1
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; # Interrupt Vector Table
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 ; Code Segment Start
                                 .cseg
                                 
                                 .org 0x0000
000000 940c 024c                 	jmp RESET
                                 .org 0x001A 
00001a 940c 025c                 	jmp USART_RX_COMPLETE
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; # Imports
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 .INCLUDE "ascii.inc"
                                 
                                 ;; Include Guard
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 .ifdef INCLUDE_ASCII
                                 .endif
                                 
                                 .equ INCLUDE_ASCII = 1
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; ASCII Codes
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 .equ ASCII_BACKSPACE = 0x08
                                 .equ ASCII_NEW_LINE  = 0x0D
                                 .equ ASCII_SPACE     = 0x20
                                 .equ ASCII_ZERO      = 0x30
                                 .equ ASCII_NINE      = 0x39
                                 .equ ASCII_ARROW_R   = 0x3E
                                 .equ ASCII_UPPER_A   = 0x41
                                 .equ ASCII_UPPER_E   = 0x45
                                 .equ ASCII_UPPER_F   = 0x46
                                 .equ ASCII_UPPER_G   = 0x47
                                 .equ ASCII_LOWER_A   = 0x61
                                 .equ ASCII_LOWER_F   = 0x66
                                 .equ ASCII_LOWER_G   = 0x67
                                 .equ ASCII_LOWER_I   = 0x69
                                 .equ ASCII_LOWER_O   = 0x6F
                                 .equ ASCII_LOWER_P   = 0x70
                                 .equ ASCII_LOWER_R   = 0x72
                                 .equ ASCII_LOWER_S   = 0x73
                                 .equ ASCII_LOWER_W   = 0x77
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Parse ASCII Character As Hex
                                 ;;
                                 ;; Inputs:
                                 ;; - Constant Zero <- SP + 4
                                 ;; - ASCII    Char <- SP + 3 (First Byte Before Return Address)
                                 ;;
                                 ;; Outputs:
                                 ;; - Error Status  -> SP + 4
                                 ;; - Hex   Digit   -> SP + 3 (First Byte Before Return Address)
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 ASCII_BYTE_TO_HEX:
                                 	.def CHAR = R16
                                 
                                 	; Number of pushes
                                 	.set STACK_OFFSET = 5
                                 	; Backup Registers
00001c 930f                      	push CHAR
00001d 93df                      	push YH
00001e 93cf                      	push YL
00001f 93ff                      	push ZH
000020 93ef                      	push ZL
                                 
                                 	; Load Stack Pointer
                                 	; Y <- SP
000021 b7de                      	in YH, SPH
000022 b7cd                      	in YL, SPL
                                 
                                 	; Load ASCII Character
000023 8508                      	ldd CHAR, Y+(STACK_OFFSET + 3)
                                 
000024 e0f1                      	ldi ZH, HIGH(ASCII_TO_HEX_LOOKUP_TABLE << 1)
000025 e7e0                      	ldi ZL, LOW (ASCII_TO_HEX_LOOKUP_TABLE << 1)
                                 
000026 0fe0                      	add ZL, CHAR
000027 e000                      	ldi CHAR, 0
000028 1ff0                      	adc ZH, CHAR
                                 
000029 9104                      	lpm CHAR, Z
                                 
00002a 3100                      	cpi CHAR, 16
                                 	; CHAR Invalid
00002b f410                      	brsh ASCII_BYTE_TO_HEX_ERR
00002c 8708                      	std Y+(STACK_OFFSET + 3), CHAR
00002d c002                      	rjmp ASCII_BYTE_TO_HEX_RET
                                 
                                 	ASCII_BYTE_TO_HEX_ERR:
                                 		; Error Status <- True
00002e e001                      		ldi CHAR, 1
00002f 8709                      		std Y+(STACK_OFFSET + 4), CHAR
                                 
                                 	ASCII_BYTE_TO_HEX_RET:
                                 		; Restore Registers
000030 91ef                      		pop ZL
000031 91ff                      		pop ZH
000032 91cf                      		pop YL
000033 91df                      		pop YH
000034 910f                      		pop CHAR
                                 
000035 9508                      		ret
                                 
                                 	.undef CHAR
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Parse Two ASCII Digits As Hex
                                 ;;
                                 ;; Inputs:
                                 ;; - Constant Zero          <- SP + 5
                                 ;; - ASCII String Pointer H <- SP + 4
                                 ;; - ASCII String Pointer L <- SP + 3 (First Byte Before Return Address)
                                 ;;
                                 ;; Outputs:
                                 ;; - Error Status           -> SP + 5
                                 ;; - No    Output           -> SP + 4
                                 ;; - Return Value           -> SP + 3 (First Byte Before Return Address)
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 ASCII_WORD_TO_HEX:
                                 	.def TEMP = R16
                                 	.def BYTE = R17
                                 
                                 	; Number of pushes
                                 	.set STACK_OFFSET = 6
                                 	; Backup Registers
000036 930f                      	push TEMP
000037 931f                      	push BYTE
000038 93df                      	push YH
000039 93cf                      	push YL
00003a 93ff                      	push ZH
00003b 93ef                      	push ZL
                                 
                                 	; Load Stack Pointer
                                 	; Y <- SP
00003c b7de                      	in YH, SPH
00003d b7cd                      	in YL, SPL
                                 
                                 	; Load String Address
00003e 85fa                      	ldd ZH, Y+(STACK_OFFSET + 4)
00003f 85e9                      	ldd ZL, Y+(STACK_OFFSET + 3)
                                 
                                 	; Push Zero To Stack
000040 e000                      	ldi TEMP, 0
000041 930f                      	push TEMP
                                 	; Load Most Significant ASCII Character
000042 9101                      	ld TEMP, Z+
                                 	; Push ASCII Character To Stack
000043 930f                      	push TEMP
000044 dfd7                      	rcall ASCII_BYTE_TO_HEX
                                 	; Get Return Value
000045 911f                      	pop BYTE
                                 	; Get Error Status
000046 910f                      	pop TEMP
                                 	; IF (SUBROUTINE ERR != 0) THEN ERR
000047 3000                      	cpi TEMP, 0
000048 f481                      	brne ASCII_WORD_TO_HEX_ERR
                                 
                                 	; Byte <- Byte << 4
000049 0f11                      	lsl BYTE
00004a 0f11                      	lsl BYTE
00004b 0f11                      	lsl BYTE
00004c 0f11                      	lsl BYTE
                                 
                                 	; Push Zero To Stack
00004d e000                      	ldi TEMP, 0
00004e 930f                      	push TEMP
                                 	; Load Most Significant ASCII Character
00004f 8100                      	ld TEMP, Z
                                 	; Push ASCII Character To Stack
000050 930f                      	push TEMP
000051 dfca                      	rcall ASCII_BYTE_TO_HEX
                                 	; Get Return Value
000052 910f                      	pop TEMP
                                 	; Append Return Value To Byte
000053 2b10                      	or BYTE, TEMP
                                 	; Get Error Status
000054 910f                      	pop TEMP
                                 	; IF (SUBROUTINE ERR != 0) THEN ERR
000055 3000                      	cpi TEMP, 0
000056 f411                      	brne ASCII_WORD_TO_HEX_ERR
                                 
                                 	; Return Valid Value
000057 8719                      	std Y+(STACK_OFFSET + 3), BYTE
000058 c002                      	rjmp ASCII_WORD_TO_HEX_RET
                                 
                                 	ASCII_WORD_TO_HEX_ERR:
000059 e001                      		ldi TEMP, 1
00005a 870b                      		std Y+(STACK_OFFSET + 5), TEMP
                                 
                                 	ASCII_WORD_TO_HEX_RET:
                                 		; Restore Registers
00005b 91ef                      		pop ZL
00005c 91ff                      		pop ZH
00005d 91cf                      		pop YL
00005e 91df                      		pop YH
00005f 911f                      		pop BYTE
000060 910f                      		pop TEMP
                                 
000061 9508                      		ret
                                 
                                 	.undef TEMP
                                 	.undef BYTE
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Parse Four ASCII Digits As Hex
                                 ;;
                                 ;; Inputs:
                                 ;; - Constant Zero          <- SP + 5
                                 ;; - ASCII String Pointer H <- SP + 4
                                 ;; - ASCII String Pointer L <- SP + 3 (First Byte Before Return Address)
                                 ;;
                                 ;; Outputs:
                                 ;; - Error Status           -> SP + 5
                                 ;; - Return Value H         -> SP + 4
                                 ;; - Return Value L         -> SP + 3 (First Byte Before Return Address)
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 ASCII_QUAD_TO_HEX:
                                 	.def TEMP  = R16
                                 	.def BYTEH = R17
                                 	.def BYTEL = R18
                                 
                                 	; Number of pushes
                                 	.set STACK_OFFSET = 7
                                 	; Backup Registers
000062 930f                      	push TEMP
000063 931f                      	push BYTEH
000064 932f                      	push BYTEL
000065 93df                      	push YH
000066 93cf                      	push YL
000067 93ff                      	push ZH
000068 93ef                      	push ZL
                                 
                                 	; Load Stack Pointer
                                 	; Y <- SP
000069 b7de                      	in YH, SPH
00006a b7cd                      	in YL, SPL
                                 
                                 	; Load String Address
00006b 85fb                      	ldd ZH, Y+(STACK_OFFSET + 4)
00006c 85ea                      	ldd ZL, Y+(STACK_OFFSET + 3)
                                 
                                 	; Push Arguments To Stack
00006d e000                      	ldi TEMP, 0
00006e 930f                      	push TEMP
00006f 93ff                      	push ZH
000070 93ef                      	push ZL
                                 	; Parse High Bytes
000071 dfc4                      	rcall ASCII_WORD_TO_HEX
                                 	; Get Return Value
000072 911f                      	pop BYTEH
                                 	; Discard Dummy Output
000073 910f                      	pop TEMP
                                 	; Get Error Status
000074 910f                      	pop TEMP
                                 	; IF (SUBROUTINE ERR != 0) THEN ERR
000075 3000                      	cpi TEMP, 0
000076 f471                      	brne ASCII_QUAD_TO_HEX_ERR
                                 
                                 	; Advance To Low Bytes
000077 9632                      	adiw ZH:ZL, 2
                                 
                                 	; Push Arguments To Stack
000078 e000                      	ldi TEMP, 0
000079 930f                      	push TEMP
00007a 93ff                      	push ZH
00007b 93ef                      	push ZL
                                 	; Parse Low Bytes
00007c dfb9                      	rcall ASCII_WORD_TO_HEX
                                 	; Get Return Value
00007d 912f                      	pop BYTEL
                                 	; Discard Dummy Output
00007e 910f                      	pop TEMP
                                 	; Get Error Status
00007f 910f                      	pop TEMP
                                 	; IF (SUBROUTINE ERR != 0) THEN ERR
000080 3000                      	cpi TEMP, 0
000081 f419                      	brne ASCII_QUAD_TO_HEX_ERR
                                 
                                 	; Return Valid Value
000082 871b                      	std Y+(STACK_OFFSET + 4), BYTEH
000083 872a                      	std Y+(STACK_OFFSET + 3), BYTEL
000084 c002                      	rjmp ASCII_QUAD_TO_HEX_RET
                                 
                                 	ASCII_QUAD_TO_HEX_ERR:
000085 e001                      		ldi TEMP, 1
000086 870c                      		std Y+(STACK_OFFSET + 5), TEMP
                                 
                                 	ASCII_QUAD_TO_HEX_RET:
                                 		; Restore Registers
000087 91ef                      		pop ZL
000088 91ff                      		pop ZH
000089 91cf                      		pop YL
00008a 91df                      		pop YH
00008b 912f                      		pop BYTEL
00008c 911f                      		pop BYTEH
00008d 910f                      		pop TEMP
                                 
00008e 9508                      		ret
                                 
                                 	.undef TEMP
                                 	.undef BYTEH
                                 	.undef BYTEL
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Convert Hex Nibble To ASCII Character
                                 ;;
                                 ;; Inputs:
                                 ;; - Nibble     <- SP + 3 (First Byte Before Return Address)
                                 ;;
                                 ;; Outputs:
                                 ;; - ASCII Char -> SP + 3 (First Byte Before Return Address)
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 HEX_NIBBLE_TO_ASCII:
                                 	.def NIBBLE = R16
                                 
                                 	; Number of pushes
                                 	.set STACK_OFFSET = 3
                                 	; Backup Registers
00008f 930f                      	push NIBBLE
000090 93df                      	push YH
000091 93cf                      	push YL
                                 
                                 	; Load Stack Pointer
                                 	; Y <- SP
000092 b7de                      	in YH, SPH
000093 b7cd                      	in YL, SPL
                                 
                                 	; Load Hex Nibble
000094 810e                      	ldd NIBBLE, Y+(STACK_OFFSET + 3)
                                 
000095 300a                      	cpi NIBBLE, 10
000096 f010                      	brlo HEX_NIBBLE_TO_ASCII_DIGIT
                                 
                                 	HEX_NIBBLE_TO_ASCII_CHAR:
                                 		; NIBBLE <- NIBBLE - 10 + ASCII_UPPER_A
000097 5c09                      		subi NIBBLE, (10 - ASCII_UPPER_A)
000098 c001                      		rjmp HEX_NIBBLE_TO_ASCII_RET
                                 
                                 	HEX_NIBBLE_TO_ASCII_DIGIT:
                                 		; NIBBLE <- NIBBLE + ASCII_ZERO
000099 5d00                      		subi NIBBLE, (-ASCII_ZERO)
                                 
                                 	HEX_NIBBLE_TO_ASCII_RET:
00009a 830e                      		std Y+(STACK_OFFSET + 3), NIBBLE
                                 
                                 		; Restore Registers
00009b 91cf                      		pop YL
00009c 91df                      		pop YH
00009d 910f                      		pop NIBBLE
                                 
00009e 9508                      		ret
                                 
                                 	.undef NIBBLE
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Convert Hex Byte To Two ASCII Characters
                                 ;;
                                 ;; Inputs:
                                 ;; - Dummy Input                    <- SP + 4
                                 ;; - Byte                           <- SP + 3 (First Byte Before Return Address)
                                 ;;
                                 ;; Outputs:
                                 ;; - ASCII Char (Most  Significant) -> SP + 4
                                 ;; - ASCII Char (Least Significant) -> SP + 3 (First Byte Before Return Address)
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 HEX_BYTE_TO_ASCII:
                                 	.def BYTE   = R16
                                 	.def NIBBLE = R17
                                 
                                 	; Number of pushes
                                 	.set STACK_OFFSET = 4
                                 	; Backup Registers
00009f 930f                      	push BYTE
0000a0 931f                      	push NIBBLE
0000a1 93df                      	push YH
0000a2 93cf                      	push YL
                                 
                                 	; Load Stack Pointer
                                 	; Y <- SP
0000a3 b7de                      	in YH, SPH
0000a4 b7cd                      	in YL, SPL
                                 
                                 	; Load Hex Byte
0000a5 810f                      	ldd BYTE, Y+(STACK_OFFSET + 3)
                                 
                                 	; Convert Least Significant Nibble
0000a6 2f10                      	mov NIBBLE, BYTE
0000a7 701f                      	andi NIBBLE, 0x0F
0000a8 931f                      	push NIBBLE
0000a9 dfe5                      	rcall HEX_NIBBLE_TO_ASCII
0000aa 911f                      	pop NIBBLE
                                 
                                 	; Output Least Significant Nibble
0000ab 831f                      	std Y+(STACK_OFFSET + 3), NIBBLE
                                 
                                 	; Convert Most Significant Nibble
0000ac 2f10                      	mov NIBBLE, BYTE
0000ad 7f10                      	andi NIBBLE, 0xF0
0000ae 9512                      	swap NIBBLE
0000af 931f                      	push NIBBLE
0000b0 dfde                      	rcall HEX_NIBBLE_TO_ASCII
0000b1 911f                      	pop NIBBLE
                                 
                                 	; Output Most Significant Nibble
0000b2 8718                      	std Y+(STACK_OFFSET + 4), NIBBLE
                                 
                                 	; Restore Registers
0000b3 91cf                      	pop YL
0000b4 91df                      	pop YH
0000b5 911f                      	pop NIBBLE
0000b6 910f                      	pop BYTE
                                 
0000b7 9508                      	ret
                                 
                                 	.undef BYTE
                                 	.undef NIBBLE
                                 
                                 
                                 ASCII_TO_HEX_LOOKUP_TABLE:
0000b8 ffff                      	.db 255, 255
0000b9 ffff                      	.db 255, 255
0000ba ffff                      	.db 255, 255
0000bb ffff                      	.db 255, 255
0000bc ffff                      	.db 255, 255
0000bd ffff                      	.db 255, 255
0000be ffff                      	.db 255, 255
0000bf ffff                      	.db 255, 255
0000c0 ffff                      	.db 255, 255
0000c1 ffff                      	.db 255, 255
0000c2 ffff                      	.db 255, 255
0000c3 ffff                      	.db 255, 255
0000c4 ffff                      	.db 255, 255
0000c5 ffff                      	.db 255, 255
0000c6 ffff                      	.db 255, 255
0000c7 ffff                      	.db 255, 255
0000c8 ffff                      	.db 255, 255
0000c9 ffff                      	.db 255, 255
0000ca ffff                      	.db 255, 255
0000cb ffff                      	.db 255, 255
0000cc ffff                      	.db 255, 255
0000cd ffff                      	.db 255, 255
0000ce ffff                      	.db 255, 255
0000cf ffff                      	.db 255, 255
0000d0 0100                      	.db   0,   1
0000d1 0302                      	.db   2,   3
0000d2 0504                      	.db   4,   5
0000d3 0706                      	.db   6,   7
0000d4 0908                      	.db   8,   9
0000d5 ffff                      	.db 255, 255
0000d6 ffff                      	.db 255, 255
0000d7 ffff                      	.db 255, 255
0000d8 0aff                      	.db 255,  10
0000d9 0c0b                      	.db  11,  12
0000da 0e0d                      	.db  13,  14
0000db 100f                      	.db  15,  16
0000dc 1211                      	.db  17,  18
0000dd 1413                      	.db  19,  20
0000de 1615                      	.db  21,  22
0000df 1817                      	.db  23,  24
0000e0 1a19                      	.db  25,  26
0000e1 1c1b                      	.db  27,  28
0000e2 1e1d                      	.db  29,  30
0000e3 201f                      	.db  31,  32
0000e4 2221                      	.db  33,  34
0000e5 ff23                      	.db  35, 255
0000e6 ffff                      	.db 255, 255
0000e7 ffff                      	.db 255, 255
0000e8 0aff                      	.db 255,  10
0000e9 0c0b                      	.db  11,  12
0000ea 0e0d                      	.db  13,  14
0000eb 100f                      	.db  15,  16
0000ec 1211                      	.db  17,  18
0000ed 1413                      	.db  19,  20
0000ee 1615                      	.db  21,  22
0000ef 1817                      	.db  23,  24
0000f0 1a19                      	.db  25,  26
0000f1 1c1b                      	.db  27,  28
0000f2 1e1d                      	.db  29,  30
0000f3 201f                      	.db  31,  32
0000f4 2221                      	.db  33,  34
0000f5 ff23                      	.db  35, 255
0000f6 ffff                      	.db 255, 255
0000f7 ffff                      	.db 255, 255
0000f8 ffff                      	.db 255, 255
0000f9 ffff                      	.db 255, 255
0000fa ffff                      	.db 255, 255
0000fb ffff                      	.db 255, 255
0000fc ffff                      	.db 255, 255
0000fd ffff                      	.db 255, 255
0000fe ffff                      	.db 255, 255
0000ff ffff                      	.db 255, 255
000100 ffff                      	.db 255, 255
000101 ffff                      	.db 255, 255
000102 ffff                      	.db 255, 255
000103 ffff                      	.db 255, 255
000104 ffff                      	.db 255, 255
000105 ffff                      	.db 255, 255
000106 ffff                      	.db 255, 255
000107 ffff                      	.db 255, 255
000108 ffff                      	.db 255, 255
000109 ffff                      	.db 255, 255
00010a ffff                      	.db 255, 255
00010b ffff                      	.db 255, 255
00010c ffff                      	.db 255, 255
00010d ffff                      	.db 255, 255
00010e ffff                      	.db 255, 255
00010f ffff                      	.db 255, 255
000110 ffff                      	.db 255, 255
000111 ffff                      	.db 255, 255
000112 ffff                      	.db 255, 255
000113 ffff                      	.db 255, 255
000114 ffff                      	.db 255, 255
000115 ffff                      	.db 255, 255
000116 ffff                      	.db 255, 255
000117 ffff                      	.db 255, 255
000118 ffff                      	.db 255, 255
000119 ffff                      	.db 255, 255
00011a ffff                      	.db 255, 255
00011b ffff                      	.db 255, 255
00011c ffff                      	.db 255, 255
00011d ffff                      	.db 255, 255
00011e ffff                      	.db 255, 255
00011f ffff                      	.db 255, 255
000120 ffff                      	.db 255, 255
000121 ffff                      	.db 255, 255
000122 ffff                      	.db 255, 255
000123 ffff                      	.db 255, 255
000124 ffff                      	.db 255, 255
000125 ffff                      	.db 255, 255
000126 ffff                      	.db 255, 255
000127 ffff                      	.db 255, 255
000128 ffff                      	.db 255, 255
000129 ffff                      	.db 255, 255
00012a ffff                      	.db 255, 255
00012b ffff                      	.db 255, 255
00012c ffff                      	.db 255, 255
00012d ffff                      	.db 255, 255
00012e ffff                      	.db 255, 255
00012f ffff                      	.db 255, 255
000130 ffff                      	.db 255, 255
000131 ffff                      	.db 255, 255
000132 ffff                      	.db 255, 255
000133 ffff                      	.db 255, 255
000134 ffff                      	.db 255, 255
000135 ffff                      	.db 255, 255
000136 ffff                      	.db 255, 255
                                 .INCLUDE "io.inc"
000137 ffff                      
                                 ;; Include Guard
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 .ifdef INCLUDE_IO
                                 .endif
                                 
                                 .equ INCLUDE_IO = 1
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Transmit Character Over USART
                                 ;;
                                 ;; Inputs:
                                 ;; - Char      <- SP + 3 (First Byte Before Return Address)
                                 ;;
                                 ;; Outputs:
                                 ;; - No Output -> SP + 3 (First Byte Before Return Address)
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 PUTCHAR:
                                 	; Set Register Aliases
                                 	.def CHAR = R16
                                 
                                 	; Number of pushes
                                 	.set STACK_OFFSET = 3
                                 	; Backup Registers
000138 930f                      	push CHAR
000139 93df                      	push YH
00013a 93cf                      	push YL
                                 
                                 	; Load Stack Pointer
                                 	; Y <- SP
00013b b7de                      	in YH, SPH
00013c b7cd                      	in YL, SPL
                                 
                                 	; Load Character
00013d 810e                      	ldd CHAR, Y+(STACK_OFFSET + 3)
                                 
                                 	; Wait until sending is safe
                                 	PUTCHAR_WAIT_SAFE_SEND:	
00013e 9b5d                      		sbis UCSRA, UDRE
00013f cffe                      		rjmp PUTCHAR_WAIT_SAFE_SEND
                                 
000140 b90c                      	out UDR, CHAR
                                 	
                                 	; Restore Registers
000141 91cf                      	pop YL
000142 91df                      	pop YH
000143 910f                      	pop CHAR
                                 
000144 9508                      	ret
                                 
                                 	.undef CHAR
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Print a Null-Terminated Program Memory String Over USART
                                 ;;
                                 ;; Inputs:
                                 ;; - String Address H <- SP + 4
                                 ;; - String Address L <- SP + 3 (First Byte Before Return Address)
                                 ;;
                                 ;; Outputs:
                                 ;; - No Output        -> SP + 4
                                 ;; - No Output        -> SP + 3 (First Byte Before Return Address)
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 PUTSTR:
                                 	.def CHAR = R16
                                 
                                 	; Number of pushes
                                 	.set STACK_OFFSET = 5
                                 	; Backup Registers
000145 930f                      	push CHAR
000146 93df                      	push YH
000147 93cf                      	push YL
000148 93ff                      	push ZH
000149 93ef                      	push ZL
                                 
                                 	; Load Stack Pointer
                                 	; Y <- SP
00014a b7de                      	in YH, SPH
00014b b7cd                      	in YL, SPL
                                 
                                 	; Load String Address
00014c 85f9                      	ldd ZH, Y+(STACK_OFFSET + 4)
00014d 85e8                      	ldd ZL, Y+(STACK_OFFSET + 3)
                                 
                                 	PUTSTR_LOOP:
00014e 9104                      		lpm CHAR, Z
00014f 3000                      		cpi CHAR, 0
000150 f029                      		breq PUTSTR_RET
000151 930f                      		push CHAR
000152 dfe5                      		rcall PUTCHAR
000153 910f                      		pop CHAR
000154 9631                      		adiw ZH:ZL, 1
000155 cff8                      		rjmp PUTSTR_LOOP
                                 
                                 	PUTSTR_RET:
                                 		; Restore Registers
000156 91ef                      		pop ZL
000157 91ff                      		pop ZH
000158 91cf                      		pop YL
000159 91df                      		pop YH
00015a 910f                      		pop CHAR
                                 
00015b 9508                      		ret
                                 
                                 .INCLUDE "read-mem.inc"
                                 
                                 ;; Include Guard
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 .ifdef INCLUDE_READ_MEM
                                 .endif
                                 
                                 .equ INCLUDE_READ_MEM = 1
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Imports
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 .INCLUDE "ascii.inc"
                                 
                                 ;; Include Guard
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 .ifdef INCLUDE_ASCII
                                 .INCLUDE "io.inc"
                                 
                                 ;; Include Guard
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 .ifdef INCLUDE_IO
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Read Memory Region
                                 ;;
                                 ;; Inputs:
                                 ;; - Command Length           <- SP + 5
                                 ;; - Command String Pointer H <- SP + 4
                                 ;; - Command String Pointer L <- SP + 3 (First Byte Before Return Address)
                                 ;;
                                 ;; Outputs:
                                 ;; - No Output                -> SP + 5
                                 ;; - No Output                -> SP + 4
                                 ;; - No Output                -> SP + 3 (First Byte Before Return Address)
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
00015c 5245
00015d 4f52
00015e 3a52
00015f 4920
000160 766e
000161 6c61
000162 6469
000163 4920
000164 706e
000165 7475
000166 4620
000167 726f
000168 6020
000169 6552
00016a 6461
00016b 654d
00016c 606d
00016d 000d                      READ_MEM_ERR_MSG: .db "ERROR: Invalid Input For `ReadMem`", ASCII_NEW_LINE, 0
                                 
                                 
                                 READ_MEM:
                                 	.def TEMP = R16
                                 
                                 	; Number of pushes
                                 	.set STACK_OFFSET = 5
                                 	; Backup Registers
00016e 930f                      	push TEMP
00016f 93df                      	push YH
000170 93cf                      	push YL
000171 93ff                      	push ZH
000172 93ef                      	push ZL
                                 
                                 	; Load Stack Pointer
                                 	; Y <- SP
000173 b7de                      	in YH, SPH
000174 b7cd                      	in YL, SPL
                                 
                                 	; Load Command Length
000175 850a                      	ldd TEMP, Y+(STACK_OFFSET + 5)
                                 
                                 	; r XXXX YYYY
000176 300b                      	cpi TEMP, 11
000177 f5f9                      	brne READ_MEM_ERR
                                 
                                 	; Load Command Address
000178 85f9                      	ldd ZH, Y+(STACK_OFFSET + 4)
000179 85e8                      	ldd ZL, Y+(STACK_OFFSET + 3)
                                 
                                 	; Get string address of first memory address
00017a 9632                      	adiw ZH:ZL, 2
                                 
                                 	; Parse first memory address
00017b e000                      	ldi TEMP, 0
00017c 930f                      	push TEMP
00017d 93ff                      	push ZH
00017e 93ef                      	push ZL
00017f dee2                      	rcall ASCII_QUAD_TO_HEX
000180 91cf                      	pop YL
000181 91df                      	pop YH
000182 910f                      	pop TEMP
                                 	; IF (SUBROUTINE ERR != 0) THEN ERR
000183 3000                      	cpi TEMP, 0
000184 f591                      	brne READ_MEM_ERR
                                 
                                 	; There should be a space between parameters
000185 9634                      	adiw ZH:ZL, 4
000186 8100                      	ld TEMP, Z
000187 3200                      	cpi TEMP, ASCII_SPACE
000188 f571                      	brne READ_MEM_ERR
                                 
                                 	; Get string address of second memory address
000189 9631                      	adiw ZH:ZL, 1
                                 
                                 	; Parse second memory address
00018a e000                      	ldi TEMP, 0
00018b 930f                      	push TEMP
00018c 93ff                      	push ZH
00018d 93ef                      	push ZL
00018e ded3                      	rcall ASCII_QUAD_TO_HEX
00018f 91ef                      	pop ZL
000190 91ff                      	pop ZH
000191 910f                      	pop TEMP
                                 	; IF (SUBROUTINE ERR != 0) THEN ERR
000192 3000                      	cpi TEMP, 0
000193 f519                      	brne READ_MEM_ERR
                                 
                                 	; Ensure First Address <= Second Address
000194 17df                      	cp YH, ZH
000195 f020                      	brlo READ_MEM_PARAMS_LOOP
000196 f501                      	brne READ_MEM_ERR
                                 
                                 	; High byte equal
                                 	; Check low byte
000197 17ce                      	cp YL, ZL
000198 f008                      	brlo READ_MEM_PARAMS_LOOP
000199 f4e9                      	brne READ_MEM_ERR
                                 
                                 	; Params Valid
                                 	READ_MEM_PARAMS_LOOP:
                                 		; Read Memory
00019a 9109                      		ld TEMP, Y+
                                 
                                 		; Print as ASCII
00019b 930f                      		push TEMP
00019c 930f                      		push TEMP
00019d df01                      		rcall HEX_BYTE_TO_ASCII
                                 		; Get Least Significant Char
00019e 910f                      		pop TEMP
00019f df98                      		rcall PUTCHAR
0001a0 930f                      		push TEMP
0001a1 df96                      		rcall PUTCHAR
0001a2 910f                      		pop TEMP
0001a3 910f                      		pop TEMP
0001a4 e200                      		ldi TEMP, ASCII_SPACE
0001a5 930f                      		push TEMP
0001a6 df91                      		rcall PUTCHAR
0001a7 910f                      		pop TEMP
                                 
0001a8 17df                      		cp YH, ZH
0001a9 f380                      		brlo READ_MEM_PARAMS_LOOP
0001aa f419                      		brne READ_MEM_PARAMS_LOOP_EXIT
                                 
0001ab 17ce                      		cp YL, ZL
0001ac f368                      		brlo READ_MEM_PARAMS_LOOP
0001ad f361                      		breq READ_MEM_PARAMS_LOOP
                                 
                                 	READ_MEM_PARAMS_LOOP_EXIT:
0001ae e008                      		ldi TEMP, ASCII_BACKSPACE
0001af 930f                      		push TEMP
0001b0 df87                      		rcall PUTCHAR
0001b1 910f                      		pop TEMP
0001b2 e00d                      		ldi TEMP, ASCII_NEW_LINE
0001b3 930f                      		push TEMP
0001b4 df83                      		rcall PUTCHAR
0001b5 910f                      		pop TEMP
0001b6 c007                      		rjmp READ_MEM_RET
                                 
                                 	READ_MEM_ERR:
0001b7 e002                      		ldi TEMP, HIGH(READ_MEM_ERR_MSG << 1)
0001b8 930f                      		push TEMP
0001b9 eb08                      		ldi TEMP, LOW (READ_MEM_ERR_MSG << 1)
0001ba 930f                      		push TEMP
0001bb df89                      		rcall PUTSTR
0001bc 910f                      		pop TEMP
0001bd 910f                      		pop TEMP
                                 
                                 	READ_MEM_RET:
                                 		; Restore Registers
0001be 91ef                      		pop ZL
0001bf 91ff                      		pop ZH
0001c0 91cf                      		pop YL
0001c1 91df                      		pop YH
0001c2 910f                      		pop TEMP
                                 
0001c3 9508                      		ret
                                 	
                                 .INCLUDE "write-mem.inc"
                                 
                                 ;; Include Guard
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 .ifdef INCLUDE_WRITE_MEM
                                 .endif
                                 
                                 .equ INCLUDE_WRITE_MEM = 1
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Imports
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 .INCLUDE "ascii.inc"
                                 
                                 ;; Include Guard
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 .ifdef INCLUDE_ASCII
                                 .INCLUDE "io.inc"
                                 
                                 ;; Include Guard
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 .ifdef INCLUDE_IO
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Write Memory Address
                                 ;;
                                 ;; Inputs:
                                 ;; - Command Length           <- SP + 5
                                 ;; - Command String Pointer H <- SP + 4
                                 ;; - Command String Pointer L <- SP + 3 (First Byte Before Return Address)
                                 ;;
                                 ;; Outputs:
                                 ;; - No Output                -> SP + 5
                                 ;; - No Output                -> SP + 4
                                 ;; - No Output                -> SP + 3 (First Byte Before Return Address)
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
0001c4 5245
0001c5 4f52
0001c6 3a52
0001c7 4920
0001c8 766e
0001c9 6c61
0001ca 6469
0001cb 4920
0001cc 706e
0001cd 7475
0001ce 4620
0001cf 726f
0001d0 6020
0001d1 7257
0001d2 7469
0001d3 4d65
0001d4 6d65
0001d5 0d60
0001d6 0000                      WRITE_MEM_ERR_MSG: .db "ERROR: Invalid Input For `WriteMem`", ASCII_NEW_LINE, 0, 0
0001d7 654d
0001d8 6f6d
0001d9 7972
0001da 5720
0001db 6972
0001dc 6574
0001dd 4320
0001de 6d6f
0001df 6c70
0001e0 7465
0001e1 0d65
0001e2 0000                      WRITE_MEM_SUC_MSG: .db "Memory Write Complete", ASCII_NEW_LINE, 0, 0
                                 
                                 
                                 WRITE_MEM:
                                 	.def TEMP  = R16
                                 	.def COUNT = R17
                                 	.def LEN   = R18
                                 
                                 	; Number of pushes
                                 	.set STACK_OFFSET = 7
                                 	; Backup Registers
0001e3 930f                      	push TEMP
0001e4 931f                      	push COUNT
0001e5 932f                      	push LEN
0001e6 93df                      	push YH
0001e7 93cf                      	push YL
0001e8 93ff                      	push ZH
0001e9 93ef                      	push ZL
                                 
                                 	; Load Stack Pointer
                                 	; Y <- SP
0001ea b7de                      	in YH, SPH
0001eb b7cd                      	in YL, SPL
                                 
                                 	; Load Command Length
0001ec 852c                      	ldd LEN, Y+(STACK_OFFSET + 5)
                                 
                                 	; w XXXX (YY)+
0001ed 3029                      	cpi LEN, 9
0001ee f1f0                      	brlo WRITE_MEM_ERR
                                 
                                 	; Length should be odd
0001ef ff20                      	sbrs LEN, 0
0001f0 c03c                      	rjmp WRITE_MEM_ERR
                                 
                                 	; Load Command Address
0001f1 85fb                      	ldd ZH, Y+(STACK_OFFSET + 4)
0001f2 85ea                      	ldd ZL, Y+(STACK_OFFSET + 3)
                                 
                                 	; Get string address of memory address
0001f3 9632                      	adiw ZH:ZL, 2
                                 
                                 	; Parse memory address
0001f4 e000                      	ldi TEMP, 0
0001f5 930f                      	push TEMP
0001f6 93ff                      	push ZH
0001f7 93ef                      	push ZL
0001f8 de69                      	rcall ASCII_QUAD_TO_HEX
0001f9 91cf                      	pop YL
0001fa 91df                      	pop YH
0001fb 910f                      	pop TEMP
                                 	; IF (SUBROUTINE ERR != 0) THEN ERR
0001fc 3000                      	cpi TEMP, 0
0001fd f579                      	brne WRITE_MEM_ERR
                                 
                                 	; There should be a space between parameters
0001fe 9634                      	adiw ZH:ZL, 4
0001ff 8100                      	ld TEMP, Z
000200 3200                      	cpi TEMP, ASCII_SPACE
000201 f559                      	brne WRITE_MEM_ERR
                                 
                                 	; Get string address of bytes to write
000202 9631                      	adiw ZH:ZL, 1
                                 
000203 93ff                      	push ZH
000204 93ef                      	push ZL
                                 
                                 	; Get max iterations
000205 5027                      	subi LEN, 7
000206 9526                      	lsr LEN
000207 e010                      	ldi COUNT, 0
                                 
                                 	WRITE_MEM_VALIDATE_LOOP:
000208 e000                      		ldi TEMP, 0
000209 930f                      		push TEMP
00020a 8100                      		ld TEMP, Z
00020b 930f                      		push TEMP
00020c de0f                      		rcall ASCII_BYTE_TO_HEX
00020d 910f                      		pop TEMP
00020e 910f                      		pop TEMP
                                 		; IF (SUBROUTINE ERR != 0) THEN ERR
00020f 3000                      		cpi TEMP, 0
000210 f4e1                      		brne WRITE_MEM_ERR
000211 9513                      		inc COUNT
                                 		; Get Next Byte
000212 9631                      		adiw ZH:ZL, 1
000213 1712                      		cp COUNT, LEN
000214 f799                      		brne WRITE_MEM_VALIDATE_LOOP
                                 
000215 91ef                      	pop ZL
000216 91ff                      	pop ZH
000217 e010                      	ldi COUNT, 0
                                 	WRITE_MEM_WRITE:
000218 e000                      		ldi TEMP, 0
000219 930f                      		push TEMP
00021a 93ff                      		push ZH
00021b 93ef                      		push ZL
00021c de19                      		rcall ASCII_WORD_TO_HEX
00021d 910f                      		pop TEMP
00021e 9309                      		st Y+, TEMP
00021f 910f                      		pop TEMP
000220 910f                      		pop TEMP
000221 9632                      		adiw ZH:ZL, 2
000222 9513                      		inc COUNT
000223 1712                      		cp COUNT, LEN
000224 f799                      		brne WRITE_MEM_WRITE
                                 
000225 e003                      	ldi TEMP, HIGH(WRITE_MEM_SUC_MSG << 1)
000226 930f                      	push TEMP
000227 ea0e                      	ldi TEMP, LOW (WRITE_MEM_SUC_MSG << 1)
000228 930f                      	push TEMP
000229 df1b                      	rcall PUTSTR
00022a 910f                      	pop TEMP
00022b 910f                      	pop TEMP
                                 
00022c c007                      	rjmp WRITE_MEM_RET
                                 
                                 	WRITE_MEM_ERR:
00022d e003                      		ldi TEMP, HIGH(WRITE_MEM_ERR_MSG << 1)
00022e 930f                      		push TEMP
00022f e808                      		ldi TEMP, LOW (WRITE_MEM_ERR_MSG << 1)
000230 930f                      		push TEMP
000231 df13                      		rcall PUTSTR
000232 910f                      		pop TEMP
000233 910f                      		pop TEMP
                                 
                                 	WRITE_MEM_RET:
                                 		; Restore Registers
000234 91ef                      		pop ZL
000235 91ff                      		pop ZH
000236 91cf                      		pop YL
000237 91df                      		pop YH
000238 912f                      		pop LEN
000239 911f                      		pop COUNT
00023a 910f                      		pop TEMP
                                 
00023b 9508                      		ret
                                 	
                                 	.undef TEMP
                                 	.undef COUNT
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; # Program Memory Constants
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 PROMPT:
00023c 4746
00023d 3e3e
00023e 203e
00023f 0000                      	.db "FG>>> ", 0, 0
                                 EXEC_INVALID_CMD:
000240 5245
000241 4f52
000242 3a52
000243 4920
000244 766e
000245 6c61
000246 6469
000247 4320
000248 6d6f
000249 616d
00024a 646e
00024b 000d                      	.db "ERROR: Invalid Command", ASCII_NEW_LINE, 0
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; # Main Routine
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 RESET:
                                 	; Set Register Aliases
                                 	.def TEMP = R16
                                 
                                 	; Initialize Stack Pointer
00024c e008                      	ldi TEMP, HIGH(RAMEND)
00024d bf0e                      	out SPH, TEMP
00024e e50f                      	ldi TEMP, LOW(RAMEND)
00024f bf0d                      	out SPL, TEMP
                                 
                                 	; Initialize USART BEGIN
                                 
                                 	; Set Baud Rate
000250 e000                      	ldi TEMP, HIGH(BAUD_UBRR)
000251 bd00                      	out UBRRH, TEMP
000252 e109                      	ldi TEMP, LOW(BAUD_UBRR)
000253 b909                      	out UBRRL, TEMP
                                 
                                 	; TXEN  -> Enable Transmitter
                                 	; RXEN  -> Enable Receiver
                                 	; RXCIE -> Enable Rx Complete Interrupt
000254 e908                      	ldi TEMP, (1 << RXCIE) | (1 << RXEN) | (1 << TXEN)
000255 b90a                      	out UCSRB, TEMP
                                 
                                 	; Set Frame Format:	; - 8 Data Bits	; - 2 Stop Bits	ldi TEMP, (1 << URSEL) | (1 << USBS) | (1 << UCSZ0) | (1 << UCSZ1)	out UCSRC, TEMP
                                 
                                 	; Initialize USART END
                                 
                                 	; Initialie command index to 0
000256 e0f0                      	ldi ZH, HIGH(CMD_IDX)
000257 ece4                      	ldi ZL, LOW (CMD_IDX)
000258 2700                      	clr TEMP
000259 8300                      	st Z, TEMP
                                 
                                 	; Enable Global Interrupts
00025a 9478                          sei
                                 
                                 	RESET_LOOP:
00025b cfff                      		rjmp RESET_LOOP
                                 
                                 	; Clear Register Aliases
                                 	.undef TEMP
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; # Interrupt Handlers
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 USART_RX_COMPLETE:
                                 	; Set Register Aliases
                                 	.def TEMP = R16
                                 	.def CHAR = R17
                                 	.def IDX  = R18
                                 
                                 	; Backup Registers
00025c 930f                      	push TEMP
00025d b70f                      	in TEMP, SREG
00025e 930f                      	push TEMP
00025f 93ff                      	push ZH
000260 93ef                      	push ZL
000261 93df                      	push YH
000262 93cf                      	push YL
000263 931f                      	push CHAR
000264 932f                      	push IDX
                                 
                                 	; Read ASCII Character
000265 b11c                      	in CHAR, UDR
                                 
                                 	; Read command index
000266 e0f0                      	ldi ZH, HIGH(CMD_IDX)
000267 ece4                      	ldi ZL, LOW (CMD_IDX)
000268 8120                      	ld IDX, Z
                                 
000269 301d                      	cpi CHAR, ASCII_NEW_LINE
                                 
00026a f471                      	brne USART_RX_COMPLETE_NOT_DONE
                                 
00026b e00d                      	ldi R16, ASCII_NEW_LINE
00026c 930f                      	push R16
00026d deca                      	rcall PUTCHAR
00026e 910f                      	pop R16
                                 	
                                 	; r $begaddress $endaddress					-- read from sram
                                 	; w $begaddress $endaddress $bytestowrite	-- write to sram
                                 	; g $regname								-- read from register
                                 	; s $regname $byte							-- write to register
                                 	; o $name									-- read from io
                                 	; i $name $byte								-- write to io
                                 	; p $seconds $anyoftheabovecommands			-- repeat command
                                 	; TODO: dont forget to pass parameter
00026f 930f                      	push R16
000270 931f                      	push R17
                                 	
000271 e600                      	ldi R16, LOW(CMD)
000272 e010                      	ldi R17, HIGH(CMD)
                                 	
000273 d02d                      	rcall EXECUTE
                                 
000274 911f                      	pop R17
000275 910f                      	pop R16
                                 
                                 	; Reset index
000276 2722                      	clr IDX
000277 8320                      	st Z, IDX
                                 
000278 c01e                      	rjmp USART_RX_COMPLETE_RET
                                 
                                 	USART_RX_COMPLETE_NOT_DONE:
000279 3018                      		cpi CHAR, ASCII_BACKSPACE
                                 
00027a f471                      		brne USART_RX_COMPLETE_NOT_BACKSPACE
                                 
00027b 3020                      		cpi IDX, 0
00027c f0d1                      		breq USART_RX_COMPLETE_RET
                                 
00027d 952a                      		dec IDX
00027e 8320                      		st Z, IDX
                                 		; Echo backspace back
                                 		; Backspace -> Space -> Backspace
00027f e008                      		ldi R16, ASCII_BACKSPACE
000280 930f                      		push R16
000281 deb6                      		rcall PUTCHAR
000282 e200                      		ldi R16, ASCII_SPACE
000283 930f                      		push R16
000284 deb3                      		rcall PUTCHAR
000285 910f                      		pop R16
000286 deb1                      		rcall PUTCHAR
000287 910f                      		pop R16
                                 
000288 c00e                      		rjmp USART_RX_COMPLETE_RET
                                 
                                 	USART_RX_COMPLETE_NOT_BACKSPACE:
                                 		; Handle full command buffer
000289 3624                      		cpi IDX, CMD_MAX_LEN
                                 
00028a f061                      		breq USART_RX_COMPLETE_RET
                                 
                                 		; Get next-character index
00028b e0d0                      		ldi YH, HIGH(CMD)
00028c e6c0                      		ldi YL, LOW(CMD)
00028d 0fc2                      		add YL, IDX
00028e 2700                      		clr TEMP
00028f 1fd0                      		adc YH, TEMP
                                 
                                 		; Store character
000290 8318                      		st Y, CHAR
                                 	
                                 		; Increment index
000291 9523                      		inc IDX
000292 8320                      		st Z, IDX
                                 
                                 		; Echo character back
000293 2f01                      		mov R16, CHAR
000294 930f                      		push R16
000295 dea2                      		rcall PUTCHAR
000296 910f                      		pop R16
                                 
                                 	USART_RX_COMPLETE_RET:
                                 		; Restore Registers
000297 912f                      		pop IDX
000298 911f                      		pop CHAR
000299 91cf                      		pop YL
00029a 91df                      		pop YH
00029b 91ef                      		pop ZL
00029c 91ff                      		pop ZH
00029d 910f                      		pop TEMP
00029e bf0f                      		out SREG, TEMP
00029f 910f                      		pop TEMP
                                 
0002a0 9518                      		reti
                                 
                                 	; Clear Register Aliases
                                 	.undef TEMP
                                 	.undef CHAR
                                 	.undef IDX
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; # Subroutines
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 ; Inputs:
                                 ; - ADDRL: R16
                                 ; - ADDRH: R17
                                 ; - IDX  : R18
                                 EXECUTE:
                                 	.def ADDRL = R16
                                 	.def ADDRH = R17
                                 	.def IDX   = R18
                                 	.def CHAR  = R19
                                 	.def TEMP  = R20
                                 	
0002a1 934f                      	push TEMP
0002a2 93cf                      	push YL
0002a3 93df                      	push YH
                                 
                                 	; Empty command
0002a4 3022                      	cpi IDX, 2
0002a5 f188                      	brlo EXECUTE_INVALID
                                 
0002a6 2fd1                      	mov YH, ADDRH
0002a7 2fc0                      	mov YL,	ADDRL
0002a8 8138                      	ld	CHAR, Y
                                 	
0002a9 95c3                      	inc YL
0002aa 2744                      	clr TEMP
0002ab 1fd4                      	adc YH, TEMP
0002ac 8148                      	ld	TEMP, Y
                                 
0002ad 3240                      	cpi TEMP, ASCII_SPACE
0002ae f541                      	brne EXECUTE_INVALID
                                 
0002af 3732                      	cpi CHAR, ASCII_LOWER_R
0002b0 f441                      	brne EXECUTE_W
0002b1 932f                      	push IDX
0002b2 931f                      	push ADDRH
0002b3 930f                      	push ADDRL
0002b4 deb9                      	rcall READ_MEM
0002b5 914f                      	pop TEMP
0002b6 914f                      	pop TEMP
0002b7 914f                      	pop TEMP
0002b8 c025                      	rjmp  EXECUTE_RET
                                 
                                 	EXECUTE_W:
0002b9 3737                      		cpi CHAR, ASCII_LOWER_W
0002ba f441                      		brne EXECUTE_G
0002bb 932f                      		push IDX
0002bc 931f                      		push ADDRH
0002bd 930f                      		push ADDRL
0002be df24                      		rcall WRITE_MEM
0002bf 914f                      		pop TEMP
0002c0 914f                      		pop TEMP
0002c1 914f                      		pop TEMP
0002c2 c01b                      		rjmp  EXECUTE_RET
                                 	EXECUTE_G:
0002c3 3637                      		cpi CHAR, ASCII_LOWER_G
0002c4 f411                      		brne EXECUTE_S
0002c5 d023                      		rcall READ_REGISTER
0002c6 c017                      		rjmp  EXECUTE_RET
                                 	EXECUTE_S:
0002c7 3733                      		cpi CHAR, ASCII_LOWER_S
0002c8 f411                      		brne EXECUTE_O
0002c9 d020                      		rcall WRITE_REGISTER
0002ca c013                      		rjmp  EXECUTE_RET
                                 	EXECUTE_O:
0002cb 363f                      		cpi CHAR, ASCII_LOWER_O
0002cc f411                      		brne EXECUTE_I
0002cd d01d                      		rcall READ_IO
0002ce c00f                      		rjmp  EXECUTE_RET
                                 
                                 	EXECUTE_I:
0002cf 3639                      		cpi CHAR, ASCII_LOWER_I
0002d0 f411                      		brne EXECUTE_P
0002d1 d01a                      		rcall WRITE_IO
0002d2 c00b                      		rjmp  EXECUTE_RET
                                 
                                 	EXECUTE_P:
0002d3 3730                      		cpi CHAR, ASCII_LOWER_P
0002d4 f411                      		brne EXECUTE_INVALID
0002d5 d017                      		rcall REPEAT_CMD
0002d6 c007                      		rjmp  EXECUTE_RET
                                 	
                                 	EXECUTE_INVALID:
                                 		; Print Error
0002d7 e044                      		ldi TEMP, HIGH(EXEC_INVALID_CMD << 1)
0002d8 934f                      		push TEMP
0002d9 e840                      		ldi TEMP, LOW (EXEC_INVALID_CMD << 1)
0002da 934f                      		push TEMP
0002db de69                      		rcall PUTSTR
0002dc 914f                      		pop TEMP
0002dd 914f                      		pop TEMP
                                 
                                 	EXECUTE_RET:
                                 		; Print Prompt
0002de e044                      		ldi TEMP, HIGH(PROMPT << 1)
0002df 934f                      		push TEMP
0002e0 e748                      		ldi TEMP, LOW (PROMPT << 1)
0002e1 934f                      		push TEMP
0002e2 de62                      		rcall PUTSTR
0002e3 914f                      		pop TEMP
0002e4 914f                      		pop TEMP
                                 
0002e5 91df                      		pop YH
0002e6 91cf                      		pop YL
0002e7 914f                      		pop TEMP
                                 	
0002e8 9508                      		ret
                                 
                                 	.undef ADDRL
                                 	.undef ADDRH
                                 	.undef CHAR
                                 	.undef IDX
                                 	.undef TEMP
                                 
                                 READ_REGISTER:
0002e9 9508                      ret
                                 
                                 WRITE_REGISTER:
0002ea 9508                      ret
                                 
                                 READ_IO:
0002eb 9508                      ret
                                 
                                 WRITE_IO:
0002ec 9508                      ret
                                 
                                 REPEAT_CMD:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega32" register use summary:
x  :   0 y  :  31 z  :  12 r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 172 r17:  47 r18:  28 r19:   8 r20:  24 
r21:   0 r22:   0 r23:   0 r24:   0 r25:   0 r26:   0 r27:   0 r28:  39 
r29:  39 r30:  44 r31:  44 
Registers used: 11 out of 35 (31.4%)

"ATmega32" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   3 add   :   2 adiw  :  10 and   :   0 
andi  :   2 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :   4 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   7 brlt  :   0 brmi  :   0 
brne  :  26 brpl  :   0 brsh  :   1 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   0 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   4 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   6 cpc   :   0 
cpi   :  28 cpse  :   0 dec   :   1 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :  20 inc   :   4 jmp   :   2 
ld    :   9 ldd   :  16 ldi   :  46 lds   :   0 lpm   :   4 lsl   :   4 
lsr   :   1 mov   :   5 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   0 or    :   1 ori   :   0 out   :   7 pop   : 113 
push  : 113 rcall :  36 ret   :  15 reti  :   1 rjmp  :  19 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :   0 sbic  :   0 sbis  :   1 
sbiw  :   0 sbr   :   0 sbrc  :   0 sbrs  :   1 sec   :   0 seh   :   0 
sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   6 std   :  10 sts   :   0 
sub   :   0 subi  :   3 swap  :   1 tst   :   0 wdr   :   0 
Instructions used: 37 out of 113 (32.7%)

"ATmega32" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0005dc   1066    386   1452   32768   4.4%
[.dseg] 0x000060 0x0000c5      0    101    101    2048   4.9%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
