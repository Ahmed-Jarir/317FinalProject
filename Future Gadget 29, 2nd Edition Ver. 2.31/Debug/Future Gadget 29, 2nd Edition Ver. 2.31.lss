
AVRASM ver. 2.2.8  C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\main.asm Fri Jan 19 19:03:05 2024

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m32def.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\main.asm(105): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\ascii.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\main.asm(106): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\io.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\main.asm(107): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\read-mem.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\read-mem.inc(18): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\ascii.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\read-mem.inc(19): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\io.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\main.asm(108): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\write-mem.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\write-mem.inc(18): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\ascii.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\write-mem.inc(19): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\io.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\main.asm(109): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\read-io.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\read-io.inc(18): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\ascii.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\read-io.inc(19): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\io.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\read-io.inc(20): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\io-name-to-addr.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\main.asm(110): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\write-io.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\write-io.inc(18): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\ascii.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\write-io.inc(19): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\io.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\write-io.inc(20): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\io-name-to-addr.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m32def.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\main.asm(105): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\ascii.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\main.asm(106): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\io.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\main.asm(107): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\read-mem.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\read-mem.inc(18): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\ascii.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\read-mem.inc(19): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\io.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\main.asm(108): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\write-mem.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\write-mem.inc(18): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\ascii.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\write-mem.inc(19): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\io.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\main.asm(109): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\read-io.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\read-io.inc(18): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\ascii.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\read-io.inc(19): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\io.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\read-io.inc(20): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\io-name-to-addr.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\main.asm(110): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\write-io.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\write-io.inc(18): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\ascii.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\write-io.inc(19): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\io.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\write-io.inc(20): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\io-name-to-addr.inc'
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega32.xml ************
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m32def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega32
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega32
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M32DEF_INC_
                                 #define _M32DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega32
                                 #pragma AVRPART ADMIN PART_NAME ATmega32
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x02
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	OCR0	= 0x3c
                                 .equ	GICR	= 0x3b
                                 .equ	GIFR	= 0x3a
                                 .equ	TIMSK	= 0x39
                                 .equ	TIFR	= 0x38
                                 .equ	SPMCR	= 0x37
                                 .equ	TWCR	= 0x36
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUCSR	= 0x34
                                 .equ	TCCR0	= 0x33
                                 .equ	TCNT0	= 0x32
                                 .equ	OSCCAL	= 0x31
                                 .equ	OCDR	= 0x31
                                 .equ	SFIOR	= 0x30
                                 .equ	TCCR1A	= 0x2f
                                 .equ	TCCR1B	= 0x2e
                                 .equ	TCNT1L	= 0x2c
                                 .equ	TCNT1H	= 0x2d
                                 .equ	OCR1AL	= 0x2a
                                 .equ	OCR1AH	= 0x2b
                                 .equ	OCR1BL	= 0x28
                                 .equ	OCR1BH	= 0x29
                                 .equ	ICR1L	= 0x26
                                 .equ	ICR1H	= 0x27
                                 .equ	TCCR2	= 0x25
                                 .equ	TCNT2	= 0x24
                                 .equ	OCR2	= 0x23
                                 .equ	ASSR	= 0x22
                                 .equ	WDTCR	= 0x21
                                 .equ	UBRRH	= 0x20
                                 .equ	UCSRC	= 0x20
                                 .equ	EEARL	= 0x1e
                                 .equ	EEARH	= 0x1f
                                 .equ	EEDR	= 0x1d
                                 .equ	EECR	= 0x1c
                                 .equ	PORTA	= 0x1b
                                 .equ	DDRA	= 0x1a
                                 .equ	PINA	= 0x19
                                 .equ	PORTB	= 0x18
                                 .equ	DDRB	= 0x17
                                 .equ	PINB	= 0x16
                                 .equ	PORTC	= 0x15
                                 .equ	DDRC	= 0x14
                                 .equ	PINC	= 0x13
                                 .equ	PORTD	= 0x12
                                 .equ	DDRD	= 0x11
                                 .equ	PIND	= 0x10
                                 .equ	SPDR	= 0x0f
                                 .equ	SPSR	= 0x0e
                                 .equ	SPCR	= 0x0d
                                 .equ	UDR	= 0x0c
                                 .equ	UCSRA	= 0x0b
                                 .equ	UCSRB	= 0x0a
                                 .equ	UBRRL	= 0x09
                                 .equ	ACSR	= 0x08
                                 .equ	ADMUX	= 0x07
                                 .equ	ADCSRA	= 0x06
                                 .equ	ADCH	= 0x05
                                 .equ	ADCL	= 0x04
                                 .equ	TWDR	= 0x03
                                 .equ	TWAR	= 0x02
                                 .equ	TWSR	= 0x01
                                 .equ	TWBR	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEWE	= 1	; EEPROM Write Enable
                                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDTOE	= 4	; RW
                                 .equ	WDDE	= WDTOE	; For compatibility
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; GICR - General Interrupt Control Register
                                 .equ	GIMSK	= GICR	; For compatibility
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	INT2	= 5	; External Interrupt Request 2 Enable
                                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 7	; External Interrupt Request 1 Enable
                                 
                                 ; GIFR - General Interrupt Flag Register
                                 .equ	INTF2	= 5	; External Interrupt Flag 2
                                 .equ	INTF0	= 6	; External Interrupt Flag 0
                                 .equ	INTF1	= 7	; External Interrupt Flag 1
                                 
                                 ; MCUCR - General Interrupt Control Register
                                 .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	ISC2	= 6	; Interrupt Sense Control 2
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TCCR0 - Timer/Counter Control Register
                                 .equ	CS00	= 0	; Clock Select 1
                                 .equ	CS01	= 1	; Clock Select 1
                                 .equ	CS02	= 2	; Clock Select 2
                                 .equ	WGM01	= 3	; Waveform Generation Mode 1
                                 .equ	CTC0	= WGM01	; For compatibility
                                 .equ	COM00	= 4	; Compare match Output Mode 0
                                 .equ	COM01	= 5	; Compare Match Output Mode 1
                                 .equ	WGM00	= 6	; Waveform Generation Mode
                                 .equ	PWM0	= WGM00	; For compatibility
                                 .equ	FOC0	= 7	; Force Output Compare
                                 
                                 ; TCNT0 - Timer/Counter Register
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0 - Output Compare Register
                                 .equ	OCR0_0	= 0	; 
                                 .equ	OCR0_1	= 1	; 
                                 .equ	OCR0_2	= 2	; 
                                 .equ	OCR0_3	= 3	; 
                                 .equ	OCR0_4	= 4	; 
                                 .equ	OCR0_5	= 5	; 
                                 .equ	OCR0_6	= 6	; 
                                 .equ	OCR0_7	= 7	; 
                                 
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0	= 1	; Timer/Counter0 Output Compare Match Interrupt register
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0	= 1	; Output Compare Flag 0
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 6	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	OCIE2	= 7	; Timer/Counter2 Output Compare Match Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2	= 7	; Output Compare Flag 2
                                 
                                 ; TCCR2 - Timer/Counter2 Control Register
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM21	= 3	; Clear Timer/Counter2 on Compare Match
                                 .equ	CTC2	= WGM21	; For compatibility
                                 .equ	COM20	= 4	; Compare Output Mode bit 0
                                 .equ	COM21	= 5	; Compare Output Mode bit 1
                                 .equ	WGM20	= 6	; Pulse Width Modulator Enable
                                 .equ	PWM2	= WGM20	; For compatibility
                                 .equ	FOC2	= 7	; Force Output Compare
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2 - Timer/Counter2 Output Compare Register
                                 .equ	OCR2_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2UB	= 0	; Timer/counter Control Register2 Update Busy
                                 .equ	OCR2UB	= 1	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 2	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 3	; Asynchronous Timer/counter2
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	PWM10	= WGM10	; For compatibility
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	PWM11	= WGM11	; For compatibility
                                 .equ	FOC1B	= 2	; Force Output Compare 1B
                                 .equ	FOC1A	= 3	; Force Output Compare 1A
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	CTC10	= WGM12	; For compatibility
                                 .equ	CTC1	= WGM12	; For compatibility
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	CTC11	= WGM13	; For compatibility
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** USART ************************
                                 ; UDR - USART I/O Data Register
                                 .equ	UDR0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSRA - USART Control and Status Register A
                                 .equ	USR	= UCSRA	; For compatibility
                                 .equ	MPCM	= 0	; Multi-processor Communication Mode
                                 .equ	U2X	= 1	; Double the USART transmission speed
                                 .equ	UPE	= 2	; Parity Error
                                 .equ	PE	= UPE	; For compatibility
                                 .equ	DOR	= 3	; Data overRun
                                 .equ	FE	= 4	; Framing Error
                                 .equ	UDRE	= 5	; USART Data Register Empty
                                 .equ	TXC	= 6	; USART Transmitt Complete
                                 .equ	RXC	= 7	; USART Receive Complete
                                 
                                 ; UCSRB - USART Control and Status Register B
                                 .equ	UCR	= UCSRB	; For compatibility
                                 .equ	TXB8	= 0	; Transmit Data Bit 8
                                 .equ	RXB8	= 1	; Receive Data Bit 8
                                 .equ	UCSZ2	= 2	; Character Size
                                 .equ	CHR9	= UCSZ2	; For compatibility
                                 .equ	TXEN	= 3	; Transmitter Enable
                                 .equ	RXEN	= 4	; Receiver Enable
                                 .equ	UDRIE	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSRC - USART Control and Status Register C
                                 .equ	UCPOL	= 0	; Clock Polarity
                                 .equ	UCSZ0	= 1	; Character Size
                                 .equ	UCSZ1	= 2	; Character Size
                                 .equ	USBS	= 3	; Stop Bit Select
                                 .equ	UPM0	= 4	; Parity Mode Bit 0
                                 .equ	UPM1	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL	= 6	; USART Mode Select
                                 .equ	URSEL	= 7	; Register Select
                                 
                                 .equ	UBRRHI	= UBRRH	; For compatibility
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; SFIOR - Special Function IO Register
                                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register
                                 .equ	ADCSR	= ADCSRA	; For compatibility
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; When this bit is written to one,the Timer/Counter2 prescaler will be reset.The bit will be cleared by hardware after the operation is performed.Writing a zero to this bit will have no effect.This bit will always be read as zero if Timer/C                                 ounter2 is clocked by the internal CPU clock.If this bit is written when Timer/Counter2 is operating in asynchronous mode,the bit will remain one until the prescaler has been reset.
                                 .equ	ADFR	= ADATE	; For compatibility
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	ADTS0	= 5	; ADC Auto Trigger Source 0
                                 .equ	ADTS1	= 6	; ADC Auto Trigger Source 1
                                 .equ	ADTS2	= 7	; ADC Auto Trigger Source 2
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 ;.equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 ;.equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 ;.equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 ;.equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 .equ	SM0	= 4	; Sleep Mode Select
                                 .equ	SM1	= 5	; Sleep Mode Select
                                 .equ	SM2	= 6	; Sleep Mode Select
                                 .equ	SE	= 7	; Sleep Enable
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	MCUSR	= MCUCSR	; For compatibility
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	PSR10	= 0	; Prescaler Reset Timer/Counter1&0
                                 .equ	PSR2	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PUD	= 2	; Pull-up Disable
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	ASRE	= RWWSRE	; For compatibility
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	ASB	= RWWSB	; For compatibility
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler bits
                                 .equ	TWPS1	= 1	; TWI Prescaler bits
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	BODEN	= 6	; Brown out detector enable
                                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x003f
                                 .equ	SRAM_START	= 0x0060
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x085f
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	OC2addr	= 0x0008	; Timer/Counter2 Compare Match
                                 .equ	OVF2addr	= 0x000a	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x000c	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x000e	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0010	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x0012	; Timer/Counter1 Overflow
                                 .equ	OC0addr	= 0x0014	; Timer/Counter0 Compare Match
                                 .equ	OVF0addr	= 0x0016	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0018	; Serial Transfer Complete
                                 .equ	URXCaddr	= 0x001a	; USART, Rx Complete
                                 .equ	UDREaddr	= 0x001c	; USART Data Register Empty
                                 .equ	UTXCaddr	= 0x001e	; USART, Tx Complete
                                 .equ	ADCCaddr	= 0x0020	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x0022	; EEPROM Ready
                                 .equ	ACIaddr	= 0x0024	; Analog Comparator
                                 .equ	TWIaddr	= 0x0026	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0028	; Store Program Memory Ready
                                 
                                 .equ	INT_VECTORS_SIZE	= 42	; size in words
                                 
                                 #endif  /* _M32DEF_INC_ */
                                 
                                 
                                 ;;
                                 ;; Future Gadget 29, 2nd Edition Ver. 2.31
                                 ;;
                                 ;; COMP317 Final Project
                                 ;;
                                 ;; Authors:
                                 ;; - Ameer Taweel (0077340)
                                 ;; - Ahmed Jareer (0074982)
                                 ;;
                                 ;; Resources Usage:
                                 ;; - Program Size: 4250 Bytes
                                 ;; - Data    Size: 174  Bytes
                                 ;;
                                 ;; Summary:
                                 ;;
                                 ;; Multiple times during this course, we faced a situation where the code works
                                 ;; in the debugger/simulator but not on the physical microcontroller. Debugging
                                 ;; and fixing such issues was hard because we couldn't inspect the system's
                                 ;; internal state.
                                 ;;
                                 ;; Therefore, built a system that is easy to inspect. It exposes a shell using
                                 ;; the ANSI standard over USART. The system has commands to check the system's
                                 ;; state, like memory regions and I/O pin values. Moreover, the system supports
                                 ;; periodic tasks, like logging a memory region every two minutes.
                                 ;;
                                 ;; It also has commands for modifying the system's state, like setting a memory
                                 ;; region or setting the mode of an I/O pin.
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; # Code Style
                                 ;;
                                 ;;   - No global register aliases.
                                 ;;   - Capitalize all user-defined names (constants, register aliases, labels).
                                 ;;   - Pass subroutine parameters using the stack.
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; # Constants
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 ; Baud Rate in Bits Per Second (bps)
                                 .equ BAUD_RATE = 9600
                                 ; System Clock Frequency
                                 .equ F_CLK     = 4 * 1024 * 1024
                                 ; System Oscillator Clock Frequency
                                 .equ F_OSC     = 4 * 1000 * 1000
                                 ; Contents of the UBRRH and UBRRL Registers (0 - 4095)
                                 ; Asynchronous Normal Mode (U2X = 0)
                                 .equ BAUD_UBRR = (F_OSC / (16 * BAUD_RATE)) - 1
                                 
                                 .equ T1_PRESCALE = 1024
                                 .equ T1_MAX_VAL  = (F_CLK / T1_PRESCALE) - 1
                                 
                                 ; Maximum Command Length
                                 .equ CMD_MAX_LEN     = 32
                                 .equ MAX_REPEAT_CMDS = 4
                                 ; 1           Byte  -> Counter
                                 ; 1           Byte  -> Interval
                                 ; 1           Byte  -> Command Length
                                 ; CMD_MAX_LEN Bytes -> Command
                                 .equ REPEAT_CMD_LEN  = CMD_MAX_LEN + 3
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; # Data Segment
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 ; Data Segment Start
                                 .dseg
                                 
000060                           CMD    : .byte CMD_MAX_LEN
000080                           CMD_IDX: .byte 1
                                 
000081                           REPEAT_CMDS: .byte REPEAT_CMD_LEN * MAX_REPEAT_CMDS
00010d                           REPEAT_IDX : .byte 1
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; # Interrupt Vector Table
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 ; Code Segment Start
                                 .cseg
                                 
                                 .org 0x0000
000000 940c 05b6                 	jmp RESET
                                 .org 0x000E
00000e 940c 0624                 	jmp T1_COMPA
                                 .org 0x001A 
00001a 940c 05d6                 	jmp USART_RX_COMPLETE
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; # Imports
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 .INCLUDE "ascii.inc"
                                 
                                 ;; Include Guard
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 .ifdef INCLUDE_ASCII
                                 .endif
                                 
                                 .equ INCLUDE_ASCII = 1
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; ASCII Codes
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 .equ ASCII_BACKSPACE = 0x08
                                 .equ ASCII_NEW_LINE  = 0x0D
                                 .equ ASCII_SPACE     = 0x20
                                 .equ ASCII_ZERO      = 0x30
                                 .equ ASCII_NINE      = 0x39
                                 .equ ASCII_ARROW_R   = 0x3E
                                 .equ ASCII_UPPER_A   = 0x41
                                 .equ ASCII_UPPER_E   = 0x45
                                 .equ ASCII_UPPER_F   = 0x46
                                 .equ ASCII_UPPER_G   = 0x47
                                 .equ ASCII_LOWER_A   = 0x61
                                 .equ ASCII_LOWER_D   = 0x64
                                 .equ ASCII_LOWER_F   = 0x66
                                 .equ ASCII_LOWER_G   = 0x67
                                 .equ ASCII_LOWER_I   = 0x69
                                 .equ ASCII_LOWER_L   = 0x6C
                                 .equ ASCII_LOWER_O   = 0x6F
                                 .equ ASCII_LOWER_P   = 0x70
                                 .equ ASCII_LOWER_R   = 0x72
                                 .equ ASCII_LOWER_S   = 0x73
                                 .equ ASCII_LOWER_W   = 0x77
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Parse ASCII Character As Hex
                                 ;;
                                 ;; Inputs:
                                 ;; - Constant Zero <- SP + 4
                                 ;; - ASCII    Char <- SP + 3 (First Byte Before Return Address)
                                 ;;
                                 ;; Outputs:
                                 ;; - Error Status  -> SP + 4
                                 ;; - Hex   Digit   -> SP + 3 (First Byte Before Return Address)
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 ASCII_BYTE_TO_HEX:
                                 	.def CHAR = R16
                                 
                                 	; Number of pushes
                                 	.set STACK_OFFSET = 5
                                 	; Backup Registers
00001c 930f                      	push CHAR
00001d 93df                      	push YH
00001e 93cf                      	push YL
00001f 93ff                      	push ZH
000020 93ef                      	push ZL
                                 
                                 	; Load Stack Pointer
                                 	; Y <- SP
000021 b7de                      	in YH, SPH
000022 b7cd                      	in YL, SPL
                                 
                                 	; Load ASCII Character
000023 8508                      	ldd CHAR, Y+(STACK_OFFSET + 3)
                                 
000024 e0f1                      	ldi ZH, HIGH(ASCII_TO_HEX_LOOKUP_TABLE << 1)
000025 e7e0                      	ldi ZL, LOW (ASCII_TO_HEX_LOOKUP_TABLE << 1)
                                 
000026 0fe0                      	add ZL, CHAR
000027 e000                      	ldi CHAR, 0
000028 1ff0                      	adc ZH, CHAR
                                 
000029 9104                      	lpm CHAR, Z
                                 
00002a 3100                      	cpi CHAR, 16
                                 	; CHAR Invalid
00002b f410                      	brsh ASCII_BYTE_TO_HEX_ERR
00002c 8708                      	std Y+(STACK_OFFSET + 3), CHAR
00002d c002                      	rjmp ASCII_BYTE_TO_HEX_RET
                                 
                                 	ASCII_BYTE_TO_HEX_ERR:
                                 		; Error Status <- True
00002e e001                      		ldi CHAR, 1
00002f 8709                      		std Y+(STACK_OFFSET + 4), CHAR
                                 
                                 	ASCII_BYTE_TO_HEX_RET:
                                 		; Restore Registers
000030 91ef                      		pop ZL
000031 91ff                      		pop ZH
000032 91cf                      		pop YL
000033 91df                      		pop YH
000034 910f                      		pop CHAR
                                 
000035 9508                      		ret
                                 
                                 	.undef CHAR
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Parse Two ASCII Digits As Hex
                                 ;;
                                 ;; Inputs:
                                 ;; - Constant Zero          <- SP + 5
                                 ;; - ASCII String Pointer H <- SP + 4
                                 ;; - ASCII String Pointer L <- SP + 3 (First Byte Before Return Address)
                                 ;;
                                 ;; Outputs:
                                 ;; - Error Status           -> SP + 5
                                 ;; - No    Output           -> SP + 4
                                 ;; - Return Value           -> SP + 3 (First Byte Before Return Address)
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 ASCII_WORD_TO_HEX:
                                 	.def TEMP = R16
                                 	.def BYTE = R17
                                 
                                 	; Number of pushes
                                 	.set STACK_OFFSET = 6
                                 	; Backup Registers
000036 930f                      	push TEMP
000037 931f                      	push BYTE
000038 93df                      	push YH
000039 93cf                      	push YL
00003a 93ff                      	push ZH
00003b 93ef                      	push ZL
                                 
                                 	; Load Stack Pointer
                                 	; Y <- SP
00003c b7de                      	in YH, SPH
00003d b7cd                      	in YL, SPL
                                 
                                 	; Load String Address
00003e 85fa                      	ldd ZH, Y+(STACK_OFFSET + 4)
00003f 85e9                      	ldd ZL, Y+(STACK_OFFSET + 3)
                                 
                                 	; Push Zero To Stack
000040 e000                      	ldi TEMP, 0
000041 930f                      	push TEMP
                                 	; Load Most Significant ASCII Character
000042 9101                      	ld TEMP, Z+
                                 	; Push ASCII Character To Stack
000043 930f                      	push TEMP
000044 dfd7                      	rcall ASCII_BYTE_TO_HEX
                                 	; Get Return Value
000045 911f                      	pop BYTE
                                 	; Get Error Status
000046 910f                      	pop TEMP
                                 	; IF (SUBROUTINE ERR != 0) THEN ERR
000047 3000                      	cpi TEMP, 0
000048 f481                      	brne ASCII_WORD_TO_HEX_ERR
                                 
                                 	; Byte <- Byte << 4
000049 0f11                      	lsl BYTE
00004a 0f11                      	lsl BYTE
00004b 0f11                      	lsl BYTE
00004c 0f11                      	lsl BYTE
                                 
                                 	; Push Zero To Stack
00004d e000                      	ldi TEMP, 0
00004e 930f                      	push TEMP
                                 	; Load Most Significant ASCII Character
00004f 8100                      	ld TEMP, Z
                                 	; Push ASCII Character To Stack
000050 930f                      	push TEMP
000051 dfca                      	rcall ASCII_BYTE_TO_HEX
                                 	; Get Return Value
000052 910f                      	pop TEMP
                                 	; Append Return Value To Byte
000053 2b10                      	or BYTE, TEMP
                                 	; Get Error Status
000054 910f                      	pop TEMP
                                 	; IF (SUBROUTINE ERR != 0) THEN ERR
000055 3000                      	cpi TEMP, 0
000056 f411                      	brne ASCII_WORD_TO_HEX_ERR
                                 
                                 	; Return Valid Value
000057 8719                      	std Y+(STACK_OFFSET + 3), BYTE
000058 c002                      	rjmp ASCII_WORD_TO_HEX_RET
                                 
                                 	ASCII_WORD_TO_HEX_ERR:
000059 e001                      		ldi TEMP, 1
00005a 870b                      		std Y+(STACK_OFFSET + 5), TEMP
                                 
                                 	ASCII_WORD_TO_HEX_RET:
                                 		; Restore Registers
00005b 91ef                      		pop ZL
00005c 91ff                      		pop ZH
00005d 91cf                      		pop YL
00005e 91df                      		pop YH
00005f 911f                      		pop BYTE
000060 910f                      		pop TEMP
                                 
000061 9508                      		ret
                                 
                                 	.undef TEMP
                                 	.undef BYTE
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Parse Four ASCII Digits As Hex
                                 ;;
                                 ;; Inputs:
                                 ;; - Constant Zero          <- SP + 5
                                 ;; - ASCII String Pointer H <- SP + 4
                                 ;; - ASCII String Pointer L <- SP + 3 (First Byte Before Return Address)
                                 ;;
                                 ;; Outputs:
                                 ;; - Error Status           -> SP + 5
                                 ;; - Return Value H         -> SP + 4
                                 ;; - Return Value L         -> SP + 3 (First Byte Before Return Address)
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 ASCII_QUAD_TO_HEX:
                                 	.def TEMP  = R16
                                 	.def BYTEH = R17
                                 	.def BYTEL = R18
                                 
                                 	; Number of pushes
                                 	.set STACK_OFFSET = 7
                                 	; Backup Registers
000062 930f                      	push TEMP
000063 931f                      	push BYTEH
000064 932f                      	push BYTEL
000065 93df                      	push YH
000066 93cf                      	push YL
000067 93ff                      	push ZH
000068 93ef                      	push ZL
                                 
                                 	; Load Stack Pointer
                                 	; Y <- SP
000069 b7de                      	in YH, SPH
00006a b7cd                      	in YL, SPL
                                 
                                 	; Load String Address
00006b 85fb                      	ldd ZH, Y+(STACK_OFFSET + 4)
00006c 85ea                      	ldd ZL, Y+(STACK_OFFSET + 3)
                                 
                                 	; Push Arguments To Stack
00006d e000                      	ldi TEMP, 0
00006e 930f                      	push TEMP
00006f 93ff                      	push ZH
000070 93ef                      	push ZL
                                 	; Parse High Bytes
000071 dfc4                      	rcall ASCII_WORD_TO_HEX
                                 	; Get Return Value
000072 911f                      	pop BYTEH
                                 	; Discard Dummy Output
000073 910f                      	pop TEMP
                                 	; Get Error Status
000074 910f                      	pop TEMP
                                 	; IF (SUBROUTINE ERR != 0) THEN ERR
000075 3000                      	cpi TEMP, 0
000076 f471                      	brne ASCII_QUAD_TO_HEX_ERR
                                 
                                 	; Advance To Low Bytes
000077 9632                      	adiw ZH:ZL, 2
                                 
                                 	; Push Arguments To Stack
000078 e000                      	ldi TEMP, 0
000079 930f                      	push TEMP
00007a 93ff                      	push ZH
00007b 93ef                      	push ZL
                                 	; Parse Low Bytes
00007c dfb9                      	rcall ASCII_WORD_TO_HEX
                                 	; Get Return Value
00007d 912f                      	pop BYTEL
                                 	; Discard Dummy Output
00007e 910f                      	pop TEMP
                                 	; Get Error Status
00007f 910f                      	pop TEMP
                                 	; IF (SUBROUTINE ERR != 0) THEN ERR
000080 3000                      	cpi TEMP, 0
000081 f419                      	brne ASCII_QUAD_TO_HEX_ERR
                                 
                                 	; Return Valid Value
000082 871b                      	std Y+(STACK_OFFSET + 4), BYTEH
000083 872a                      	std Y+(STACK_OFFSET + 3), BYTEL
000084 c002                      	rjmp ASCII_QUAD_TO_HEX_RET
                                 
                                 	ASCII_QUAD_TO_HEX_ERR:
000085 e001                      		ldi TEMP, 1
000086 870c                      		std Y+(STACK_OFFSET + 5), TEMP
                                 
                                 	ASCII_QUAD_TO_HEX_RET:
                                 		; Restore Registers
000087 91ef                      		pop ZL
000088 91ff                      		pop ZH
000089 91cf                      		pop YL
00008a 91df                      		pop YH
00008b 912f                      		pop BYTEL
00008c 911f                      		pop BYTEH
00008d 910f                      		pop TEMP
                                 
00008e 9508                      		ret
                                 
                                 	.undef TEMP
                                 	.undef BYTEH
                                 	.undef BYTEL
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Convert Hex Nibble To ASCII Character
                                 ;;
                                 ;; Inputs:
                                 ;; - Nibble     <- SP + 3 (First Byte Before Return Address)
                                 ;;
                                 ;; Outputs:
                                 ;; - ASCII Char -> SP + 3 (First Byte Before Return Address)
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 HEX_NIBBLE_TO_ASCII:
                                 	.def NIBBLE = R16
                                 
                                 	; Number of pushes
                                 	.set STACK_OFFSET = 3
                                 	; Backup Registers
00008f 930f                      	push NIBBLE
000090 93df                      	push YH
000091 93cf                      	push YL
                                 
                                 	; Load Stack Pointer
                                 	; Y <- SP
000092 b7de                      	in YH, SPH
000093 b7cd                      	in YL, SPL
                                 
                                 	; Load Hex Nibble
000094 810e                      	ldd NIBBLE, Y+(STACK_OFFSET + 3)
                                 
000095 300a                      	cpi NIBBLE, 10
000096 f010                      	brlo HEX_NIBBLE_TO_ASCII_DIGIT
                                 
                                 	HEX_NIBBLE_TO_ASCII_CHAR:
                                 		; NIBBLE <- NIBBLE - 10 + ASCII_UPPER_A
000097 5c09                      		subi NIBBLE, (10 - ASCII_UPPER_A)
000098 c001                      		rjmp HEX_NIBBLE_TO_ASCII_RET
                                 
                                 	HEX_NIBBLE_TO_ASCII_DIGIT:
                                 		; NIBBLE <- NIBBLE + ASCII_ZERO
000099 5d00                      		subi NIBBLE, (-ASCII_ZERO)
                                 
                                 	HEX_NIBBLE_TO_ASCII_RET:
00009a 830e                      		std Y+(STACK_OFFSET + 3), NIBBLE
                                 
                                 		; Restore Registers
00009b 91cf                      		pop YL
00009c 91df                      		pop YH
00009d 910f                      		pop NIBBLE
                                 
00009e 9508                      		ret
                                 
                                 	.undef NIBBLE
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Convert Hex Byte To Two ASCII Characters
                                 ;;
                                 ;; Inputs:
                                 ;; - Dummy Input                    <- SP + 4
                                 ;; - Byte                           <- SP + 3 (First Byte Before Return Address)
                                 ;;
                                 ;; Outputs:
                                 ;; - ASCII Char (Most  Significant) -> SP + 4
                                 ;; - ASCII Char (Least Significant) -> SP + 3 (First Byte Before Return Address)
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 HEX_BYTE_TO_ASCII:
                                 	.def BYTE   = R16
                                 	.def NIBBLE = R17
                                 
                                 	; Number of pushes
                                 	.set STACK_OFFSET = 4
                                 	; Backup Registers
00009f 930f                      	push BYTE
0000a0 931f                      	push NIBBLE
0000a1 93df                      	push YH
0000a2 93cf                      	push YL
                                 
                                 	; Load Stack Pointer
                                 	; Y <- SP
0000a3 b7de                      	in YH, SPH
0000a4 b7cd                      	in YL, SPL
                                 
                                 	; Load Hex Byte
0000a5 810f                      	ldd BYTE, Y+(STACK_OFFSET + 3)
                                 
                                 	; Convert Least Significant Nibble
0000a6 2f10                      	mov NIBBLE, BYTE
0000a7 701f                      	andi NIBBLE, 0x0F
0000a8 931f                      	push NIBBLE
0000a9 dfe5                      	rcall HEX_NIBBLE_TO_ASCII
0000aa 911f                      	pop NIBBLE
                                 
                                 	; Output Least Significant Nibble
0000ab 831f                      	std Y+(STACK_OFFSET + 3), NIBBLE
                                 
                                 	; Convert Most Significant Nibble
0000ac 2f10                      	mov NIBBLE, BYTE
0000ad 7f10                      	andi NIBBLE, 0xF0
0000ae 9512                      	swap NIBBLE
0000af 931f                      	push NIBBLE
0000b0 dfde                      	rcall HEX_NIBBLE_TO_ASCII
0000b1 911f                      	pop NIBBLE
                                 
                                 	; Output Most Significant Nibble
0000b2 8718                      	std Y+(STACK_OFFSET + 4), NIBBLE
                                 
                                 	; Restore Registers
0000b3 91cf                      	pop YL
0000b4 91df                      	pop YH
0000b5 911f                      	pop NIBBLE
0000b6 910f                      	pop BYTE
                                 
0000b7 9508                      	ret
                                 
                                 	.undef BYTE
                                 	.undef NIBBLE
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Lookup Table To Convert ASCII To Hex
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 ASCII_TO_HEX_LOOKUP_TABLE:
0000b8 ffff                      	.db 0xFF, 0xFF
0000b9 ffff                      	.db 0xFF, 0xFF
0000ba ffff                      	.db 0xFF, 0xFF
0000bb ffff                      	.db 0xFF, 0xFF
0000bc ffff                      	.db 0xFF, 0xFF
0000bd ffff                      	.db 0xFF, 0xFF
0000be ffff                      	.db 0xFF, 0xFF
0000bf ffff                      	.db 0xFF, 0xFF
0000c0 ffff                      	.db 0xFF, 0xFF
0000c1 ffff                      	.db 0xFF, 0xFF
0000c2 ffff                      	.db 0xFF, 0xFF
0000c3 ffff                      	.db 0xFF, 0xFF
0000c4 ffff                      	.db 0xFF, 0xFF
0000c5 ffff                      	.db 0xFF, 0xFF
0000c6 ffff                      	.db 0xFF, 0xFF
0000c7 ffff                      	.db 0xFF, 0xFF
0000c8 ffff                      	.db 0xFF, 0xFF
0000c9 ffff                      	.db 0xFF, 0xFF
0000ca ffff                      	.db 0xFF, 0xFF
0000cb ffff                      	.db 0xFF, 0xFF
0000cc ffff                      	.db 0xFF, 0xFF
0000cd ffff                      	.db 0xFF, 0xFF
0000ce ffff                      	.db 0xFF, 0xFF
0000cf ffff                      	.db 0xFF, 0xFF
0000d0 0100                      	.db 0x00, 0x01
0000d1 0302                      	.db 0x02, 0x03
0000d2 0504                      	.db 0x04, 0x05
0000d3 0706                      	.db 0x06, 0x07
0000d4 0908                      	.db 0x08, 0x09
0000d5 ffff                      	.db 0xFF, 0xFF
0000d6 ffff                      	.db 0xFF, 0xFF
0000d7 ffff                      	.db 0xFF, 0xFF
0000d8 0aff                      	.db 0xFF, 0x0A
0000d9 0c0b                      	.db 0x0B, 0x0C
0000da 0e0d                      	.db 0x0D, 0x0E
0000db ff0f                      	.db 0x0F, 0xFF
0000dc ffff                      	.db 0xFF, 0xFF
0000dd ffff                      	.db 0xFF, 0xFF
0000de ffff                      	.db 0xFF, 0xFF
0000df ffff                      	.db 0xFF, 0xFF
0000e0 ffff                      	.db 0xFF, 0xFF
0000e1 ffff                      	.db 0xFF, 0xFF
0000e2 ffff                      	.db 0xFF, 0xFF
0000e3 ffff                      	.db 0xFF, 0xFF
0000e4 ffff                      	.db 0xFF, 0xFF
0000e5 ffff                      	.db 0xFF, 0xFF
0000e6 ffff                      	.db 0xFF, 0xFF
0000e7 ffff                      	.db 0xFF, 0xFF
0000e8 0aff                      	.db 0xFF, 0x0A
0000e9 0c0b                      	.db 0x0B, 0x0C
0000ea 0e0d                      	.db 0x0D, 0x0E
0000eb ff0f                      	.db 0x0F, 0xFF
0000ec ffff                      	.db 0xFF, 0xFF
0000ed ffff                      	.db 0xFF, 0xFF
0000ee ffff                      	.db 0xFF, 0xFF
0000ef ffff                      	.db 0xFF, 0xFF
0000f0 ffff                      	.db 0xFF, 0xFF
0000f1 ffff                      	.db 0xFF, 0xFF
0000f2 ffff                      	.db 0xFF, 0xFF
0000f3 ffff                      	.db 0xFF, 0xFF
0000f4 ffff                      	.db 0xFF, 0xFF
0000f5 ffff                      	.db 0xFF, 0xFF
0000f6 ffff                      	.db 0xFF, 0xFF
0000f7 ffff                      	.db 0xFF, 0xFF
0000f8 ffff                      	.db 0xFF, 0xFF
0000f9 ffff                      	.db 0xFF, 0xFF
0000fa ffff                      	.db 0xFF, 0xFF
0000fb ffff                      	.db 0xFF, 0xFF
0000fc ffff                      	.db 0xFF, 0xFF
0000fd ffff                      	.db 0xFF, 0xFF
0000fe ffff                      	.db 0xFF, 0xFF
0000ff ffff                      	.db 0xFF, 0xFF
000100 ffff                      	.db 0xFF, 0xFF
000101 ffff                      	.db 0xFF, 0xFF
000102 ffff                      	.db 0xFF, 0xFF
000103 ffff                      	.db 0xFF, 0xFF
000104 ffff                      	.db 0xFF, 0xFF
000105 ffff                      	.db 0xFF, 0xFF
000106 ffff                      	.db 0xFF, 0xFF
000107 ffff                      	.db 0xFF, 0xFF
000108 ffff                      	.db 0xFF, 0xFF
000109 ffff                      	.db 0xFF, 0xFF
00010a ffff                      	.db 0xFF, 0xFF
00010b ffff                      	.db 0xFF, 0xFF
00010c ffff                      	.db 0xFF, 0xFF
00010d ffff                      	.db 0xFF, 0xFF
00010e ffff                      	.db 0xFF, 0xFF
00010f ffff                      	.db 0xFF, 0xFF
000110 ffff                      	.db 0xFF, 0xFF
000111 ffff                      	.db 0xFF, 0xFF
000112 ffff                      	.db 0xFF, 0xFF
000113 ffff                      	.db 0xFF, 0xFF
000114 ffff                      	.db 0xFF, 0xFF
000115 ffff                      	.db 0xFF, 0xFF
000116 ffff                      	.db 0xFF, 0xFF
000117 ffff                      	.db 0xFF, 0xFF
000118 ffff                      	.db 0xFF, 0xFF
000119 ffff                      	.db 0xFF, 0xFF
00011a ffff                      	.db 0xFF, 0xFF
00011b ffff                      	.db 0xFF, 0xFF
00011c ffff                      	.db 0xFF, 0xFF
00011d ffff                      	.db 0xFF, 0xFF
00011e ffff                      	.db 0xFF, 0xFF
00011f ffff                      	.db 0xFF, 0xFF
000120 ffff                      	.db 0xFF, 0xFF
000121 ffff                      	.db 0xFF, 0xFF
000122 ffff                      	.db 0xFF, 0xFF
000123 ffff                      	.db 0xFF, 0xFF
000124 ffff                      	.db 0xFF, 0xFF
000125 ffff                      	.db 0xFF, 0xFF
000126 ffff                      	.db 0xFF, 0xFF
000127 ffff                      	.db 0xFF, 0xFF
000128 ffff                      	.db 0xFF, 0xFF
000129 ffff                      	.db 0xFF, 0xFF
00012a ffff                      	.db 0xFF, 0xFF
00012b ffff                      	.db 0xFF, 0xFF
00012c ffff                      	.db 0xFF, 0xFF
00012d ffff                      	.db 0xFF, 0xFF
00012e ffff                      	.db 0xFF, 0xFF
00012f ffff                      	.db 0xFF, 0xFF
000130 ffff                      	.db 0xFF, 0xFF
000131 ffff                      	.db 0xFF, 0xFF
000132 ffff                      	.db 0xFF, 0xFF
000133 ffff                      	.db 0xFF, 0xFF
000134 ffff                      	.db 0xFF, 0xFF
000135 ffff                      	.db 0xFF, 0xFF
000136 ffff                      	.db 0xFF, 0xFF
                                 .INCLUDE "io.inc"
000137 ffff                      
                                 ;; Include Guard
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 .ifdef INCLUDE_IO
                                 .endif
                                 
                                 .equ INCLUDE_IO = 1
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Transmit Character Over USART
                                 ;;
                                 ;; Inputs:
                                 ;; - Char      <- SP + 3 (First Byte Before Return Address)
                                 ;;
                                 ;; Outputs:
                                 ;; - No Output -> SP + 3 (First Byte Before Return Address)
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 PUTCHAR:
                                 	; Set Register Aliases
                                 	.def CHAR = R16
                                 
                                 	; Number of pushes
                                 	.set STACK_OFFSET = 3
                                 	; Backup Registers
000138 930f                      	push CHAR
000139 93df                      	push YH
00013a 93cf                      	push YL
                                 
                                 	; Load Stack Pointer
                                 	; Y <- SP
00013b b7de                      	in YH, SPH
00013c b7cd                      	in YL, SPL
                                 
                                 	; Load Character
00013d 810e                      	ldd CHAR, Y+(STACK_OFFSET + 3)
                                 
                                 	; Wait until sending is safe
                                 	PUTCHAR_WAIT_SAFE_SEND:	
00013e 9b5d                      		sbis UCSRA, UDRE
00013f cffe                      		rjmp PUTCHAR_WAIT_SAFE_SEND
                                 
000140 b90c                      	out UDR, CHAR
                                 	
                                 	; Restore Registers
000141 91cf                      	pop YL
000142 91df                      	pop YH
000143 910f                      	pop CHAR
                                 
000144 9508                      	ret
                                 
                                 	.undef CHAR
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Print a Null-Terminated Program Memory String Over USART
                                 ;;
                                 ;; Inputs:
                                 ;; - String Address H <- SP + 4
                                 ;; - String Address L <- SP + 3 (First Byte Before Return Address)
                                 ;;
                                 ;; Outputs:
                                 ;; - No Output        -> SP + 4
                                 ;; - No Output        -> SP + 3 (First Byte Before Return Address)
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 PUTSTR:
                                 	.def CHAR = R16
                                 
                                 	; Number of pushes
                                 	.set STACK_OFFSET = 5
                                 	; Backup Registers
000145 930f                      	push CHAR
000146 93df                      	push YH
000147 93cf                      	push YL
000148 93ff                      	push ZH
000149 93ef                      	push ZL
                                 
                                 	; Load Stack Pointer
                                 	; Y <- SP
00014a b7de                      	in YH, SPH
00014b b7cd                      	in YL, SPL
                                 
                                 	; Load String Address
00014c 85f9                      	ldd ZH, Y+(STACK_OFFSET + 4)
00014d 85e8                      	ldd ZL, Y+(STACK_OFFSET + 3)
                                 
                                 	PUTSTR_LOOP:
00014e 9104                      		lpm CHAR, Z
00014f 3000                      		cpi CHAR, 0
000150 f029                      		breq PUTSTR_RET
000151 930f                      		push CHAR
000152 dfe5                      		rcall PUTCHAR
000153 910f                      		pop CHAR
000154 9631                      		adiw ZH:ZL, 1
000155 cff8                      		rjmp PUTSTR_LOOP
                                 
                                 	PUTSTR_RET:
                                 		; Restore Registers
000156 91ef                      		pop ZL
000157 91ff                      		pop ZH
000158 91cf                      		pop YL
000159 91df                      		pop YH
00015a 910f                      		pop CHAR
                                 
00015b 9508                      		ret
                                 
                                 .INCLUDE "read-mem.inc"
                                 
                                 ;; Include Guard
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 .ifdef INCLUDE_READ_MEM
                                 .endif
                                 
                                 .equ INCLUDE_READ_MEM = 1
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Imports
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 .INCLUDE "ascii.inc"
                                 
                                 ;; Include Guard
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 .ifdef INCLUDE_ASCII
                                 .INCLUDE "io.inc"
                                 
                                 ;; Include Guard
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 .ifdef INCLUDE_IO
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Read Memory Region
                                 ;;
                                 ;; Inputs:
                                 ;; - Command Length           <- SP + 5
                                 ;; - Command String Pointer H <- SP + 4
                                 ;; - Command String Pointer L <- SP + 3 (First Byte Before Return Address)
                                 ;;
                                 ;; Outputs:
                                 ;; - No Output                -> SP + 5
                                 ;; - No Output                -> SP + 4
                                 ;; - No Output                -> SP + 3 (First Byte Before Return Address)
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
00015c 5245
00015d 4f52
00015e 3a52
00015f 4920
000160 766e
000161 6c61
000162 6469
000163 4920
000164 706e
000165 7475
000166 4620
000167 726f
000168 6020
000169 6552
00016a 6461
00016b 654d
00016c 606d
00016d 000d                      READ_MEM_ERR_MSG: .db "ERROR: Invalid Input For `ReadMem`", ASCII_NEW_LINE, 0
                                 
                                 
                                 READ_MEM:
                                 	.def TEMP = R16
                                 
                                 	; Number of pushes
                                 	.set STACK_OFFSET = 5
                                 	; Backup Registers
00016e 930f                      	push TEMP
00016f 93df                      	push YH
000170 93cf                      	push YL
000171 93ff                      	push ZH
000172 93ef                      	push ZL
                                 
                                 	; Load Stack Pointer
                                 	; Y <- SP
000173 b7de                      	in YH, SPH
000174 b7cd                      	in YL, SPL
                                 
                                 	; Load Command Length
000175 850a                      	ldd TEMP, Y+(STACK_OFFSET + 5)
                                 
                                 	; r XXXX YYYY
000176 300b                      	cpi TEMP, 11
000177 f5f9                      	brne READ_MEM_ERR
                                 
                                 	; Load Command Address
000178 85f9                      	ldd ZH, Y+(STACK_OFFSET + 4)
000179 85e8                      	ldd ZL, Y+(STACK_OFFSET + 3)
                                 
                                 	; Get string address of first memory address
00017a 9632                      	adiw ZH:ZL, 2
                                 
                                 	; Parse first memory address
00017b e000                      	ldi TEMP, 0
00017c 930f                      	push TEMP
00017d 93ff                      	push ZH
00017e 93ef                      	push ZL
00017f dee2                      	rcall ASCII_QUAD_TO_HEX
000180 91cf                      	pop YL
000181 91df                      	pop YH
000182 910f                      	pop TEMP
                                 	; IF (SUBROUTINE ERR != 0) THEN ERR
000183 3000                      	cpi TEMP, 0
000184 f591                      	brne READ_MEM_ERR
                                 
                                 	; There should be a space between parameters
000185 9634                      	adiw ZH:ZL, 4
000186 8100                      	ld TEMP, Z
000187 3200                      	cpi TEMP, ASCII_SPACE
000188 f571                      	brne READ_MEM_ERR
                                 
                                 	; Get string address of second memory address
000189 9631                      	adiw ZH:ZL, 1
                                 
                                 	; Parse second memory address
00018a e000                      	ldi TEMP, 0
00018b 930f                      	push TEMP
00018c 93ff                      	push ZH
00018d 93ef                      	push ZL
00018e ded3                      	rcall ASCII_QUAD_TO_HEX
00018f 91ef                      	pop ZL
000190 91ff                      	pop ZH
000191 910f                      	pop TEMP
                                 	; IF (SUBROUTINE ERR != 0) THEN ERR
000192 3000                      	cpi TEMP, 0
000193 f519                      	brne READ_MEM_ERR
                                 
                                 	; Ensure First Address <= Second Address
000194 17df                      	cp YH, ZH
000195 f020                      	brlo READ_MEM_PARAMS_LOOP
000196 f501                      	brne READ_MEM_ERR
                                 
                                 	; High byte equal
                                 	; Check low byte
000197 17ce                      	cp YL, ZL
000198 f008                      	brlo READ_MEM_PARAMS_LOOP
000199 f4e9                      	brne READ_MEM_ERR
                                 
                                 	; Params Valid
                                 	READ_MEM_PARAMS_LOOP:
                                 		; Read Memory
00019a 9109                      		ld TEMP, Y+
                                 
                                 		; Print as ASCII
00019b 930f                      		push TEMP
00019c 930f                      		push TEMP
00019d df01                      		rcall HEX_BYTE_TO_ASCII
                                 		; Get Least Significant Char
00019e 910f                      		pop TEMP
00019f df98                      		rcall PUTCHAR
0001a0 930f                      		push TEMP
0001a1 df96                      		rcall PUTCHAR
0001a2 910f                      		pop TEMP
0001a3 910f                      		pop TEMP
0001a4 e200                      		ldi TEMP, ASCII_SPACE
0001a5 930f                      		push TEMP
0001a6 df91                      		rcall PUTCHAR
0001a7 910f                      		pop TEMP
                                 
0001a8 17df                      		cp YH, ZH
0001a9 f380                      		brlo READ_MEM_PARAMS_LOOP
0001aa f419                      		brne READ_MEM_PARAMS_LOOP_EXIT
                                 
0001ab 17ce                      		cp YL, ZL
0001ac f368                      		brlo READ_MEM_PARAMS_LOOP
0001ad f361                      		breq READ_MEM_PARAMS_LOOP
                                 
                                 	READ_MEM_PARAMS_LOOP_EXIT:
0001ae e008                      		ldi TEMP, ASCII_BACKSPACE
0001af 930f                      		push TEMP
0001b0 df87                      		rcall PUTCHAR
0001b1 910f                      		pop TEMP
0001b2 e00d                      		ldi TEMP, ASCII_NEW_LINE
0001b3 930f                      		push TEMP
0001b4 df83                      		rcall PUTCHAR
0001b5 910f                      		pop TEMP
0001b6 c007                      		rjmp READ_MEM_RET
                                 
                                 	READ_MEM_ERR:
0001b7 e002                      		ldi TEMP, HIGH(READ_MEM_ERR_MSG << 1)
0001b8 930f                      		push TEMP
0001b9 eb08                      		ldi TEMP, LOW (READ_MEM_ERR_MSG << 1)
0001ba 930f                      		push TEMP
0001bb df89                      		rcall PUTSTR
0001bc 910f                      		pop TEMP
0001bd 910f                      		pop TEMP
                                 
                                 	READ_MEM_RET:
                                 		; Restore Registers
0001be 91ef                      		pop ZL
0001bf 91ff                      		pop ZH
0001c0 91cf                      		pop YL
0001c1 91df                      		pop YH
0001c2 910f                      		pop TEMP
                                 
0001c3 9508                      		ret
                                 	
                                 .INCLUDE "write-mem.inc"
                                 
                                 ;; Include Guard
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 .ifdef INCLUDE_WRITE_MEM
                                 .endif
                                 
                                 .equ INCLUDE_WRITE_MEM = 1
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Imports
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 .INCLUDE "ascii.inc"
                                 
                                 ;; Include Guard
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 .ifdef INCLUDE_ASCII
                                 .INCLUDE "io.inc"
                                 
                                 ;; Include Guard
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 .ifdef INCLUDE_IO
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Write Memory Address
                                 ;;
                                 ;; Inputs:
                                 ;; - Command Length           <- SP + 5
                                 ;; - Command String Pointer H <- SP + 4
                                 ;; - Command String Pointer L <- SP + 3 (First Byte Before Return Address)
                                 ;;
                                 ;; Outputs:
                                 ;; - No Output                -> SP + 5
                                 ;; - No Output                -> SP + 4
                                 ;; - No Output                -> SP + 3 (First Byte Before Return Address)
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
0001c4 5245
0001c5 4f52
0001c6 3a52
0001c7 4920
0001c8 766e
0001c9 6c61
0001ca 6469
0001cb 4920
0001cc 706e
0001cd 7475
0001ce 4620
0001cf 726f
0001d0 6020
0001d1 7257
0001d2 7469
0001d3 4d65
0001d4 6d65
0001d5 0d60
0001d6 0000                      WRITE_MEM_ERR_MSG: .db "ERROR: Invalid Input For `WriteMem`", ASCII_NEW_LINE, 0, 0
0001d7 654d
0001d8 6f6d
0001d9 7972
0001da 5720
0001db 6972
0001dc 6574
0001dd 4320
0001de 6d6f
0001df 6c70
0001e0 7465
0001e1 0d65
0001e2 0000                      WRITE_MEM_SUC_MSG: .db "Memory Write Complete", ASCII_NEW_LINE, 0, 0
                                 
                                 
                                 WRITE_MEM:
                                 	.def TEMP  = R16
                                 	.def COUNT = R17
                                 	.def LEN   = R18
                                 
                                 	; Number of pushes
                                 	.set STACK_OFFSET = 7
                                 	; Backup Registers
0001e3 930f                      	push TEMP
0001e4 931f                      	push COUNT
0001e5 932f                      	push LEN
0001e6 93df                      	push YH
0001e7 93cf                      	push YL
0001e8 93ff                      	push ZH
0001e9 93ef                      	push ZL
                                 
                                 	; Load Stack Pointer
                                 	; Y <- SP
0001ea b7de                      	in YH, SPH
0001eb b7cd                      	in YL, SPL
                                 
                                 	; Load Command Length
0001ec 852c                      	ldd LEN, Y+(STACK_OFFSET + 5)
                                 
                                 	; w XXXX (YY)+
0001ed 3029                      	cpi LEN, 9
0001ee f0d0                      	brlo WRITE_MEM_ERR
                                 
                                 	; Length should be odd
0001ef ff20                      	sbrs LEN, 0
0001f0 c018                      	rjmp WRITE_MEM_ERR
                                 
                                 	; Load Command Address
0001f1 85fb                      	ldd ZH, Y+(STACK_OFFSET + 4)
0001f2 85ea                      	ldd ZL, Y+(STACK_OFFSET + 3)
                                 
                                 	; Get string address of memory address
0001f3 9632                      	adiw ZH:ZL, 2
                                 
                                 	; Parse memory address
0001f4 e000                      	ldi TEMP, 0
0001f5 930f                      	push TEMP
0001f6 93ff                      	push ZH
0001f7 93ef                      	push ZL
0001f8 de69                      	rcall ASCII_QUAD_TO_HEX
0001f9 91cf                      	pop YL
0001fa 91df                      	pop YH
0001fb 910f                      	pop TEMP
                                 	; IF (SUBROUTINE ERR != 0) THEN ERR
0001fc 3000                      	cpi TEMP, 0
0001fd f459                      	brne WRITE_MEM_ERR
                                 
                                 	; There should be a space between parameters
0001fe 9634                      	adiw ZH:ZL, 4
0001ff 8100                      	ld TEMP, Z
000200 3200                      	cpi TEMP, ASCII_SPACE
000201 f439                      	brne WRITE_MEM_ERR
                                 
                                 	; Get string address of bytes to write
000202 9631                      	adiw ZH:ZL, 1
                                 
000203 93ff                      	push ZH
000204 93ef                      	push ZL
                                 
                                 	; Get max iterations
000205 5027                      	subi LEN, 7
000206 9526                      	lsr LEN
000207 e010                      	ldi COUNT, 0
                                 
000208 c008                      	rjmp WRITE_MEM_VALIDATE_LOOP
                                 
                                 	WRITE_MEM_ERR:
000209 e003                      		ldi TEMP, HIGH(WRITE_MEM_ERR_MSG << 1)
00020a 930f                      		push TEMP
00020b e808                      		ldi TEMP, LOW (WRITE_MEM_ERR_MSG << 1)
00020c 930f                      		push TEMP
00020d df37                      		rcall PUTSTR
00020e 910f                      		pop TEMP
00020f 910f                      		pop TEMP
000210 c027                      		rjmp WRITE_MEM_RET
                                 
                                 	WRITE_MEM_VALIDATE_LOOP:
000211 e000                      		ldi TEMP, 0
000212 930f                      		push TEMP
000213 8100                      		ld TEMP, Z
000214 930f                      		push TEMP
000215 de06                      		rcall ASCII_BYTE_TO_HEX
000216 910f                      		pop TEMP
000217 910f                      		pop TEMP
                                 		; IF (SUBROUTINE ERR != 0) THEN ERR
000218 3000                      		cpi TEMP, 0
000219 f019                      		breq WRITE_MEM_VALIDATE_LOOP_NO_ERROR
                                 		; Error
00021a 910f                      		pop TEMP
00021b 910f                      		pop TEMP
00021c cfec                      		rjmp WRITE_MEM_ERR
                                 
                                 		WRITE_MEM_VALIDATE_LOOP_NO_ERROR:
                                 
00021d 9513                      		inc COUNT
                                 		; Get Next Byte
00021e 9631                      		adiw ZH:ZL, 1
00021f 1712                      		cp COUNT, LEN
000220 f781                      		brne WRITE_MEM_VALIDATE_LOOP
                                 
000221 91ef                      	pop ZL
000222 91ff                      	pop ZH
000223 e010                      	ldi COUNT, 0
                                 	WRITE_MEM_WRITE:
000224 e000                      		ldi TEMP, 0
000225 930f                      		push TEMP
000226 93ff                      		push ZH
000227 93ef                      		push ZL
000228 de0d                      		rcall ASCII_WORD_TO_HEX
000229 910f                      		pop TEMP
00022a 9309                      		st Y+, TEMP
00022b 910f                      		pop TEMP
00022c 910f                      		pop TEMP
00022d 9632                      		adiw ZH:ZL, 2
00022e 9513                      		inc COUNT
00022f 1712                      		cp COUNT, LEN
000230 f799                      		brne WRITE_MEM_WRITE
                                 
000231 e003                      	ldi TEMP, HIGH(WRITE_MEM_SUC_MSG << 1)
000232 930f                      	push TEMP
000233 ea0e                      	ldi TEMP, LOW (WRITE_MEM_SUC_MSG << 1)
000234 930f                      	push TEMP
000235 df0f                      	rcall PUTSTR
000236 910f                      	pop TEMP
000237 910f                      	pop TEMP
                                 
                                 	WRITE_MEM_RET:
                                 		; Restore Registers
000238 91ef                      		pop ZL
000239 91ff                      		pop ZH
00023a 91cf                      		pop YL
00023b 91df                      		pop YH
00023c 912f                      		pop LEN
00023d 911f                      		pop COUNT
00023e 910f                      		pop TEMP
                                 
00023f 9508                      		ret
                                 	
                                 	.undef TEMP
                                 	.undef COUNT
                                 .INCLUDE "read-io.inc"
                                 
                                 ;; Include Guard
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 .ifdef INCLUDE_READ_IO
                                 .endif
                                 
                                 .equ INCLUDE_READ_IO = 1
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Imports
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 .INCLUDE "ascii.inc"
                                 
                                 ;; Include Guard
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 .ifdef INCLUDE_ASCII
                                 .INCLUDE "io.inc"
                                 
                                 ;; Include Guard
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 .ifdef INCLUDE_IO
                                 .INCLUDE "io-name-to-addr.inc"
                                 
                                 ;; Include Guard
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 .ifdef INCLUDE_IO_NAME_TO_ADDR
                                 .endif
                                 
                                 .equ INCLUDE_IO_NAME_TO_ADDR = 1
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Parse String As IO Register And Return Memory Address
                                 ;;
                                 ;; Inputs:
                                 ;; - String Length          <- SP + 5
                                 ;; - ASCII String Pointer H <- SP + 4
                                 ;; - ASCII String Pointer L <- SP + 3 (First Byte Before Return Address)
                                 ;;
                                 ;; Outputs:
                                 ;; - Error Status           -> SP + 5
                                 ;; - Return Value H         -> SP + 4
                                 ;; - Return Value L         -> SP + 3 (First Byte Before Return Address)
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 ASCII_IO_REG_TO_MEM_ADDR:
                                 	.def LEN  = R16
                                 	.def CHAR = R17
                                 	.def CNTR = R18
                                 	.def TEMP = R19
                                 
                                 	; Number of pushes
                                 	.set STACK_OFFSET = 8
                                 	; Backup Registers
000240 930f                      	push LEN
000241 931f                      	push CHAR
000242 932f                      	push CNTR
000243 933f                      	push TEMP
000244 93df                      	push YH
000245 93cf                      	push YL
000246 93ff                      	push ZH
000247 93ef                      	push ZL
                                 
                                 	; Load Stack Pointer
                                 	; Z <- SP
000248 b7fe                      	in ZH, SPH
000249 b7ed                      	in ZL, SPL
                                 
                                 	; Load String Length
00024a 8505                      	ldd LEN, Z+(STACK_OFFSET + 5)
                                 
                                 	; Load String Pointer
00024b 85d4                      	ldd YH, Z+(STACK_OFFSET + 4)
00024c 85c3                      	ldd YL, Z+(STACK_OFFSET + 3)
                                 
                                 	; Load Tree Pointer (Program Memory)
00024d e0f4                      	ldi ZH, HIGH(IO_LOOKUP_TREE << 1)
00024e efe0                      	ldi ZL, LOW (IO_LOOKUP_TREE << 1)
                                 
00024f e020                      	ldi CNTR, 0
                                 
                                 	ASCII_IO_REG_TO_MEM_ADDR_LOOP:
000250 8118                      		ld CHAR, Y
                                 		; Skip Done Leaf
000251 9632                      		adiw ZH:ZL, 2
                                 		ASCII_IO_REG_TO_MEM_ADDR_INNER_LOOP:
                                 			; Get Character In Tree
000252 9134                      			lpm TEMP, Z
000253 3030                      			cpi TEMP, 0
                                 			; Invlaid String
000254 f0c1                      			breq ASCII_IO_REG_TO_MEM_ADDR_ERR
000255 1731                      			cp TEMP, CHAR
000256 f011                      			breq ASCII_IO_REG_TO_MEM_ADDR_INNER_LOOP_MATCH
                                 			; No Match
000257 9634                      			adiw ZH:ZL, 4
000258 cff9                      			rjmp ASCII_IO_REG_TO_MEM_ADDR_INNER_LOOP
                                 			ASCII_IO_REG_TO_MEM_ADDR_INNER_LOOP_MATCH:
000259 9632                      				adiw ZH:ZL, 2
                                 				; High Byte
00025a 9134                      				lpm TEMP, Z
00025b 9631                      				adiw ZH:ZL, 1
                                 				; Low Byte
00025c 9114                      				lpm CHAR, Z
00025d 2ff3                      				mov ZH, TEMP
00025e 2fe1                      				mov ZL, CHAR
00025f 9621                      				adiw YH:YL, 1
000260 9523                      				inc CNTR
000261 1720                      				cp CNTR, LEN
000262 f368                      				brlo ASCII_IO_REG_TO_MEM_ADDR_LOOP
                                 
                                 	; Load Stack Pointer
                                 	; Y <- SP
000263 b7de                      	in YH, SPH
000264 b7cd                      	in YL, SPL
                                 
                                 	; We have a valid string
                                 	; Get memory address
                                 	; High Byte
000265 9134                      	lpm TEMP, Z
000266 873c                      	std Y+(STACK_OFFSET + 4), TEMP
000267 9631                      	adiw ZH:ZL, 1
                                 	; Low Byte
000268 9134                      	lpm TEMP, Z
000269 873b                      	std Y+(STACK_OFFSET + 3), TEMP
                                 	; No Error
00026a e030                      	ldi TEMP, 0
00026b 873d                      	std Y+(STACK_OFFSET + 5), TEMP
                                 	
00026c c002                      	rjmp ASCII_IO_REG_TO_MEM_ADDR_RET
                                 
                                 	ASCII_IO_REG_TO_MEM_ADDR_ERR:
                                 		; Error Status <- True
00026d e031                      		ldi TEMP, 1
00026e 873d                      		std Y+(STACK_OFFSET + 5), TEMP
                                 
                                 	ASCII_IO_REG_TO_MEM_ADDR_RET:
                                 		; Restore Registers
00026f 91ef                      		pop ZL
000270 91ff                      		pop ZH
000271 91cf                      		pop YL
000272 91df                      		pop YH
000273 913f                      		pop TEMP
000274 912f                      		pop CNTR
000275 911f                      		pop CHAR
000276 910f                      		pop LEN
                                 
000277 9508                      		ret
                                 
                                 	.undef LEN
                                 	.undef CHAR
                                 	.undef CNTR
                                 	.undef TEMP
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Lookup Tree To Convert ASCII To IO Register Memory Address
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 IO_LOOKUP_TREE:
000278 0000                      	.db HIGH(0x00), LOW(0x00)
000279 0041
00027a 2405                      	.db "A", 0, HIGH(IO_LOOKUP_TREE_A << 1), LOW(IO_LOOKUP_TREE_A << 1)
00027b 0044
00027c a805                      	.db "D", 0, HIGH(IO_LOOKUP_TREE_D << 1), LOW(IO_LOOKUP_TREE_D << 1)
00027d 0045
00027e dc05                      	.db "E", 0, HIGH(IO_LOOKUP_TREE_E << 1), LOW(IO_LOOKUP_TREE_E << 1)
00027f 0047
000280 2806                      	.db "G", 0, HIGH(IO_LOOKUP_TREE_G << 1), LOW(IO_LOOKUP_TREE_G << 1)
000281 0049
000282 5406                      	.db "I", 0, HIGH(IO_LOOKUP_TREE_I << 1), LOW(IO_LOOKUP_TREE_I << 1)
000283 004d
000284 8006                      	.db "M", 0, HIGH(IO_LOOKUP_TREE_M << 1), LOW(IO_LOOKUP_TREE_M << 1)
000285 004f
000286 b406                      	.db "O", 0, HIGH(IO_LOOKUP_TREE_O << 1), LOW(IO_LOOKUP_TREE_O << 1)
000287 0050
000288 4807                      	.db "P", 0, HIGH(IO_LOOKUP_TREE_P << 1), LOW(IO_LOOKUP_TREE_P << 1)
000289 0053
00028a b407                      	.db "S", 0, HIGH(IO_LOOKUP_TREE_S << 1), LOW(IO_LOOKUP_TREE_S << 1)
00028b 0054
00028c 5008                      	.db "T", 0, HIGH(IO_LOOKUP_TREE_T << 1), LOW(IO_LOOKUP_TREE_T << 1)
00028d 0055
00028e 5409                      	.db "U", 0, HIGH(IO_LOOKUP_TREE_U << 1), LOW(IO_LOOKUP_TREE_U << 1)
00028f 0057
000290 d809                      	.db "W", 0, HIGH(IO_LOOKUP_TREE_W << 1), LOW(IO_LOOKUP_TREE_W << 1)
000291 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_A:
000292 0000                      	.db HIGH(0x00), LOW(0x00)
000293 0043
000294 3405                      	.db "C", 0, HIGH(IO_LOOKUP_TREE_AC << 1), LOW(IO_LOOKUP_TREE_AC << 1)
000295 0044
000296 4805                      	.db "D", 0, HIGH(IO_LOOKUP_TREE_AD << 1), LOW(IO_LOOKUP_TREE_AD << 1)
000297 0053
000298 9405                      	.db "S", 0, HIGH(IO_LOOKUP_TREE_AS << 1), LOW(IO_LOOKUP_TREE_AS << 1)
000299 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_AC:
00029a 0000                      	.db HIGH(0x00), LOW(0x00)
00029b 0053
00029c 3c05                      	.db "S", 0, HIGH(IO_LOOKUP_TREE_ACS << 1), LOW(IO_LOOKUP_TREE_ACS << 1)
00029d 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_ACS:
00029e 0000                      	.db HIGH(0x00), LOW(0x00)
00029f 0052
0002a0 4405                      	.db "R", 0, HIGH(IO_LOOKUP_TREE_ACSR << 1), LOW(IO_LOOKUP_TREE_ACSR << 1)
0002a1 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_ACSR:
0002a2 2800                      	.db HIGH(0x28), LOW(0x28)
0002a3 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_AD:
0002a4 0000                      	.db HIGH(0x00), LOW(0x00)
0002a5 0043
0002a6 5405                      	.db "C", 0, HIGH(IO_LOOKUP_TREE_ADC << 1), LOW(IO_LOOKUP_TREE_ADC << 1)
0002a7 004d
0002a8 8005                      	.db "M", 0, HIGH(IO_LOOKUP_TREE_ADM << 1), LOW(IO_LOOKUP_TREE_ADM << 1)
0002a9 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_ADC:
0002aa 0000                      	.db HIGH(0x00), LOW(0x00)
0002ab 0048
0002ac 6405                      	.db "H", 0, HIGH(IO_LOOKUP_TREE_ADCH << 1), LOW(IO_LOOKUP_TREE_ADCH << 1)
0002ad 004c
0002ae 6805                      	.db "L", 0, HIGH(IO_LOOKUP_TREE_ADCL << 1), LOW(IO_LOOKUP_TREE_ADCL << 1)
0002af 0053
0002b0 6c05                      	.db "S", 0, HIGH(IO_LOOKUP_TREE_ADCS << 1), LOW(IO_LOOKUP_TREE_ADCS << 1)
0002b1 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_ADCH:
0002b2 2500                      	.db HIGH(0x25), LOW(0x25)
0002b3 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_ADCL:
0002b4 2400                      	.db HIGH(0x24), LOW(0x24)
0002b5 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_ADCS:
0002b6 0000                      	.db HIGH(0x00), LOW(0x00)
0002b7 0052
0002b8 7405                      	.db "R", 0, HIGH(IO_LOOKUP_TREE_ADCSR << 1), LOW(IO_LOOKUP_TREE_ADCSR << 1)
0002b9 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_ADCSR:
0002ba 0000                      	.db HIGH(0x00), LOW(0x00)
0002bb 0041
0002bc 7c05                      	.db "A", 0, HIGH(IO_LOOKUP_TREE_ADCSRA << 1), LOW(IO_LOOKUP_TREE_ADCSRA << 1)
0002bd 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_ADCSRA:
0002be 2600                      	.db HIGH(0x26), LOW(0x26)
0002bf 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_ADM:
0002c0 0000                      	.db HIGH(0x00), LOW(0x00)
0002c1 0055
0002c2 8805                      	.db "U", 0, HIGH(IO_LOOKUP_TREE_ADMU << 1), LOW(IO_LOOKUP_TREE_ADMU << 1)
0002c3 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_ADMU:
0002c4 0000                      	.db HIGH(0x00), LOW(0x00)
0002c5 0058
0002c6 9005                      	.db "X", 0, HIGH(IO_LOOKUP_TREE_ADMUX << 1), LOW(IO_LOOKUP_TREE_ADMUX << 1)
0002c7 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_ADMUX:
0002c8 2700                      	.db HIGH(0x27), LOW(0x27)
0002c9 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_AS:
0002ca 0000                      	.db HIGH(0x00), LOW(0x00)
0002cb 0053
0002cc 9c05                      	.db "S", 0, HIGH(IO_LOOKUP_TREE_ASS << 1), LOW(IO_LOOKUP_TREE_ASS << 1)
0002cd 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_ASS:
0002ce 0000                      	.db HIGH(0x00), LOW(0x00)
0002cf 0052
0002d0 a405                      	.db "R", 0, HIGH(IO_LOOKUP_TREE_ASSR << 1), LOW(IO_LOOKUP_TREE_ASSR << 1)
0002d1 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_ASSR:
0002d2 4200                      	.db HIGH(0x42), LOW(0x42)
0002d3 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_D:
0002d4 0000                      	.db HIGH(0x00), LOW(0x00)
0002d5 0044
0002d6 b005                      	.db "D", 0, HIGH(IO_LOOKUP_TREE_DD << 1), LOW(IO_LOOKUP_TREE_DD << 1)
0002d7 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_DD:
0002d8 0000                      	.db HIGH(0x00), LOW(0x00)
0002d9 0052
0002da b805                      	.db "R", 0, HIGH(IO_LOOKUP_TREE_DDR << 1), LOW(IO_LOOKUP_TREE_DDR << 1)
0002db 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_DDR:
0002dc 0000                      	.db HIGH(0x00), LOW(0x00)
0002dd 0041
0002de cc05                      	.db "A", 0, HIGH(IO_LOOKUP_TREE_DDRA << 1), LOW(IO_LOOKUP_TREE_DDRA << 1)
0002df 0042
0002e0 d005                      	.db "B", 0, HIGH(IO_LOOKUP_TREE_DDRB << 1), LOW(IO_LOOKUP_TREE_DDRB << 1)
0002e1 0043
0002e2 d405                      	.db "C", 0, HIGH(IO_LOOKUP_TREE_DDRC << 1), LOW(IO_LOOKUP_TREE_DDRC << 1)
0002e3 0044
0002e4 d805                      	.db "D", 0, HIGH(IO_LOOKUP_TREE_DDRD << 1), LOW(IO_LOOKUP_TREE_DDRD << 1)
0002e5 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_DDRA:
0002e6 3a00                      	.db HIGH(0x3A), LOW(0x3A)
0002e7 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_DDRB:
0002e8 3700                      	.db HIGH(0x37), LOW(0x37)
0002e9 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_DDRC:
0002ea 3400                      	.db HIGH(0x34), LOW(0x34)
0002eb 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_DDRD:
0002ec 3100                      	.db HIGH(0x31), LOW(0x31)
0002ed 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_E:
0002ee 0000                      	.db HIGH(0x00), LOW(0x00)
0002ef 0045
0002f0 e405                      	.db "E", 0, HIGH(IO_LOOKUP_TREE_EE << 1), LOW(IO_LOOKUP_TREE_EE << 1)
0002f1 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_EE:
0002f2 0000                      	.db HIGH(0x00), LOW(0x00)
0002f3 0041
0002f4 f405                      	.db "A", 0, HIGH(IO_LOOKUP_TREE_EEA << 1), LOW(IO_LOOKUP_TREE_EEA << 1)
0002f5 0043
0002f6 1006                      	.db "C", 0, HIGH(IO_LOOKUP_TREE_EEC << 1), LOW(IO_LOOKUP_TREE_EEC << 1)
0002f7 0044
0002f8 1c06                      	.db "D", 0, HIGH(IO_LOOKUP_TREE_EED << 1), LOW(IO_LOOKUP_TREE_EED << 1)
0002f9 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_EEA:
0002fa 0000                      	.db HIGH(0x00), LOW(0x00)
0002fb 0052
0002fc fc05                      	.db "R", 0, HIGH(IO_LOOKUP_TREE_EEAR << 1), LOW(IO_LOOKUP_TREE_EEAR << 1)
0002fd 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_EEAR:
0002fe 0000                      	.db HIGH(0x00), LOW(0x00)
0002ff 0048
000300 0806                      	.db "H", 0, HIGH(IO_LOOKUP_TREE_EEARH << 1), LOW(IO_LOOKUP_TREE_EEARH << 1)
000301 004c
000302 0c06                      	.db "L", 0, HIGH(IO_LOOKUP_TREE_EEARL << 1), LOW(IO_LOOKUP_TREE_EEARL << 1)
000303 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_EEARH:
000304 3f00                      	.db HIGH(0x3F), LOW(0x3F)
000305 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_EEARL:
000306 3e00                      	.db HIGH(0x3E), LOW(0x3E)
000307 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_EEC:
000308 0000                      	.db HIGH(0x00), LOW(0x00)
000309 0052
00030a 1806                      	.db "R", 0, HIGH(IO_LOOKUP_TREE_EECR << 1), LOW(IO_LOOKUP_TREE_EECR << 1)
00030b 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_EECR:
00030c 3c00                      	.db HIGH(0x3C), LOW(0x3C)
00030d 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_EED:
00030e 0000                      	.db HIGH(0x00), LOW(0x00)
00030f 0052
000310 2406                      	.db "R", 0, HIGH(IO_LOOKUP_TREE_EEDR << 1), LOW(IO_LOOKUP_TREE_EEDR << 1)
000311 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_EEDR:
000312 3d00                      	.db HIGH(0x3D), LOW(0x3D)
000313 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_G:
000314 0000                      	.db HIGH(0x00), LOW(0x00)
000315 0049
000316 3006                      	.db "I", 0, HIGH(IO_LOOKUP_TREE_GI << 1), LOW(IO_LOOKUP_TREE_GI << 1)
000317 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_GI:
000318 0000                      	.db HIGH(0x00), LOW(0x00)
000319 0043
00031a 3c06                      	.db "C", 0, HIGH(IO_LOOKUP_TREE_GIC << 1), LOW(IO_LOOKUP_TREE_GIC << 1)
00031b 0046
00031c 4806                      	.db "F", 0, HIGH(IO_LOOKUP_TREE_GIF << 1), LOW(IO_LOOKUP_TREE_GIF << 1)
00031d 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_GIC:
00031e 0000                      	.db HIGH(0x00), LOW(0x00)
00031f 0052
000320 4406                      	.db "R", 0, HIGH(IO_LOOKUP_TREE_GICR << 1), LOW(IO_LOOKUP_TREE_GICR << 1)
000321 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_GICR:
000322 5b00                      	.db HIGH(0x5B), LOW(0x5B)
000323 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_GIF:
000324 0000                      	.db HIGH(0x00), LOW(0x00)
000325 0052
000326 5006                      	.db "R", 0, HIGH(IO_LOOKUP_TREE_GIFR << 1), LOW(IO_LOOKUP_TREE_GIFR << 1)
000327 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_GIFR:
000328 5a00                      	.db HIGH(0x5A), LOW(0x5A)
000329 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_I:
00032a 0000                      	.db HIGH(0x00), LOW(0x00)
00032b 0043
00032c 5c06                      	.db "C", 0, HIGH(IO_LOOKUP_TREE_IC << 1), LOW(IO_LOOKUP_TREE_IC << 1)
00032d 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_IC:
00032e 0000                      	.db HIGH(0x00), LOW(0x00)
00032f 0052
000330 6406                      	.db "R", 0, HIGH(IO_LOOKUP_TREE_ICR << 1), LOW(IO_LOOKUP_TREE_ICR << 1)
000331 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_ICR:
000332 0000                      	.db HIGH(0x00), LOW(0x00)
000333 0031
000334 6c06                      	.db "1", 0, HIGH(IO_LOOKUP_TREE_ICR1 << 1), LOW(IO_LOOKUP_TREE_ICR1 << 1)
000335 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_ICR1:
000336 0000                      	.db HIGH(0x00), LOW(0x00)
000337 0048
000338 7806                      	.db "H", 0, HIGH(IO_LOOKUP_TREE_ICR1H << 1), LOW(IO_LOOKUP_TREE_ICR1H << 1)
000339 004c
00033a 7c06                      	.db "L", 0, HIGH(IO_LOOKUP_TREE_ICR1L << 1), LOW(IO_LOOKUP_TREE_ICR1L << 1)
00033b 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_ICR1H:
00033c 4700                      	.db HIGH(0x47), LOW(0x47)
00033d 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_ICR1L:
00033e 4600                      	.db HIGH(0x46), LOW(0x46)
00033f 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_M:
000340 0000                      	.db HIGH(0x00), LOW(0x00)
000341 0043
000342 8806                      	.db "C", 0, HIGH(IO_LOOKUP_TREE_MC << 1), LOW(IO_LOOKUP_TREE_MC << 1)
000343 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_MC:
000344 0000                      	.db HIGH(0x00), LOW(0x00)
000345 0055
000346 9006                      	.db "U", 0, HIGH(IO_LOOKUP_TREE_MCU << 1), LOW(IO_LOOKUP_TREE_MCU << 1)
000347 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_MCU:
000348 0000                      	.db HIGH(0x00), LOW(0x00)
000349 0043
00034a 9806                      	.db "C", 0, HIGH(IO_LOOKUP_TREE_MCUC << 1), LOW(IO_LOOKUP_TREE_MCUC << 1)
00034b 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_MCUC:
00034c 0000                      	.db HIGH(0x00), LOW(0x00)
00034d 0052
00034e a406                      	.db "R", 0, HIGH(IO_LOOKUP_TREE_MCUCR << 1), LOW(IO_LOOKUP_TREE_MCUCR << 1)
00034f 0053
000350 a806                      	.db "S", 0, HIGH(IO_LOOKUP_TREE_MCUCS << 1), LOW(IO_LOOKUP_TREE_MCUCS << 1)
000351 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_MCUCR:
000352 5500                      	.db HIGH(0x55), LOW(0x55)
000353 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_MCUCS:
000354 0000                      	.db HIGH(0x00), LOW(0x00)
000355 0052
000356 b006                      	.db "R", 0, HIGH(IO_LOOKUP_TREE_MCUCSR << 1), LOW(IO_LOOKUP_TREE_MCUCSR << 1)
000357 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_MCUCSR:
000358 5400                      	.db HIGH(0x54), LOW(0x54)
000359 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_O:
00035a 0000                      	.db HIGH(0x00), LOW(0x00)
00035b 0043
00035c c006                      	.db "C", 0, HIGH(IO_LOOKUP_TREE_OC << 1), LOW(IO_LOOKUP_TREE_OC << 1)
00035d 0053
00035e 2407                      	.db "S", 0, HIGH(IO_LOOKUP_TREE_OS << 1), LOW(IO_LOOKUP_TREE_OS << 1)
00035f 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_OC:
000360 0000                      	.db HIGH(0x00), LOW(0x00)
000361 0044
000362 cc06                      	.db "D", 0, HIGH(IO_LOOKUP_TREE_OCD << 1), LOW(IO_LOOKUP_TREE_OCD << 1)
000363 0052
000364 d806                      	.db "R", 0, HIGH(IO_LOOKUP_TREE_OCR << 1), LOW(IO_LOOKUP_TREE_OCR << 1)
000365 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_OCD:
000366 0000                      	.db HIGH(0x00), LOW(0x00)
000367 0052
000368 d406                      	.db "R", 0, HIGH(IO_LOOKUP_TREE_OCDR << 1), LOW(IO_LOOKUP_TREE_OCDR << 1)
000369 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_OCDR:
00036a 5100                      	.db HIGH(0x51), LOW(0x51)
00036b 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_OCR:
00036c 0000                      	.db HIGH(0x00), LOW(0x00)
00036d 0030
00036e e806                      	.db "0", 0, HIGH(IO_LOOKUP_TREE_OCR0 << 1), LOW(IO_LOOKUP_TREE_OCR0 << 1)
00036f 0031
000370 ec06                      	.db "1", 0, HIGH(IO_LOOKUP_TREE_OCR1 << 1), LOW(IO_LOOKUP_TREE_OCR1 << 1)
000371 0032
000372 2007                      	.db "2", 0, HIGH(IO_LOOKUP_TREE_OCR2 << 1), LOW(IO_LOOKUP_TREE_OCR2 << 1)
000373 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_OCR0:
000374 5c00                      	.db HIGH(0x5C), LOW(0x5C)
000375 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_OCR1:
000376 0000                      	.db HIGH(0x00), LOW(0x00)
000377 0041
000378 f806                      	.db "A", 0, HIGH(IO_LOOKUP_TREE_OCR1A << 1), LOW(IO_LOOKUP_TREE_OCR1A << 1)
000379 0042
00037a 0c07                      	.db "B", 0, HIGH(IO_LOOKUP_TREE_OCR1B << 1), LOW(IO_LOOKUP_TREE_OCR1B << 1)
00037b 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_OCR1A:
00037c 0000                      	.db HIGH(0x00), LOW(0x00)
00037d 0048
00037e 0407                      	.db "H", 0, HIGH(IO_LOOKUP_TREE_OCR1AH << 1), LOW(IO_LOOKUP_TREE_OCR1AH << 1)
00037f 004c
000380 0807                      	.db "L", 0, HIGH(IO_LOOKUP_TREE_OCR1AL << 1), LOW(IO_LOOKUP_TREE_OCR1AL << 1)
000381 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_OCR1AH:
000382 4b00                      	.db HIGH(0x4B), LOW(0x4B)
000383 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_OCR1AL:
000384 4a00                      	.db HIGH(0x4A), LOW(0x4A)
000385 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_OCR1B:
000386 0000                      	.db HIGH(0x00), LOW(0x00)
000387 0048
000388 1807                      	.db "H", 0, HIGH(IO_LOOKUP_TREE_OCR1BH << 1), LOW(IO_LOOKUP_TREE_OCR1BH << 1)
000389 004c
00038a 1c07                      	.db "L", 0, HIGH(IO_LOOKUP_TREE_OCR1BL << 1), LOW(IO_LOOKUP_TREE_OCR1BL << 1)
00038b 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_OCR1BH:
00038c 4900                      	.db HIGH(0x49), LOW(0x49)
00038d 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_OCR1BL:
00038e 4800                      	.db HIGH(0x48), LOW(0x48)
00038f 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_OCR2:
000390 4300                      	.db HIGH(0x43), LOW(0x43)
000391 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_OS:
000392 0000                      	.db HIGH(0x00), LOW(0x00)
000393 0043
000394 2c07                      	.db "C", 0, HIGH(IO_LOOKUP_TREE_OSC << 1), LOW(IO_LOOKUP_TREE_OSC << 1)
000395 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_OSC:
000396 0000                      	.db HIGH(0x00), LOW(0x00)
000397 0043
000398 3407                      	.db "C", 0, HIGH(IO_LOOKUP_TREE_OSCC << 1), LOW(IO_LOOKUP_TREE_OSCC << 1)
000399 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_OSCC:
00039a 0000                      	.db HIGH(0x00), LOW(0x00)
00039b 0041
00039c 3c07                      	.db "A", 0, HIGH(IO_LOOKUP_TREE_OSCCA << 1), LOW(IO_LOOKUP_TREE_OSCCA << 1)
00039d 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_OSCCA:
00039e 0000                      	.db HIGH(0x00), LOW(0x00)
00039f 004c
0003a0 4407                      	.db "L", 0, HIGH(IO_LOOKUP_TREE_OSCCAL << 1), LOW(IO_LOOKUP_TREE_OSCCAL << 1)
0003a1 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_OSCCAL:
0003a2 5100                      	.db HIGH(0x51), LOW(0x51)
0003a3 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_P:
0003a4 0000                      	.db HIGH(0x00), LOW(0x00)
0003a5 0049
0003a6 5407                      	.db "I", 0, HIGH(IO_LOOKUP_TREE_PI << 1), LOW(IO_LOOKUP_TREE_PI << 1)
0003a7 004f
0003a8 8007                      	.db "O", 0, HIGH(IO_LOOKUP_TREE_PO << 1), LOW(IO_LOOKUP_TREE_PO << 1)
0003a9 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_PI:
0003aa 0000                      	.db HIGH(0x00), LOW(0x00)
0003ab 004e
0003ac 5c07                      	.db "N", 0, HIGH(IO_LOOKUP_TREE_PIN << 1), LOW(IO_LOOKUP_TREE_PIN << 1)
0003ad 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_PIN:
0003ae 0000                      	.db HIGH(0x00), LOW(0x00)
0003af 0041
0003b0 7007                      	.db "A", 0, HIGH(IO_LOOKUP_TREE_PINA << 1), LOW(IO_LOOKUP_TREE_PINA << 1)
0003b1 0042
0003b2 7407                      	.db "B", 0, HIGH(IO_LOOKUP_TREE_PINB << 1), LOW(IO_LOOKUP_TREE_PINB << 1)
0003b3 0043
0003b4 7807                      	.db "C", 0, HIGH(IO_LOOKUP_TREE_PINC << 1), LOW(IO_LOOKUP_TREE_PINC << 1)
0003b5 0044
0003b6 7c07                      	.db "D", 0, HIGH(IO_LOOKUP_TREE_PIND << 1), LOW(IO_LOOKUP_TREE_PIND << 1)
0003b7 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_PINA:
0003b8 3900                      	.db HIGH(0x39), LOW(0x39)
0003b9 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_PINB:
0003ba 3600                      	.db HIGH(0x36), LOW(0x36)
0003bb 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_PINC:
0003bc 3300                      	.db HIGH(0x33), LOW(0x33)
0003bd 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_PIND:
0003be 3000                      	.db HIGH(0x30), LOW(0x30)
0003bf 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_PO:
0003c0 0000                      	.db HIGH(0x00), LOW(0x00)
0003c1 0052
0003c2 8807                      	.db "R", 0, HIGH(IO_LOOKUP_TREE_POR << 1), LOW(IO_LOOKUP_TREE_POR << 1)
0003c3 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_POR:
0003c4 0000                      	.db HIGH(0x00), LOW(0x00)
0003c5 0054
0003c6 9007                      	.db "T", 0, HIGH(IO_LOOKUP_TREE_PORT << 1), LOW(IO_LOOKUP_TREE_PORT << 1)
0003c7 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_PORT:
0003c8 0000                      	.db HIGH(0x00), LOW(0x00)
0003c9 0041
0003ca a407                      	.db "A", 0, HIGH(IO_LOOKUP_TREE_PORTA << 1), LOW(IO_LOOKUP_TREE_PORTA << 1)
0003cb 0042
0003cc a807                      	.db "B", 0, HIGH(IO_LOOKUP_TREE_PORTB << 1), LOW(IO_LOOKUP_TREE_PORTB << 1)
0003cd 0043
0003ce ac07                      	.db "C", 0, HIGH(IO_LOOKUP_TREE_PORTC << 1), LOW(IO_LOOKUP_TREE_PORTC << 1)
0003cf 0044
0003d0 b007                      	.db "D", 0, HIGH(IO_LOOKUP_TREE_PORTD << 1), LOW(IO_LOOKUP_TREE_PORTD << 1)
0003d1 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_PORTA:
0003d2 3b00                      	.db HIGH(0x3B), LOW(0x3B)
0003d3 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_PORTB:
0003d4 3800                      	.db HIGH(0x38), LOW(0x38)
0003d5 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_PORTC:
0003d6 3500                      	.db HIGH(0x35), LOW(0x35)
0003d7 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_PORTD:
0003d8 3200                      	.db HIGH(0x32), LOW(0x32)
0003d9 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_S:
0003da 0000                      	.db HIGH(0x00), LOW(0x00)
0003db 0046
0003dc c407                      	.db "F", 0, HIGH(IO_LOOKUP_TREE_SF << 1), LOW(IO_LOOKUP_TREE_SF << 1)
0003dd 0050
0003de e007                      	.db "P", 0, HIGH(IO_LOOKUP_TREE_SP << 1), LOW(IO_LOOKUP_TREE_SP << 1)
0003df 0052
0003e0 3c08                      	.db "R", 0, HIGH(IO_LOOKUP_TREE_SR << 1), LOW(IO_LOOKUP_TREE_SR << 1)
0003e1 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_SF:
0003e2 0000                      	.db HIGH(0x00), LOW(0x00)
0003e3 0049
0003e4 cc07                      	.db "I", 0, HIGH(IO_LOOKUP_TREE_SFI << 1), LOW(IO_LOOKUP_TREE_SFI << 1)
0003e5 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_SFI:
0003e6 0000                      	.db HIGH(0x00), LOW(0x00)
0003e7 004f
0003e8 d407                      	.db "O", 0, HIGH(IO_LOOKUP_TREE_SFIO << 1), LOW(IO_LOOKUP_TREE_SFIO << 1)
0003e9 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_SFIO:
0003ea 0000                      	.db HIGH(0x00), LOW(0x00)
0003eb 0052
0003ec dc07                      	.db "R", 0, HIGH(IO_LOOKUP_TREE_SFIOR << 1), LOW(IO_LOOKUP_TREE_SFIOR << 1)
0003ed 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_SFIOR:
0003ee 5000                      	.db HIGH(0x50), LOW(0x50)
0003ef 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_SP:
0003f0 0000                      	.db HIGH(0x00), LOW(0x00)
0003f1 0043
0003f2 fc07                      	.db "C", 0, HIGH(IO_LOOKUP_TREE_SPC << 1), LOW(IO_LOOKUP_TREE_SPC << 1)
0003f3 0044
0003f4 0808                      	.db "D", 0, HIGH(IO_LOOKUP_TREE_SPD << 1), LOW(IO_LOOKUP_TREE_SPD << 1)
0003f5 0048
0003f6 1408                      	.db "H", 0, HIGH(IO_LOOKUP_TREE_SPH << 1), LOW(IO_LOOKUP_TREE_SPH << 1)
0003f7 004c
0003f8 1808                      	.db "L", 0, HIGH(IO_LOOKUP_TREE_SPL << 1), LOW(IO_LOOKUP_TREE_SPL << 1)
0003f9 004d
0003fa 1c08                      	.db "M", 0, HIGH(IO_LOOKUP_TREE_SPM << 1), LOW(IO_LOOKUP_TREE_SPM << 1)
0003fb 0053
0003fc 3008                      	.db "S", 0, HIGH(IO_LOOKUP_TREE_SPS << 1), LOW(IO_LOOKUP_TREE_SPS << 1)
0003fd 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_SPC:
0003fe 0000                      	.db HIGH(0x00), LOW(0x00)
0003ff 0052
000400 0408                      	.db "R", 0, HIGH(IO_LOOKUP_TREE_SPCR << 1), LOW(IO_LOOKUP_TREE_SPCR << 1)
000401 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_SPCR:
000402 2d00                      	.db HIGH(0x2D), LOW(0x2D)
000403 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_SPD:
000404 0000                      	.db HIGH(0x00), LOW(0x00)
000405 0052
000406 1008                      	.db "R", 0, HIGH(IO_LOOKUP_TREE_SPDR << 1), LOW(IO_LOOKUP_TREE_SPDR << 1)
000407 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_SPDR:
000408 2f00                      	.db HIGH(0x2F), LOW(0x2F)
000409 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_SPH:
00040a 5e00                      	.db HIGH(0x5E), LOW(0x5E)
00040b 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_SPL:
00040c 5d00                      	.db HIGH(0x5D), LOW(0x5D)
00040d 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_SPM:
00040e 0000                      	.db HIGH(0x00), LOW(0x00)
00040f 0043
000410 2408                      	.db "C", 0, HIGH(IO_LOOKUP_TREE_SPMC << 1), LOW(IO_LOOKUP_TREE_SPMC << 1)
000411 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_SPMC:
000412 0000                      	.db HIGH(0x00), LOW(0x00)
000413 0052
000414 2c08                      	.db "R", 0, HIGH(IO_LOOKUP_TREE_SPMCR << 1), LOW(IO_LOOKUP_TREE_SPMCR << 1)
000415 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_SPMCR:
000416 5700                      	.db HIGH(0x57), LOW(0x57)
000417 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_SPS:
000418 0000                      	.db HIGH(0x00), LOW(0x00)
000419 0052
00041a 3808                      	.db "R", 0, HIGH(IO_LOOKUP_TREE_SPSR << 1), LOW(IO_LOOKUP_TREE_SPSR << 1)
00041b 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_SPSR:
00041c 2e00                      	.db HIGH(0x2E), LOW(0x2E)
00041d 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_SR:
00041e 0000                      	.db HIGH(0x00), LOW(0x00)
00041f 0045
000420 4408                      	.db "E", 0, HIGH(IO_LOOKUP_TREE_SRE << 1), LOW(IO_LOOKUP_TREE_SRE << 1)
000421 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_SRE:
000422 0000                      	.db HIGH(0x00), LOW(0x00)
000423 0047
000424 4c08                      	.db "G", 0, HIGH(IO_LOOKUP_TREE_SREG << 1), LOW(IO_LOOKUP_TREE_SREG << 1)
000425 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_SREG:
000426 5f00                      	.db HIGH(0x5F), LOW(0x5F)
000427 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_T:
000428 0000                      	.db HIGH(0x00), LOW(0x00)
000429 0043
00042a 6008                      	.db "C", 0, HIGH(IO_LOOKUP_TREE_TC << 1), LOW(IO_LOOKUP_TREE_TC << 1)
00042b 0049
00042c d408                      	.db "I", 0, HIGH(IO_LOOKUP_TREE_TI << 1), LOW(IO_LOOKUP_TREE_TI << 1)
00042d 0057
00042e 0009                      	.db "W", 0, HIGH(IO_LOOKUP_TREE_TW << 1), LOW(IO_LOOKUP_TREE_TW << 1)
00042f 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_TC:
000430 0000                      	.db HIGH(0x00), LOW(0x00)
000431 0043
000432 6c08                      	.db "C", 0, HIGH(IO_LOOKUP_TREE_TCC << 1), LOW(IO_LOOKUP_TREE_TCC << 1)
000433 004e
000434 a008                      	.db "N", 0, HIGH(IO_LOOKUP_TREE_TCN << 1), LOW(IO_LOOKUP_TREE_TCN << 1)
000435 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_TCC:
000436 0000                      	.db HIGH(0x00), LOW(0x00)
000437 0052
000438 7408                      	.db "R", 0, HIGH(IO_LOOKUP_TREE_TCCR << 1), LOW(IO_LOOKUP_TREE_TCCR << 1)
000439 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_TCCR:
00043a 0000                      	.db HIGH(0x00), LOW(0x00)
00043b 0030
00043c 8408                      	.db "0", 0, HIGH(IO_LOOKUP_TREE_TCCR0 << 1), LOW(IO_LOOKUP_TREE_TCCR0 << 1)
00043d 0031
00043e 8808                      	.db "1", 0, HIGH(IO_LOOKUP_TREE_TCCR1 << 1), LOW(IO_LOOKUP_TREE_TCCR1 << 1)
00043f 0032
000440 9c08                      	.db "2", 0, HIGH(IO_LOOKUP_TREE_TCCR2 << 1), LOW(IO_LOOKUP_TREE_TCCR2 << 1)
000441 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_TCCR0:
000442 5300                      	.db HIGH(0x53), LOW(0x53)
000443 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_TCCR1:
000444 0000                      	.db HIGH(0x00), LOW(0x00)
000445 0041
000446 9408                      	.db "A", 0, HIGH(IO_LOOKUP_TREE_TCCR1A << 1), LOW(IO_LOOKUP_TREE_TCCR1A << 1)
000447 0042
000448 9808                      	.db "B", 0, HIGH(IO_LOOKUP_TREE_TCCR1B << 1), LOW(IO_LOOKUP_TREE_TCCR1B << 1)
000449 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_TCCR1A:
00044a 4f00                      	.db HIGH(0x4F), LOW(0x4F)
00044b 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_TCCR1B:
00044c 4e00                      	.db HIGH(0x4E), LOW(0x4E)
00044d 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_TCCR2:
00044e 4500                      	.db HIGH(0x45), LOW(0x45)
00044f 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_TCN:
000450 0000                      	.db HIGH(0x00), LOW(0x00)
000451 0054
000452 a808                      	.db "T", 0, HIGH(IO_LOOKUP_TREE_TCNT << 1), LOW(IO_LOOKUP_TREE_TCNT << 1)
000453 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_TCNT:
000454 0000                      	.db HIGH(0x00), LOW(0x00)
000455 0030
000456 b808                      	.db "0", 0, HIGH(IO_LOOKUP_TREE_TCNT0 << 1), LOW(IO_LOOKUP_TREE_TCNT0 << 1)
000457 0031
000458 bc08                      	.db "1", 0, HIGH(IO_LOOKUP_TREE_TCNT1 << 1), LOW(IO_LOOKUP_TREE_TCNT1 << 1)
000459 0032
00045a d008                      	.db "2", 0, HIGH(IO_LOOKUP_TREE_TCNT2 << 1), LOW(IO_LOOKUP_TREE_TCNT2 << 1)
00045b 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_TCNT0:
00045c 5200                      	.db HIGH(0x52), LOW(0x52)
00045d 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_TCNT1:
00045e 0000                      	.db HIGH(0x00), LOW(0x00)
00045f 0048
000460 c808                      	.db "H", 0, HIGH(IO_LOOKUP_TREE_TCNT1H << 1), LOW(IO_LOOKUP_TREE_TCNT1H << 1)
000461 004c
000462 cc08                      	.db "L", 0, HIGH(IO_LOOKUP_TREE_TCNT1L << 1), LOW(IO_LOOKUP_TREE_TCNT1L << 1)
000463 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_TCNT1H:
000464 4d00                      	.db HIGH(0x4D), LOW(0x4D)
000465 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_TCNT1L:
000466 4c00                      	.db HIGH(0x4C), LOW(0x4C)
000467 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_TCNT2:
000468 4400                      	.db HIGH(0x44), LOW(0x44)
000469 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_TI:
00046a 0000                      	.db HIGH(0x00), LOW(0x00)
00046b 0046
00046c e008                      	.db "F", 0, HIGH(IO_LOOKUP_TREE_TIF << 1), LOW(IO_LOOKUP_TREE_TIF << 1)
00046d 004d
00046e ec08                      	.db "M", 0, HIGH(IO_LOOKUP_TREE_TIM << 1), LOW(IO_LOOKUP_TREE_TIM << 1)
00046f 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_TIF:
000470 0000                      	.db HIGH(0x00), LOW(0x00)
000471 0052
000472 e808                      	.db "R", 0, HIGH(IO_LOOKUP_TREE_TIFR << 1), LOW(IO_LOOKUP_TREE_TIFR << 1)
000473 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_TIFR:
000474 5800                      	.db HIGH(0x58), LOW(0x58)
000475 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_TIM:
000476 0000                      	.db HIGH(0x00), LOW(0x00)
000477 0053
000478 f408                      	.db "S", 0, HIGH(IO_LOOKUP_TREE_TIMS << 1), LOW(IO_LOOKUP_TREE_TIMS << 1)
000479 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_TIMS:
00047a 0000                      	.db HIGH(0x00), LOW(0x00)
00047b 004b
00047c fc08                      	.db "K", 0, HIGH(IO_LOOKUP_TREE_TIMSK << 1), LOW(IO_LOOKUP_TREE_TIMSK << 1)
00047d 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_TIMSK:
00047e 5900                      	.db HIGH(0x59), LOW(0x59)
00047f 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_TW:
000480 0000                      	.db HIGH(0x00), LOW(0x00)
000481 0041
000482 1809                      	.db "A", 0, HIGH(IO_LOOKUP_TREE_TWA << 1), LOW(IO_LOOKUP_TREE_TWA << 1)
000483 0042
000484 2409                      	.db "B", 0, HIGH(IO_LOOKUP_TREE_TWB << 1), LOW(IO_LOOKUP_TREE_TWB << 1)
000485 0043
000486 3009                      	.db "C", 0, HIGH(IO_LOOKUP_TREE_TWC << 1), LOW(IO_LOOKUP_TREE_TWC << 1)
000487 0044
000488 3c09                      	.db "D", 0, HIGH(IO_LOOKUP_TREE_TWD << 1), LOW(IO_LOOKUP_TREE_TWD << 1)
000489 0053
00048a 4809                      	.db "S", 0, HIGH(IO_LOOKUP_TREE_TWS << 1), LOW(IO_LOOKUP_TREE_TWS << 1)
00048b 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_TWA:
00048c 0000                      	.db HIGH(0x00), LOW(0x00)
00048d 0052
00048e 2009                      	.db "R", 0, HIGH(IO_LOOKUP_TREE_TWAR << 1), LOW(IO_LOOKUP_TREE_TWAR << 1)
00048f 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_TWAR:
000490 2200                      	.db HIGH(0x22), LOW(0x22)
000491 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_TWB:
000492 0000                      	.db HIGH(0x00), LOW(0x00)
000493 0052
000494 2c09                      	.db "R", 0, HIGH(IO_LOOKUP_TREE_TWBR << 1), LOW(IO_LOOKUP_TREE_TWBR << 1)
000495 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_TWBR:
000496 2000                      	.db HIGH(0x20), LOW(0x20)
000497 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_TWC:
000498 0000                      	.db HIGH(0x00), LOW(0x00)
000499 0052
00049a 3809                      	.db "R", 0, HIGH(IO_LOOKUP_TREE_TWCR << 1), LOW(IO_LOOKUP_TREE_TWCR << 1)
00049b 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_TWCR:
00049c 5600                      	.db HIGH(0x56), LOW(0x56)
00049d 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_TWD:
00049e 0000                      	.db HIGH(0x00), LOW(0x00)
00049f 0052
0004a0 4409                      	.db "R", 0, HIGH(IO_LOOKUP_TREE_TWDR << 1), LOW(IO_LOOKUP_TREE_TWDR << 1)
0004a1 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_TWDR:
0004a2 2300                      	.db HIGH(0x23), LOW(0x23)
0004a3 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_TWS:
0004a4 0000                      	.db HIGH(0x00), LOW(0x00)
0004a5 0052
0004a6 5009                      	.db "R", 0, HIGH(IO_LOOKUP_TREE_TWSR << 1), LOW(IO_LOOKUP_TREE_TWSR << 1)
0004a7 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_TWSR:
0004a8 2100                      	.db HIGH(0x21), LOW(0x21)
0004a9 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_U:
0004aa 0000                      	.db HIGH(0x00), LOW(0x00)
0004ab 0042
0004ac 6809                      	.db "B", 0, HIGH(IO_LOOKUP_TREE_UB << 1), LOW(IO_LOOKUP_TREE_UB << 1)
0004ad 0043
0004ae 8c09                      	.db "C", 0, HIGH(IO_LOOKUP_TREE_UC << 1), LOW(IO_LOOKUP_TREE_UC << 1)
0004af 0044
0004b0 b009                      	.db "D", 0, HIGH(IO_LOOKUP_TREE_UD << 1), LOW(IO_LOOKUP_TREE_UD << 1)
0004b1 0052
0004b2 bc09                      	.db "R", 0, HIGH(IO_LOOKUP_TREE_UR << 1), LOW(IO_LOOKUP_TREE_UR << 1)
0004b3 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_UB:
0004b4 0000                      	.db HIGH(0x00), LOW(0x00)
0004b5 0052
0004b6 7009                      	.db "R", 0, HIGH(IO_LOOKUP_TREE_UBR << 1), LOW(IO_LOOKUP_TREE_UBR << 1)
0004b7 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_UBR:
0004b8 0000                      	.db HIGH(0x00), LOW(0x00)
0004b9 0052
0004ba 7809                      	.db "R", 0, HIGH(IO_LOOKUP_TREE_UBRR << 1), LOW(IO_LOOKUP_TREE_UBRR << 1)
0004bb 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_UBRR:
0004bc 0000                      	.db HIGH(0x00), LOW(0x00)
0004bd 0048
0004be 8409                      	.db "H", 0, HIGH(IO_LOOKUP_TREE_UBRRH << 1), LOW(IO_LOOKUP_TREE_UBRRH << 1)
0004bf 004c
0004c0 8809                      	.db "L", 0, HIGH(IO_LOOKUP_TREE_UBRRL << 1), LOW(IO_LOOKUP_TREE_UBRRL << 1)
0004c1 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_UBRRH:
0004c2 4000                      	.db HIGH(0x40), LOW(0x40)
0004c3 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_UBRRL:
0004c4 2900                      	.db HIGH(0x29), LOW(0x29)
0004c5 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_UC:
0004c6 0000                      	.db HIGH(0x00), LOW(0x00)
0004c7 0053
0004c8 9409                      	.db "S", 0, HIGH(IO_LOOKUP_TREE_UCS << 1), LOW(IO_LOOKUP_TREE_UCS << 1)
0004c9 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_UCS:
0004ca 0000                      	.db HIGH(0x00), LOW(0x00)
0004cb 0052
0004cc 9c09                      	.db "R", 0, HIGH(IO_LOOKUP_TREE_UCSR << 1), LOW(IO_LOOKUP_TREE_UCSR << 1)
0004cd 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_UCSR:
0004ce 0000                      	.db HIGH(0x00), LOW(0x00)
0004cf 0041
0004d0 a809                      	.db "A", 0, HIGH(IO_LOOKUP_TREE_UCSRA << 1), LOW(IO_LOOKUP_TREE_UCSRA << 1)
0004d1 0042
0004d2 ac09                      	.db "B", 0, HIGH(IO_LOOKUP_TREE_UCSRB << 1), LOW(IO_LOOKUP_TREE_UCSRB << 1)
0004d3 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_UCSRA:
0004d4 2b00                      	.db HIGH(0x2B), LOW(0x2B)
0004d5 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_UCSRB:
0004d6 2a00                      	.db HIGH(0x2A), LOW(0x2A)
0004d7 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_UD:
0004d8 0000                      	.db HIGH(0x00), LOW(0x00)
0004d9 0052
0004da b809                      	.db "R", 0, HIGH(IO_LOOKUP_TREE_UDR << 1), LOW(IO_LOOKUP_TREE_UDR << 1)
0004db 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_UDR:
0004dc 2c00                      	.db HIGH(0x2C), LOW(0x2C)
0004dd 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_UR:
0004de 0000                      	.db HIGH(0x00), LOW(0x00)
0004df 0053
0004e0 c409                      	.db "S", 0, HIGH(IO_LOOKUP_TREE_URS << 1), LOW(IO_LOOKUP_TREE_URS << 1)
0004e1 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_URS:
0004e2 0000                      	.db HIGH(0x00), LOW(0x00)
0004e3 0045
0004e4 cc09                      	.db "E", 0, HIGH(IO_LOOKUP_TREE_URSE << 1), LOW(IO_LOOKUP_TREE_URSE << 1)
0004e5 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_URSE:
0004e6 0000                      	.db HIGH(0x00), LOW(0x00)
0004e7 004c
0004e8 d409                      	.db "L", 0, HIGH(IO_LOOKUP_TREE_URSEL << 1), LOW(IO_LOOKUP_TREE_URSEL << 1)
0004e9 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_URSEL:
0004ea 4000                      	.db HIGH(0x40), LOW(0x40)
0004eb 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_W:
0004ec 0000                      	.db HIGH(0x00), LOW(0x00)
0004ed 0044
0004ee e009                      	.db "D", 0, HIGH(IO_LOOKUP_TREE_WD << 1), LOW(IO_LOOKUP_TREE_WD << 1)
0004ef 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_WD:
0004f0 0000                      	.db HIGH(0x00), LOW(0x00)
0004f1 0054
0004f2 e809                      	.db "T", 0, HIGH(IO_LOOKUP_TREE_WDT << 1), LOW(IO_LOOKUP_TREE_WDT << 1)
0004f3 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_WDT:
0004f4 0000                      	.db HIGH(0x00), LOW(0x00)
0004f5 0043
0004f6 f009                      	.db "C", 0, HIGH(IO_LOOKUP_TREE_WDTC << 1), LOW(IO_LOOKUP_TREE_WDTC << 1)
0004f7 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_WDTC:
0004f8 0000                      	.db HIGH(0x00), LOW(0x00)
0004f9 0052
0004fa f809                      	.db "R", 0, HIGH(IO_LOOKUP_TREE_WDTCR << 1), LOW(IO_LOOKUP_TREE_WDTCR << 1)
0004fb 0000                      	.db 0, 0
                                 IO_LOOKUP_TREE_WDTCR:
0004fc 4100                      	.db HIGH(0x41), LOW(0x41)
0004fd 0000                      	.db 0, 0
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Read IO Register
                                 ;;
                                 ;; Inputs:
                                 ;; - Command Length           <- SP + 5
                                 ;; - Command String Pointer H <- SP + 4
                                 ;; - Command String Pointer L <- SP + 3 (First Byte Before Return Address)
                                 ;;
                                 ;; Outputs:
                                 ;; - No Output                -> SP + 5
                                 ;; - No Output                -> SP + 4
                                 ;; - No Output                -> SP + 3 (First Byte Before Return Address)
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
0004fe 5245
0004ff 4f52
000500 3a52
000501 4920
000502 766e
000503 6c61
000504 6469
000505 4920
000506 706e
000507 7475
000508 4620
000509 726f
00050a 6020
00050b 6552
00050c 6461
00050d 4f49
00050e 0d60
00050f 0000                      READ_IO_ERR_MSG: .db "ERROR: Invalid Input For `ReadIO`", ASCII_NEW_LINE, 0, 0
                                 
                                 
                                 READ_IO:
                                 	.def TEMP = R16
                                 
                                 	; Number of pushes
                                 	.set STACK_OFFSET = 5
                                 	; Backup Registers
000510 930f                      	push TEMP
000511 93df                      	push YH
000512 93cf                      	push YL
000513 93ff                      	push ZH
000514 93ef                      	push ZL
                                 
                                 	; Load Stack Pointer
                                 	; Y <- SP
000515 b7de                      	in YH, SPH
000516 b7cd                      	in YL, SPL
                                 
                                 	; Load Command Length
000517 850a                      	ldd TEMP, Y+(STACK_OFFSET + 5)
                                 
                                 	; o (X)+
000518 3003                      	cpi TEMP, 3
000519 f0e0                      	brlo READ_IO_ERR
                                 
                                 	; Load Command Address
00051a 85f9                      	ldd ZH, Y+(STACK_OFFSET + 4)
00051b 85e8                      	ldd ZL, Y+(STACK_OFFSET + 3)
                                 
                                 	; Get string address of IO register name
00051c 9632                      	adiw ZH:ZL, 2
                                 	; Decrease length by 2
00051d 5002                      	subi TEMP, 2
                                 
00051e 930f                      	push TEMP
00051f 93ff                      	push ZH
000520 93ef                      	push ZL
000521 dd1e                      	rcall ASCII_IO_REG_TO_MEM_ADDR
000522 91ef                      	pop ZL
000523 91ff                      	pop ZH
000524 910f                      	pop TEMP
                                 	; IF (SUBROUTINE ERR != 0) THEN ERR
000525 3000                      	cpi TEMP, 0
000526 f479                      	brne READ_IO_ERR
                                 
                                 	; Read IO Register Value
000527 8100                      	ld TEMP, Z
                                 	; Print as ASCII
000528 930f                      	push TEMP
000529 930f                      	push TEMP
00052a db74                      	rcall HEX_BYTE_TO_ASCII
                                 	; Get Least Significant Char
00052b 910f                      	pop TEMP
00052c dc0b                      	rcall PUTCHAR
00052d 930f                      	push TEMP
00052e dc09                      	rcall PUTCHAR
00052f 910f                      	pop TEMP
000530 910f                      	pop TEMP
                                 
                                 	; Print New Line
000531 e00d                      	ldi TEMP, ASCII_NEW_LINE
000532 930f                      	push TEMP
000533 dc04                      	rcall PUTCHAR
000534 910f                      	pop TEMP
                                 
000535 c007                      	rjmp READ_IO_RET
                                 
                                 	READ_IO_ERR:
000536 e009                      		ldi TEMP, HIGH(READ_IO_ERR_MSG << 1)
000537 930f                      		push TEMP
000538 ef0c                      		ldi TEMP, LOW (READ_IO_ERR_MSG << 1)
000539 930f                      		push TEMP
00053a dc0a                      		rcall PUTSTR
00053b 910f                      		pop TEMP
00053c 910f                      		pop TEMP
                                 
                                 	READ_IO_RET:
                                 		; Restore Registers
00053d 91ef                      		pop ZL
00053e 91ff                      		pop ZH
00053f 91cf                      		pop YL
000540 91df                      		pop YH
000541 910f                      		pop TEMP
                                 
000542 9508                      		ret
                                 	
                                 .INCLUDE "write-io.inc"
                                 
                                 ;; Include Guard
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 .ifdef INCLUDE_WRITE_IO
                                 .endif
                                 
                                 .equ INCLUDE_WRITE_IO = 1
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Imports
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 .INCLUDE "ascii.inc"
                                 
                                 ;; Include Guard
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 .ifdef INCLUDE_ASCII
                                 .INCLUDE "io.inc"
                                 
                                 ;; Include Guard
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 .ifdef INCLUDE_IO
                                 .INCLUDE "io-name-to-addr.inc"
                                 
                                 ;; Include Guard
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 .ifdef INCLUDE_IO_NAME_TO_ADDR
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Write IO Register
                                 ;;
                                 ;; Inputs:
                                 ;; - Command Length           <- SP + 5
                                 ;; - Command String Pointer H <- SP + 4
                                 ;; - Command String Pointer L <- SP + 3 (First Byte Before Return Address)
                                 ;;
                                 ;; Outputs:
                                 ;; - No Output                -> SP + 5
                                 ;; - No Output                -> SP + 4
                                 ;; - No Output                -> SP + 3 (First Byte Before Return Address)
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
000543 5245
000544 4f52
000545 3a52
000546 4920
000547 766e
000548 6c61
000549 6469
00054a 4920
00054b 706e
00054c 7475
00054d 4620
00054e 726f
00054f 6020
000550 7257
000551 7469
000552 4965
000553 604f
000554 000d                      WRITE_IO_ERR_MSG: .db "ERROR: Invalid Input For `WriteIO`", ASCII_NEW_LINE, 0
000555 4f49
000556 5220
000557 6765
000558 7369
000559 6574
00055a 2072
00055b 7257
00055c 7469
00055d 2065
00055e 6f43
00055f 706d
000560 656c
000561 6574
000562 000d                      WRITE_IO_SUC_MSG: .db "IO Register Write Complete", ASCII_NEW_LINE, 0
                                 
                                 
                                 WRITE_IO:
                                 	.def TEMP = R16
                                 	.def BYTE = R17
                                 
                                 	; Number of pushes
                                 	.set STACK_OFFSET = 6
                                 	; Backup Registers
000563 930f                      	push TEMP
000564 931f                      	push BYTE
000565 93df                      	push YH
000566 93cf                      	push YL
000567 93ff                      	push ZH
000568 93ef                      	push ZL
                                 
                                 	; Load Stack Pointer
                                 	; Y <- SP
000569 b7de                      	in YH, SPH
00056a b7cd                      	in YL, SPL
                                 
                                 	; Load Command Length
00056b 850b                      	ldd TEMP, Y+(STACK_OFFSET + 5)
                                 
                                 	; i YY (X)+
00056c 3006                      	cpi TEMP, 6
00056d f110                      	brlo WRITE_IO_ERR
                                 
                                 	; Load Command Address
00056e 85fa                      	ldd ZH, Y+(STACK_OFFSET + 4)
00056f 85e9                      	ldd ZL, Y+(STACK_OFFSET + 3)
                                 
                                 	; Get string address of byte to store
000570 9632                      	adiw ZH:ZL, 2
                                 
000571 e000                      	ldi TEMP, 0
000572 930f                      	push TEMP
000573 93ff                      	push ZH
000574 93ef                      	push ZL
000575 dac0                      	rcall ASCII_WORD_TO_HEX
000576 911f                      	pop BYTE
000577 910f                      	pop TEMP
000578 910f                      	pop TEMP
                                 	; IF (SUBROUTINE ERR != 0) THEN ERR
000579 3000                      	cpi TEMP, 0
00057a f4a9                      	brne WRITE_IO_ERR
                                 
                                 	; Get string address of IO register name
00057b 9633                      	adiw ZH:ZL, 3
                                 	; Load Command Length
00057c 850b                      	ldd TEMP, Y+(STACK_OFFSET + 5)
                                 	; Decrease length by 5
00057d 5005                      	subi TEMP, 5
                                 
00057e 930f                      	push TEMP
00057f 93ff                      	push ZH
000580 93ef                      	push ZL
000581 dcbe                      	rcall ASCII_IO_REG_TO_MEM_ADDR
000582 91ef                      	pop ZL
000583 91ff                      	pop ZH
000584 910f                      	pop TEMP
                                 	; IF (SUBROUTINE ERR != 0) THEN ERR
000585 3000                      	cpi TEMP, 0
000586 f449                      	brne WRITE_IO_ERR
                                 
000587 8310                      	st Z, BYTE
                                 
000588 e00a                      	ldi TEMP, HIGH(WRITE_IO_SUC_MSG << 1)
000589 930f                      	push TEMP
00058a ea0a                      	ldi TEMP, LOW (WRITE_IO_SUC_MSG << 1)
00058b 930f                      	push TEMP
00058c dbb8                      	rcall PUTSTR
00058d 910f                      	pop TEMP
00058e 910f                      	pop TEMP
                                 
00058f c007                      	rjmp WRITE_IO_RET
                                 
                                 	WRITE_IO_ERR:
000590 e00a                      		ldi TEMP, HIGH(WRITE_IO_ERR_MSG << 1)
000591 930f                      		push TEMP
000592 e806                      		ldi TEMP, LOW (WRITE_IO_ERR_MSG << 1)
000593 930f                      		push TEMP
000594 dbb0                      		rcall PUTSTR
000595 910f                      		pop TEMP
000596 910f                      		pop TEMP
                                 
                                 	WRITE_IO_RET:
                                 		; Restore Registers
000597 91ef                      		pop ZL
000598 91ff                      		pop ZH
000599 91cf                      		pop YL
00059a 91df                      		pop YH
00059b 911f                      		pop BYTE
00059c 910f                      		pop TEMP
                                 
00059d 9508                      		ret
                                 	
                                 	.undef TEMP
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; # Program Memory Constants
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 .equ PROMPT_LEN = 6
                                 
                                 PROMPT:
00059e 4746
00059f 3e3e
0005a0 203e
0005a1 0000                      	.db "FG>>> ", 0, 0
                                 REPEATED_COMMAND_NOTIFICATION:
0005a2 4550
0005a3 4952
0005a4 444f
0005a5 4349
0005a6 4320
0005a7 444d
0005a8 203a
0005a9 0000                      	.db "PERIODIC CMD: ", 0, 0
                                 EXEC_INVALID_CMD:
0005aa 5245
0005ab 4f52
0005ac 3a52
0005ad 4920
0005ae 766e
0005af 6c61
0005b0 6469
0005b1 4320
0005b2 6d6f
0005b3 616d
0005b4 646e
0005b5 000d                      	.db "ERROR: Invalid Command", ASCII_NEW_LINE, 0
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; # Main Routine
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 RESET:
                                 	; Set Register Aliases
                                 	.def TEMP = R16
                                 
                                 	; Initialize Stack Pointer
0005b6 e008                      	ldi TEMP, HIGH(RAMEND)
0005b7 bf0e                      	out SPH, TEMP
0005b8 e50f                      	ldi TEMP, LOW(RAMEND)
0005b9 bf0d                      	out SPL, TEMP
                                 
                                 	; Initialize USART BEGIN
                                 
                                 	; Set Baud Rate
0005ba e000                      	ldi TEMP, HIGH(BAUD_UBRR)
0005bb bd00                      	out UBRRH, TEMP
0005bc e109                      	ldi TEMP, LOW(BAUD_UBRR)
0005bd b909                      	out UBRRL, TEMP
                                 
                                 	; TXEN  -> Enable Transmitter
                                 	; RXEN  -> Enable Receiver
                                 	; RXCIE -> Enable Rx Complete Interrupt
0005be e908                      	ldi TEMP, (1 << RXCIE) | (1 << RXEN) | (1 << TXEN)
0005bf b90a                      	out UCSRB, TEMP
                                 
                                 	; Set Frame Format:
                                 	; - 8 Data Bits
                                 	; - 2 Stop Bits
0005c0 e80e                      	ldi TEMP, (1 << URSEL) | (1 << USBS) | (1 << UCSZ0) | (1 << UCSZ1)
0005c1 bd00                      	out UCSRC, TEMP
                                 
                                 	; Initialize USART END
                                 
                                 	; Initialize command index to 0
0005c2 e0f0                      	ldi ZH, HIGH(CMD_IDX)
0005c3 e8e0                      	ldi ZL, LOW (CMD_IDX)
0005c4 2700                      	clr TEMP
0005c5 8300                      	st Z, TEMP
                                 
                                 	; Initialize repeat index to 0
0005c6 e0f1                      	ldi ZH, HIGH(REPEAT_IDX)
0005c7 e0ed                      	ldi ZL, LOW (REPEAT_IDX)
0005c8 2700                      	clr TEMP
0005c9 8300                      	st Z, TEMP
                                 
                                 	; Set Timer 1 Max Value
0005ca e00f                      	ldi TEMP, HIGH(T1_MAX_VAL)
0005cb bd0b                      	out OCR1AH, TEMP
0005cc ef0f                      	ldi TEMP, LOW(T1_MAX_VAL)
0005cd bd0a                      	out OCR1AL, TEMP
                                 
                                 	; Enable Timer 1 Output Compare Interrupt
0005ce e100                      	ldi TEMP, 1 << OCIE1A
0005cf bf09                      	out TIMSK, TEMP
0005d0 e000                      	ldi TEMP, 0
0005d1 bd0f                      	out TCCR1A, TEMP
                                 
                                 	; Set Timer 1 Prescale
0005d2 e00d                      	ldi TEMP, (1 << WGM12) | (1 << CS12) | (1 << CS10)
0005d3 bd0e                      	out TCCR1B, TEMP
                                 
                                 	; Enable Global Interrupts
0005d4 9478                      	sei
                                 
                                 	RESET_LOOP:
0005d5 cfff                      		rjmp RESET_LOOP
                                 
                                 	; Clear Register Aliases
                                 	.undef TEMP
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; # Interrupt Handlers
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 USART_RX_COMPLETE:
                                 	; Set Register Aliases
                                 	.def TEMP = R16
                                 	.def CHAR = R17
                                 	.def IDX  = R18
                                 
                                 	; Backup Registers
0005d6 930f                      	push TEMP
0005d7 b70f                      	in TEMP, SREG
0005d8 930f                      	push TEMP
0005d9 93ff                      	push ZH
0005da 93ef                      	push ZL
0005db 93df                      	push YH
0005dc 93cf                      	push YL
0005dd 931f                      	push CHAR
0005de 932f                      	push IDX
                                 
                                 	; Read ASCII Character
0005df b11c                      	in CHAR, UDR
                                 
                                 	; Read command index
0005e0 e0f0                      	ldi ZH, HIGH(CMD_IDX)
0005e1 e8e0                      	ldi ZL, LOW (CMD_IDX)
0005e2 8120                      	ld IDX, Z
                                 
0005e3 301d                      	cpi CHAR, ASCII_NEW_LINE
                                 
0005e4 f4b9                      	brne USART_RX_COMPLETE_NOT_DONE
                                 
0005e5 e00d                      	ldi R16, ASCII_NEW_LINE
0005e6 930f                      	push R16
0005e7 db50                      	rcall PUTCHAR
0005e8 910f                      	pop R16
                                 	
0005e9 932f                      	push IDX
0005ea e000                      	ldi TEMP, HIGH(CMD)
0005eb 930f                      	push TEMP
0005ec e600                      	ldi TEMP, LOW (CMD)
0005ed 930f                      	push TEMP
0005ee d075                      	rcall EXECUTE
0005ef 910f                      	pop TEMP
0005f0 910f                      	pop TEMP
0005f1 910f                      	pop TEMP
                                 
                                 	; Print Prompt
0005f2 e00b                      	ldi TEMP, HIGH(PROMPT << 1)
0005f3 930f                      	push TEMP
0005f4 e30c                      	ldi TEMP, LOW (PROMPT << 1)
0005f5 930f                      	push TEMP
0005f6 db4e                      	rcall PUTSTR
0005f7 910f                      	pop TEMP
0005f8 910f                      	pop TEMP
                                 
                                 	; Reset index
0005f9 2722                      	clr IDX
0005fa 8320                      	st Z, IDX
                                 
0005fb c01e                      	rjmp USART_RX_COMPLETE_RET
                                 
                                 	USART_RX_COMPLETE_NOT_DONE:
0005fc 3018                      		cpi CHAR, ASCII_BACKSPACE
                                 
0005fd f471                      		brne USART_RX_COMPLETE_NOT_BACKSPACE
                                 
0005fe 3020                      		cpi IDX, 0
0005ff f0d1                      		breq USART_RX_COMPLETE_RET
                                 
000600 952a                      		dec IDX
000601 8320                      		st Z, IDX
                                 		; Echo backspace back
                                 		; Backspace -> Space -> Backspace
000602 e008                      		ldi R16, ASCII_BACKSPACE
000603 930f                      		push R16
000604 db33                      		rcall PUTCHAR
000605 e200                      		ldi R16, ASCII_SPACE
000606 930f                      		push R16
000607 db30                      		rcall PUTCHAR
000608 910f                      		pop R16
000609 db2e                      		rcall PUTCHAR
00060a 910f                      		pop R16
                                 
00060b c00e                      		rjmp USART_RX_COMPLETE_RET
                                 
                                 	USART_RX_COMPLETE_NOT_BACKSPACE:
                                 		; Handle full command buffer
00060c 3220                      		cpi IDX, CMD_MAX_LEN
                                 
00060d f061                      		breq USART_RX_COMPLETE_RET
                                 
                                 		; Get next-character index
00060e e0d0                      		ldi YH, HIGH(CMD)
00060f e6c0                      		ldi YL, LOW(CMD)
000610 0fc2                      		add YL, IDX
000611 2700                      		clr TEMP
000612 1fd0                      		adc YH, TEMP
                                 
                                 		; Store character
000613 8318                      		st Y, CHAR
                                 	
                                 		; Increment index
000614 9523                      		inc IDX
000615 8320                      		st Z, IDX
                                 
                                 		; Echo character back
000616 2f01                      		mov R16, CHAR
000617 930f                      		push R16
000618 db1f                      		rcall PUTCHAR
000619 910f                      		pop R16
                                 
                                 	USART_RX_COMPLETE_RET:
                                 		; Restore Registers
00061a 912f                      		pop IDX
00061b 911f                      		pop CHAR
00061c 91cf                      		pop YL
00061d 91df                      		pop YH
00061e 91ef                      		pop ZL
00061f 91ff                      		pop ZH
000620 910f                      		pop TEMP
000621 bf0f                      		out SREG, TEMP
000622 910f                      		pop TEMP
                                 
000623 9518                      		reti
                                 
                                 	; Clear Register Aliases
                                 	.undef TEMP
                                 	.undef CHAR
                                 	.undef IDX
                                 
                                 
                                 T1_COMPA:
                                 	; Set Register Aliases
                                 	.def TEMP = R16
                                 	.def CNTR = R17
                                 	.def IDX  = R18
                                 	.def FLAG = R19
                                 
                                 	; Backup Registers
000624 930f                      	push TEMP
000625 b70f                      	in TEMP, SREG
000626 930f                      	push TEMP
000627 931f                      	push CNTR
000628 932f                      	push IDX
000629 933f                      	push FLAG
00062a 93df                      	push YH
00062b 93cf                      	push YL
                                 
                                 	; Get Commands Count
00062c e0d1                      	ldi YH, HIGH(REPEAT_IDX)
00062d e0cd                      	ldi YL, LOW (REPEAT_IDX)
00062e 8128                      	ld IDX, Y
                                 
00062f 3020                      	cpi IDX, 0
000630 f151                      	breq T1_COMPA_RET
                                 
000631 e0d0                      	ldi YH, HIGH(REPEAT_CMDS)
000632 e8c1                      	ldi YL, LOW (REPEAT_CMDS)
                                 
                                 	; No Command Executed Yet
000633 e030                      	ldi FLAG, 0
                                 
000634 e010                      	ldi CNTR, 0
                                 
                                 	T1_COMPA_EXEC:
                                 		; Get Count
000635 8108                      		ld TEMP, Y
000636 950a                      		dec TEMP
000637 3000                      		cpi TEMP, 0
000638 f4c9                      		brne T1_COMPA_NO_EXEC
                                 
                                 		; Execute Command
                                 
000639 3030                      		cpi FLAG, 0
00063a f411                      		brne NO_CLEAR
                                 
00063b d1e4                      		rcall CLEAR_LINE
00063c e031                      		ldi FLAG, 1
                                 
                                 		NO_CLEAR:
                                 
                                 		; Print Notification
00063d e00b                      		ldi TEMP, HIGH(REPEATED_COMMAND_NOTIFICATION << 1)
00063e 930f                      		push TEMP
00063f e404                      		ldi TEMP, LOW (REPEATED_COMMAND_NOTIFICATION << 1)
000640 930f                      		push TEMP
000641 db03                      		rcall PUTSTR
000642 910f                      		pop TEMP
000643 910f                      		pop TEMP
                                 
                                 		; Get Interval
000644 9621                      		adiw YH:YL, 1
000645 8108                      		ld TEMP, Y
                                 		; Set Count To Interval
000646 930a                      		st -Y, TEMP
                                 
                                 		; Get Command Length
000647 9622                      		adiw YH:YL, 2
000648 9109                      		ld TEMP, Y+
                                 
                                 		; Execute Command
000649 930f                      		push TEMP
00064a 93df                      		push YH
00064b 93cf                      		push YL
00064c d017                      		rcall EXECUTE
00064d 910f                      		pop TEMP
00064e 910f                      		pop TEMP
00064f 910f                      		pop TEMP
                                 
000650 9723                      		sbiw YH:YL, 3
                                 
000651 c001                      		rjmp T1_COMPA_COMMON
                                 
                                 		T1_COMPA_NO_EXEC:
                                 			; Set Decreased Count
000652 8308                      			st Y, TEMP
                                 
                                 		T1_COMPA_COMMON:
000653 5dcd                      			subi YL, -REPEAT_CMD_LEN
000654 40d0                      			sbci YH, 0
000655 9513                      			inc CNTR
000656 1712                      			cp CNTR, IDX
000657 f6e9                      			brne T1_COMPA_EXEC
                                 
000658 3030                      	cpi FLAG, 0
000659 f009                      	breq T1_COMPA_RET
                                 
00065a d1ea                      	rcall DIRTY_LINE
                                 
                                 	T1_COMPA_RET:
                                 		; Restore Registers
00065b 91cf                      		pop YL
00065c 91df                      		pop YH
00065d 913f                      		pop FLAG
00065e 912f                      		pop IDX
00065f 911f                      		pop CNTR
000660 910f                      		pop TEMP
000661 bf0f                      		out SREG, TEMP
000662 910f                      		pop TEMP
                                 
000663 9518                      		reti
                                 
                                 	; Clear Register Aliases
                                 	.undef TEMP
                                 	.undef CNTR
                                 	.undef IDX
                                 	.undef FLAG
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; # Subroutines
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Execute Command
                                 ;;
                                 ;; Inputs:
                                 ;; - Command Length           <- SP + 5
                                 ;; - Command String Pointer H <- SP + 4
                                 ;; - Command String Pointer L <- SP + 3 (First Byte Before Return Address)
                                 ;;
                                 ;; Outputs:
                                 ;; - No Output                -> SP + 5
                                 ;; - No Output                -> SP + 4
                                 ;; - No Output                -> SP + 3 (First Byte Before Return Address)
                                 ;;
                                 ;; Supported Commands:
                                 ;; - Read Memory:
                                 ;;   r $BEG_ADDR $END_ADDR
                                 ;; - Write Memory:
                                 ;;   w $BEG_ADDR $BYTES_TO_WRITE
                                 ;; - Read IO Register:
                                 ;;   o $IO_REG_NAME
                                 ;; - Write IO Register:
                                 ;;   i $IO_REG_NAME $BYTE
                                 ;; - Repeat Command:
                                 ;;   p $SECONDS $COMMAND
                                 ;; - List Repeated Commands:
                                 ;;   l
                                 ;; - Deleted Repeated Command:
                                 ;;   d $IDX
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 EXECUTE:
                                 	.def TEMP = R16
                                 	
                                 	; Number of pushes
                                 	.set STACK_OFFSET = 5
                                 	; Backup Registers
000664 930f                      	push TEMP
000665 93df                      	push YH
000666 93cf                      	push YL
000667 93ff                      	push ZH
000668 93ef                      	push ZL
                                 
                                 	; Load Stack Pointer
                                 	; Y <- SP
000669 b7de                      	in YH, SPH
00066a b7cd                      	in YL, SPL
                                 
                                 	; Load Command Length
00066b 850a                      	ldd TEMP, Y+(STACK_OFFSET + 5)
                                 	; Push Command Length (Prepare Subroutine Call)
00066c 930f                      	push TEMP
                                 
                                 	; Two Dummy Pushes In Case Error
00066d 930f                      	push TEMP
00066e 930f                      	push TEMP
                                 
                                 	; Empty command
00066f 3000                      	cpi TEMP, 0
000670 f169                      	breq EXECUTE_INVALID
                                 
                                 	; Load Command Address
000671 85f9                      	ldd ZH, Y+(STACK_OFFSET + 4)
000672 85e8                      	ldd ZL, Y+(STACK_OFFSET + 3)
                                 
000673 3001                      	cpi TEMP, 1
000674 f041                      	breq SKIP_SPACE_CHECK
                                 	; Get second character
000675 93ff                      	push ZH
000676 93ef                      	push ZL
000677 9631                      	adiw ZH:ZL, 1
000678 8100                      	ld TEMP, Z
000679 91ef                      	pop ZL
00067a 91ff                      	pop ZH
                                 	
00067b 3200                      	cpi TEMP, ASCII_SPACE
00067c f509                      	brne EXECUTE_INVALID
                                 
                                 	SKIP_SPACE_CHECK:
                                 
                                 	; Remove Dummy Pushes
00067d 910f                      	pop TEMP
00067e 910f                      	pop TEMP
                                 
                                 	; Push Command Length (Prepare Subroutine Call)
00067f 93ff                      	push ZH
000680 93ef                      	push ZL
                                 	
000681 8100                      	ld TEMP, Z
                                 
000682 3702                      	cpi TEMP, ASCII_LOWER_R
000683 f411                      	brne EXECUTE_W
000684 dae9                      	rcall READ_MEM
000685 c01f                      	rjmp  EXECUTE_RET
                                 
                                 	EXECUTE_W:
000686 3707                      		cpi TEMP, ASCII_LOWER_W
000687 f411                      		brne EXECUTE_O
000688 db5a                      		rcall WRITE_MEM
000689 c01b                      		rjmp  EXECUTE_RET
                                 
                                 	EXECUTE_O:
00068a 360f                      		cpi TEMP, ASCII_LOWER_O
00068b f411                      		brne EXECUTE_I
00068c de83                      		rcall READ_IO
00068d c017                      		rjmp  EXECUTE_RET
                                 
                                 	EXECUTE_I:
00068e 3609                      		cpi TEMP, ASCII_LOWER_I
00068f f411                      		brne EXECUTE_P
000690 ded2                      		rcall WRITE_IO
000691 c013                      		rjmp  EXECUTE_RET
                                 
                                 	EXECUTE_P:
000692 3700                      		cpi TEMP, ASCII_LOWER_P
000693 f411                      		brne EXECUTE_L
000694 d03a                      		rcall REPEAT_CMD
000695 c00f                      		rjmp  EXECUTE_RET
                                 
                                 	EXECUTE_L:
000696 360c                      		cpi TEMP, ASCII_LOWER_L
000697 f411                      		brne EXECUTE_D
000698 d0ac                      		rcall LIST_REPEAT_CMD
000699 c00b                      		rjmp  EXECUTE_RET
                                 
                                 	EXECUTE_D:
00069a 3604                      		cpi TEMP, ASCII_LOWER_D
00069b f411                      		brne EXECUTE_INVALID
00069c d120                      		rcall DEL_REPEAT_CMD
00069d c007                      		rjmp  EXECUTE_RET
                                 	
                                 	EXECUTE_INVALID:
                                 		; Print Error
00069e e00b                      		ldi TEMP, HIGH(EXEC_INVALID_CMD << 1)
00069f 930f                      		push TEMP
0006a0 e504                      		ldi TEMP, LOW (EXEC_INVALID_CMD << 1)
0006a1 930f                      		push TEMP
0006a2 daa2                      		rcall PUTSTR
0006a3 910f                      		pop TEMP
0006a4 910f                      		pop TEMP
                                 
                                 	EXECUTE_RET:
0006a5 910f                      		pop TEMP
0006a6 910f                      		pop TEMP
0006a7 910f                      		pop TEMP
                                 
                                 		; Restore Registers
0006a8 91ef                      		pop ZL
0006a9 91ff                      		pop ZH
0006aa 91cf                      		pop YL
0006ab 91df                      		pop YH
0006ac 910f                      		pop TEMP
                                 	
0006ad 9508                      		ret
                                 
                                 	.undef TEMP
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Repeat Command (Add)
                                 ;;
                                 ;; Inputs:
                                 ;; - Command Length           <- SP + 5
                                 ;; - Command String Pointer H <- SP + 4
                                 ;; - Command String Pointer L <- SP + 3 (First Byte Before Return Address)
                                 ;;
                                 ;; Outputs:
                                 ;; - No Output                -> SP + 5
                                 ;; - No Output                -> SP + 4
                                 ;; - No Output                -> SP + 3 (First Byte Before Return Address)
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
0006ae 5245
0006af 4f52
0006b0 3a52
0006b1 4920
0006b2 766e
0006b3 6c61
0006b4 6469
0006b5 4920
0006b6 706e
0006b7 7475
0006b8 4620
0006b9 726f
0006ba 6020
0006bb 6552
0006bc 6570
0006bd 7461
0006be 6f43
0006bf 6d6d
0006c0 6e61
0006c1 6064
0006c2 000d                      REPEAT_CMD_ERR_MSG: .db "ERROR: Invalid Input For `RepeatCommand`", ASCII_NEW_LINE, 0
0006c3 6550
0006c4 6972
0006c5 646f
0006c6 6369
0006c7 4320
0006c8 6d6f
0006c9 616d
0006ca 646e
0006cb 4120
0006cc 6464
0006cd 6465
0006ce 000d                      REPEAT_CMD_SUC_MSG: .db "Periodic Command Added", ASCII_NEW_LINE, 0
                                 
                                 
                                 REPEAT_CMD:
                                 	.def IDX  = R16
                                 	.def LEN  = R17
                                 	.def ITRV = R18
                                 	.def TEMP = R19
                                 
                                 	; Number of pushes
                                 	.set STACK_OFFSET = 10
                                 	; Backup Registers
0006cf 930f                      	push IDX
0006d0 931f                      	push LEN
0006d1 932f                      	push ITRV
0006d2 933f                      	push TEMP
0006d3 93bf                      	push XH
0006d4 93af                      	push XL
0006d5 93df                      	push YH
0006d6 93cf                      	push YL
0006d7 93ff                      	push ZH
0006d8 93ef                      	push ZL
                                 
                                 	; Load Stack Pointer
                                 	; Y <- SP
0006d9 b7de                      	in YH, SPH
0006da b7cd                      	in YL, SPL
                                 
                                 	; Load Command Length
0006db 851f                      	ldd LEN, Y+(STACK_OFFSET + 5)
                                 
                                 	; p TT r X+
0006dc 3018                      	cpi LEN, 8
0006dd f190                      	brlo REPEAT_CMD_ERR
                                 
0006de e0f1                      	ldi ZH, HIGH(REPEAT_IDX)
0006df e0ed                      	ldi ZL, LOW (REPEAT_IDX)
                                 
                                 	; Make Sure We Have Enough Space
0006e0 8100                      	ld IDX, Z
0006e1 3004                      	cpi IDX, MAX_REPEAT_CMDS
0006e2 f568                      	brsh REPEAT_CMD_ERR
                                 
                                 	; Get Interval
0006e3 85be                      	ldd XH, Y+(STACK_OFFSET + 4)
0006e4 85ad                      	ldd XL, Y+(STACK_OFFSET + 3)
0006e5 9612                      	adiw XH:XL, 2
                                 
0006e6 e030                      	ldi TEMP, 0
0006e7 933f                      	push TEMP
0006e8 93bf                      	push XH
0006e9 93af                      	push XL
0006ea d94b                      	rcall ASCII_WORD_TO_HEX
0006eb 912f                      	pop ITRV
0006ec 913f                      	pop TEMP
0006ed 913f                      	pop TEMP
                                 	; IF (SUBROUTINE ERR != 0) THEN ERR
0006ee 3030                      	cpi TEMP, 0
0006ef f501                      	brne REPEAT_CMD_ERR
                                 
0006f0 3020                      	cpi ITRV, 0
0006f1 f0f1                      	breq REPEAT_CMD_ERR
                                 
                                 	; Increment Index
0006f2 9503                      	inc IDX
0006f3 8300                      	st Z, IDX
                                 
                                 	; Get Command To Repeat
0006f4 9613                      	adiw XH:XL, 3
0006f5 5015                      	subi LEN, 5
                                 
                                 	; Get SRAM location to store
0006f6 e0f0                      	ldi ZH, HIGH(REPEAT_CMDS)
0006f7 e8e1                      	ldi ZL, LOW (REPEAT_CMDS)
0006f8 950a                      	dec IDX
                                 
                                 	REPEAT_CMD_PTR_LOOP:
0006f9 3000                      		cpi IDX, 0
0006fa f021                      		breq REPEAT_CMD_PTR_LOOP_EXIT
0006fb 5ded                      		subi ZL, -REPEAT_CMD_LEN
0006fc 40f0                      		sbci ZH, 0
0006fd 950a                      		dec IDX
0006fe cffa                      		rjmp REPEAT_CMD_PTR_LOOP
                                 
                                 	REPEAT_CMD_PTR_LOOP_EXIT:
                                 	
0006ff 9321                      	st Z+, ITRV
000700 9321                      	st Z+, ITRV
000701 9311                      	st Z+, LEN
                                 
                                 	; Use ITRV As Loop Counter
000702 e020                      	ldi ITRV, 0
                                 
                                 	REPEAT_CMD_COPY:
000703 913d                      		ld TEMP, X+
000704 9331                      		st Z+, TEMP
000705 9523                      		inc ITRV
000706 1721                      		cp ITRV, LEN
000707 f3d8                      		brlo REPEAT_CMD_COPY
                                 
000708 e03d                      	ldi TEMP, HIGH(REPEAT_CMD_SUC_MSG << 1)
000709 933f                      	push TEMP
00070a e836                      	ldi TEMP, LOW (REPEAT_CMD_SUC_MSG << 1)
00070b 933f                      	push TEMP
00070c da38                      	rcall PUTSTR
00070d 913f                      	pop TEMP
00070e 913f                      	pop TEMP
                                 
00070f c007                      	rjmp REPEAT_CMD_RET
                                 
                                 	REPEAT_CMD_ERR:
000710 e03d                      		ldi TEMP, HIGH(REPEAT_CMD_ERR_MSG << 1)
000711 933f                      		push TEMP
000712 e53c                      		ldi TEMP, LOW (REPEAT_CMD_ERR_MSG << 1)
000713 933f                      		push TEMP
000714 da30                      		rcall PUTSTR
000715 913f                      		pop TEMP
000716 913f                      		pop TEMP
                                 
                                 	REPEAT_CMD_RET:
                                 		; Restore Registers
000717 91ef                      		pop ZL
000718 91ff                      		pop ZH
000719 91cf                      		pop YL
00071a 91df                      		pop YH
00071b 91af                      		pop XL
00071c 91bf                      		pop XH
00071d 913f                      		pop TEMP
00071e 912f                      		pop ITRV
00071f 911f                      		pop LEN
000720 910f                      		pop IDX
                                 
000721 9508                      		ret
                                 
                                 	.undef IDX
                                 	.undef LEN
                                 	.undef ITRV
                                 	.undef TEMP
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Repeat Command (List)
                                 ;;
                                 ;; Inputs:
                                 ;; - Command Length           <- SP + 5
                                 ;; - Command String Pointer H <- SP + 4
                                 ;; - Command String Pointer L <- SP + 3 (First Byte Before Return Address)
                                 ;;
                                 ;; Outputs:
                                 ;; - No Output                -> SP + 5
                                 ;; - No Output                -> SP + 4
                                 ;; - No Output                -> SP + 3 (First Byte Before Return Address)
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
000722 4553
000723 2043
000724 3e2d
000725 0020                      LIST_REPEAT_CMD_INTERVAL: .db   "SEC -> ", 0
000726 202c
000727 4d43
000728 2044
000729 3e2d
00072a 0020                      LIST_REPEAT_CMD_CMD     : .db ", CMD -> ", 0
00072b 5245
00072c 4f52
00072d 3a52
00072e 6020
00072f 694c
000730 7473
000731 6552
000732 6570
000733 7461
000734 6465
000735 6f43
000736 6d6d
000737 6e61
000738 7364
000739 2060
00073a 6f44
00073b 7365
00073c 4e20
00073d 746f
00073e 5420
00073f 6b61
000740 2065
000741 6e49
000742 7570
000743 0d74
000744 0000                      LIST_REPEAT_CMD_ERR_MSG : .db "ERROR: `ListRepeatedCommands` Does Not Take Input", ASCII_NEW_LINE, 0, 0
                                 
                                 
                                 LIST_REPEAT_CMD:
                                 	.def IDX  = R16
                                 	.def LEN  = R17
                                 	.def CNTR = R18
                                 	.def TEMP = R19
                                 
                                 	; Number of pushes
                                 	.set STACK_OFFSET = 6
                                 	; Backup Registers
000745 930f                      	push IDX
000746 931f                      	push LEN
000747 932f                      	push CNTR
000748 933f                      	push TEMP
000749 93df                      	push YH
00074a 93cf                      	push YL
                                 
                                 	; Load Stack Pointer
                                 	; Y <- SP
00074b b7de                      	in YH, SPH
00074c b7cd                      	in YL, SPL
                                 
                                 	; Load Command Length
00074d 851b                      	ldd LEN, Y+(STACK_OFFSET + 5)
                                 
                                 	; l
00074e 3011                      	cpi LEN, 1
00074f f5c1                      	brne LIST_REPEAT_CMD_ERR
                                 
000750 e0d1                      	ldi YH, HIGH(REPEAT_IDX)
000751 e0cd                      	ldi YL, LOW (REPEAT_IDX)
                                 
                                 	; Get Commands Count
000752 8108                      	ld IDX, Y
                                 
000753 3000                      	cpi IDX, 0
000754 f1d1                      	breq LIST_REPEAT_CMD_RET
                                 
                                 	; Get Data Location
000755 e0d0                      	ldi YH, HIGH(REPEAT_CMDS)
000756 e8c1                      	ldi YL, LOW (REPEAT_CMDS)
                                 
000757 e020                      	ldi CNTR, 0
                                 
                                 	LIST_REPEAT_CMD_PRINT_LOOP:
000758 e03e                      		ldi TEMP, HIGH(LIST_REPEAT_CMD_INTERVAL << 1)
000759 933f                      		push TEMP
00075a e434                      		ldi TEMP, LOW (LIST_REPEAT_CMD_INTERVAL << 1)
00075b 933f                      		push TEMP
00075c d9e8                      		rcall PUTSTR
00075d 913f                      		pop TEMP
00075e 913f                      		pop TEMP
                                 
                                 		; Get Interval
00075f 9621                      		adiw YH:YL, 1
000760 9139                      		ld TEMP, Y+
                                 
                                 		; Print Interval
000761 933f                      		push TEMP
000762 933f                      		push TEMP
000763 d93b                      		rcall HEX_BYTE_TO_ASCII
                                 		; Get Least Significant Char
000764 913f                      		pop TEMP
000765 d9d2                      		rcall PUTCHAR
000766 933f                      		push TEMP
000767 d9d0                      		rcall PUTCHAR
000768 913f                      		pop TEMP
000769 913f                      		pop TEMP
                                 
00076a e03e                      		ldi TEMP, HIGH(LIST_REPEAT_CMD_CMD << 1)
00076b 933f                      		push TEMP
00076c e43c                      		ldi TEMP, LOW (LIST_REPEAT_CMD_CMD << 1)
00076d 933f                      		push TEMP
00076e d9d6                      		rcall PUTSTR
00076f 913f                      		pop TEMP
000770 913f                      		pop TEMP
                                 
                                 		; Get Command Length
000771 9119                      		ld LEN, Y+
                                 
000772 932f                      		push CNTR
000773 e020                      		ldi CNTR, 0
                                 
                                 		LIST_REPEAT_CMD_PRINT_LOOP_INNER:
000774 9139                      			ld TEMP, Y+
000775 933f                      			push TEMP
000776 d9c1                      			rcall PUTCHAR
000777 913f                      			pop TEMP
000778 9523                      			inc CNTR
000779 1721                      			cp CNTR, LEN
00077a f3c8                      			brlo LIST_REPEAT_CMD_PRINT_LOOP_INNER
                                 
00077b e03d                      		ldi TEMP, ASCII_NEW_LINE
00077c 933f                      		push TEMP
00077d d9ba                      		rcall PUTCHAR
00077e 913f                      		pop TEMP
                                 
00077f ee30                      		ldi TEMP, (-1 * CMD_MAX_LEN)
000780 0f31                      		add TEMP, LEN
000781 1bc3                      		sub YL, TEMP
000782 40d0                      		sbci YH, 0
                                 
000783 912f                      		pop CNTR
000784 9523                      		inc CNTR
000785 1720                      		cp CNTR, IDX
000786 f288                      		brlo LIST_REPEAT_CMD_PRINT_LOOP
                                 
000787 c007                      	rjmp LIST_REPEAT_CMD_RET
                                 
                                 	LIST_REPEAT_CMD_ERR:
000788 e03e                      		ldi TEMP, HIGH(LIST_REPEAT_CMD_ERR_MSG << 1)
000789 933f                      		push TEMP
00078a e536                      		ldi TEMP, LOW (LIST_REPEAT_CMD_ERR_MSG << 1)
00078b 933f                      		push TEMP
00078c d9b8                      		rcall PUTSTR
00078d 913f                      		pop TEMP
00078e 913f                      		pop TEMP
                                 
                                 	LIST_REPEAT_CMD_RET:
                                 		; Restore Registers
00078f 91cf                      		pop YL
000790 91df                      		pop YH
000791 913f                      		pop TEMP
000792 912f                      		pop CNTR
000793 911f                      		pop LEN
000794 910f                      		pop IDX
                                 
000795 9508                      		ret
                                 
                                 	.undef IDX
                                 	.undef LEN
                                 	.undef CNTR
                                 	.undef TEMP
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Repeat Command (Delete)
                                 ;;
                                 ;; Inputs:
                                 ;; - Command Length           <- SP + 5
                                 ;; - Command String Pointer H <- SP + 4
                                 ;; - Command String Pointer L <- SP + 3 (First Byte Before Return Address)
                                 ;;
                                 ;; Outputs:
                                 ;; - No Output                -> SP + 5
                                 ;; - No Output                -> SP + 4
                                 ;; - No Output                -> SP + 3 (First Byte Before Return Address)
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
000796 5245
000797 4f52
000798 3a52
000799 4920
00079a 766e
00079b 6c61
00079c 6469
00079d 4920
00079e 706e
00079f 7475
0007a0 4620
0007a1 726f
0007a2 6020
0007a3 6544
0007a4 656c
0007a5 6574
0007a6 6552
0007a7 6570
0007a8 7461
0007a9 6465
0007aa 6f43
0007ab 6d6d
0007ac 6e61
0007ad 7364
0007ae 0d60
0007af 0000                      DEL_REPEAT_CMD_ERR_MSG: .db "ERROR: Invalid Input For `DeleteRepeatedCommands`", ASCII_NEW_LINE, 0, 0
0007b0 6550
0007b1 6972
0007b2 646f
0007b3 6369
0007b4 4320
0007b5 6d6f
0007b6 616d
0007b7 646e
0007b8 4420
0007b9 6c65
0007ba 7465
0007bb 6465
0007bc 000d                      DEL_REPEAT_CMD_SUC_MSG: .db "Periodic Command Deleted", ASCII_NEW_LINE, 0
                                 
                                 
                                 DEL_REPEAT_CMD:
                                 	.def IDX  = R16
                                 	.def LEN  = R17
                                 	.def TEMP = R18
                                 
                                 	; Number of pushes
                                 	.set STACK_OFFSET = 7
                                 	; Backup Registers
0007bd 930f                      	push IDX
0007be 931f                      	push LEN
0007bf 932f                      	push TEMP
0007c0 93df                      	push YH
0007c1 93cf                      	push YL
0007c2 93ff                      	push ZH
0007c3 93ef                      	push ZL
                                 
                                 	; Load Stack Pointer
                                 	; Y <- SP
0007c4 b7de                      	in YH, SPH
0007c5 b7cd                      	in YL, SPL
                                 
                                 	; Load Command Length
0007c6 851c                      	ldd LEN, Y+(STACK_OFFSET + 5)
                                 
                                 	; d II
0007c7 3014                      	cpi LEN, 4
0007c8 f491                      	brne DEL_REPEAT_CMD_ERR
                                 
                                 	; Load Command Pointer
0007c9 85fb                      	ldd ZH, Y+(STACK_OFFSET + 4)
0007ca 85ea                      	ldd ZL, Y+(STACK_OFFSET + 3)
                                 
0007cb 9632                      	adiw ZH:ZL, 2
                                 
0007cc e020                      	ldi TEMP, 0
0007cd 932f                      	push TEMP
0007ce 93ff                      	push ZH
0007cf 93ef                      	push ZL
0007d0 d865                      	rcall ASCII_WORD_TO_HEX
0007d1 910f                      	pop IDX
0007d2 912f                      	pop TEMP
0007d3 912f                      	pop TEMP
                                 	; IF (SUBROUTINE ERR != 0) THEN ERR
0007d4 3020                      	cpi TEMP, 0
0007d5 f429                      	brne DEL_REPEAT_CMD_ERR
                                 
0007d6 e0d1                      	ldi YH, HIGH(REPEAT_IDX)
0007d7 e0cd                      	ldi YL, LOW (REPEAT_IDX)
                                 
                                 	; Get Commands Count
0007d8 8128                      	ld TEMP, Y
                                 
                                 	; Can't Delete Command That Does Not Exist
0007d9 1702                      	cp IDX, TEMP
0007da f040                      	brlo DEL_REPEAT_CMD_NO_ERR
                                 
                                 	DEL_REPEAT_CMD_ERR:
0007db e02f                      		ldi TEMP, HIGH(DEL_REPEAT_CMD_ERR_MSG << 1)
0007dc 932f                      		push TEMP
0007dd e22c                      		ldi TEMP, LOW (DEL_REPEAT_CMD_ERR_MSG << 1)
0007de 932f                      		push TEMP
0007df d965                      		rcall PUTSTR
0007e0 912f                      		pop TEMP
0007e1 912f                      		pop TEMP
0007e2 c035                      		rjmp DEL_REPEAT_CMD_RET
                                 
                                 	DEL_REPEAT_CMD_NO_ERR:
                                 
0007e3 952a                      	dec TEMP
0007e4 8328                      	st Y, TEMP
                                 
                                 	; Done If Deleting Last Command
0007e5 1702                      	cp IDX, TEMP
0007e6 f151                      	breq DEL_REPEAT_CMD_RET_PRINT
                                 
                                 	; Get Location Of Deleted Element
0007e7 e0d0                      	ldi YH, HIGH(REPEAT_CMDS)
0007e8 e8c1                      	ldi YL, LOW (REPEAT_CMDS)
                                 
0007e9 932f                      	push TEMP
0007ea 930f                      	push IDX
                                 
                                 	DEL_REPEAT_CMD_PTR_LOOP:
0007eb 3000                      		cpi IDX, 0
0007ec f021                      		breq DEL_REPEAT_CMD_PTR_LOOP_EXIT
0007ed 5dcd                      		subi YL, -REPEAT_CMD_LEN
0007ee 40d0                      		sbci YH, 0
0007ef 950a                      		dec IDX
0007f0 cffa                      		rjmp DEL_REPEAT_CMD_PTR_LOOP
                                 
                                 	DEL_REPEAT_CMD_PTR_LOOP_EXIT:
                                 
                                 	; How Many Times To Copy
0007f1 910f                      	pop IDX
0007f2 912f                      	pop TEMP
0007f3 1b20                      	sub TEMP, IDX
0007f4 2f02                      	mov IDX, TEMP
                                 
                                 	; Get Location Of Next Element
0007f5 2ffd                      	mov ZH, YH
0007f6 2fec                      	mov ZL, YL
0007f7 5ded                      	subi ZL, -REPEAT_CMD_LEN
0007f8 40f0                      	sbci ZH, 0
                                 
                                 	DEL_REPEAT_CMD_COPY_LOOP:
0007f9 3000                      		cpi IDX, 0
0007fa f0b1                      		breq DEL_REPEAT_CMD_RET_PRINT
                                 
0007fb 9121                      		ld TEMP, Z+
0007fc 9329                      		st Y+, TEMP
0007fd 9121                      		ld TEMP, Z+
0007fe 9329                      		st Y+, TEMP
0007ff 9111                      		ld LEN, Z+
000800 9319                      		st Y+, LEN
                                 
000801 931f                      		push LEN
                                 
                                 		DEL_REPEAT_CMD_COPY_LOOP_INNER:
000802 3010                      			cpi LEN, 0
000803 f021                      			breq DEL_REPEAT_CMD_COPY_LOOP_INNER_EXIT
000804 9121                      			ld TEMP, Z+
000805 9329                      			st Y+, TEMP
000806 951a                      			dec LEN
000807 cffa                      			rjmp DEL_REPEAT_CMD_COPY_LOOP_INNER
                                 
                                 		DEL_REPEAT_CMD_COPY_LOOP_INNER_EXIT:
                                 
000808 911f                      		pop LEN
                                 
000809 950a                      		dec IDX
00080a ee20                      		ldi TEMP, (-1 * CMD_MAX_LEN)
00080b 0f21                      		add TEMP, LEN
00080c 1bc2                      		sub YL, TEMP
00080d 40d0                      		sbci YH, 0
00080e 1be2                      		sub ZL, TEMP
00080f 40f0                      		sbci ZH, 0
000810 cfe8                      		rjmp DEL_REPEAT_CMD_COPY_LOOP
                                 
                                 	DEL_REPEAT_CMD_RET_PRINT:
000811 e02f                      		ldi TEMP, HIGH(DEL_REPEAT_CMD_SUC_MSG << 1)
000812 932f                      		push TEMP
000813 e620                      		ldi TEMP, LOW (DEL_REPEAT_CMD_SUC_MSG << 1)
000814 932f                      		push TEMP
000815 d92f                      		rcall PUTSTR
000816 912f                      		pop TEMP
000817 912f                      		pop TEMP
                                 
                                 	DEL_REPEAT_CMD_RET:
                                 		; Restore Registers
000818 91ef                      		pop ZL
000819 91ff                      		pop ZH
00081a 91cf                      		pop YL
00081b 91df                      		pop YH
00081c 912f                      		pop TEMP
00081d 911f                      		pop LEN
00081e 910f                      		pop IDX
                                 
00081f 9508                      		ret
                                 
                                 	.undef IDX
                                 	.undef LEN
                                 	.undef TEMP
                                 
                                 CLEAR_LINE:
                                 	.def TEMP = R16
                                 	.def LEN  = R17
                                 
                                 	; Backup Registers
000820 930f                      	push TEMP
000821 931f                      	push LEN
000822 93df                      	push YH
000823 93cf                      	push YL
                                 
000824 e0d0                      	ldi YH, HIGH(CMD_IDX)
000825 e8c0                      	ldi YL, LOW (CMD_IDX)
000826 8118                      	ld LEN, Y
000827 5f1a                      	subi LEN, -PROMPT_LEN
                                 
000828 e008                      	ldi TEMP, ASCII_BACKSPACE
000829 930f                      	push TEMP
                                 
00082a 2f01                      	mov TEMP, LEN
                                 
                                 	CLEAR_LINE_BACKSPACE_LOOP_1:
00082b d90c                      		rcall PUTCHAR
00082c 950a                      		dec TEMP
00082d 3000                      		cpi TEMP, 0
00082e f7e1                      		brne CLEAR_LINE_BACKSPACE_LOOP_1
                                 
00082f 910f                      	pop TEMP
                                 
000830 e200                      	ldi TEMP, ASCII_SPACE
000831 930f                      	push TEMP
                                 
000832 2f01                      	mov TEMP, LEN
                                 
                                 	CLEAR_LINE_SPACE_LOOP:
000833 d904                      		rcall PUTCHAR
000834 950a                      		dec TEMP
000835 3000                      		cpi TEMP, 0
000836 f7e1                      		brne CLEAR_LINE_SPACE_LOOP
                                 
000837 910f                      	pop TEMP
                                 
000838 e008                      	ldi TEMP, ASCII_BACKSPACE
000839 930f                      	push TEMP
                                 
00083a 2f01                      	mov TEMP, LEN
                                 
                                 	CLEAR_LINE_BACKSPACE_LOOP_2:
00083b d8fc                      		rcall PUTCHAR
00083c 950a                      		dec TEMP
00083d 3000                      		cpi TEMP, 0
00083e f7e1                      		brne CLEAR_LINE_BACKSPACE_LOOP_2
                                 
00083f 910f                      	pop TEMP
                                 	
                                 	; Restore Registers
000840 91cf                      	pop YL
000841 91df                      	pop YH
000842 911f                      	pop LEN
000843 910f                      	pop TEMP
                                 	
000844 9508                      	ret
                                 
                                 	.undef TEMP
                                 	.undef LEN
                                 
                                 DIRTY_LINE:
                                 	.def TEMP = R16
                                 	.def LEN  = R17
                                 
                                 	; Backup Registers
000845 930f                      	push TEMP
000846 931f                      	push LEN
000847 93df                      	push YH
000848 93cf                      	push YL
                                 
                                 	; Print Prompt
000849 e00b                      	ldi TEMP, HIGH(PROMPT << 1)
00084a 930f                      	push TEMP
00084b e30c                      	ldi TEMP, LOW (PROMPT << 1)
00084c 930f                      	push TEMP
00084d d8f7                      	rcall PUTSTR
00084e 910f                      	pop TEMP
00084f 910f                      	pop TEMP
                                 
000850 e0d0                      	ldi YH, HIGH(CMD_IDX)
000851 e8c0                      	ldi YL, LOW (CMD_IDX)
000852 8118                      	ld LEN, Y
                                 
000853 3010                      	cpi LEN, 0
000854 f049                      	breq DIRTY_LINE_RET
                                 
000855 e0d0                      	ldi YH, HIGH(CMD)
000856 e6c0                      	ldi YL, LOW (CMD)
                                 
                                 	DIRTY_LINE_LOOP:
000857 9109                      		ld TEMP, Y+
000858 930f                      		push TEMP
000859 d8de                      		rcall PUTCHAR
00085a 910f                      		pop TEMP
00085b 951a                      		dec LEN
00085c 3010                      		cpi LEN, 0
00085d f7c9                      		brne DIRTY_LINE_LOOP
                                 
                                 	DIRTY_LINE_RET:
                                 		; Restore Registers
00085e 91cf                      		pop YL
00085f 91df                      		pop YH
000860 911f                      		pop LEN
000861 910f                      		pop TEMP
                                 	
000862 9508                      		ret
                                 
                                 	.undef TEMP
                                 	.undef LEN


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega32" register use summary:
x  :   1 y  :  70 z  :  35 r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 359 r17:  94 r18:  93 r19:  78 r20:   0 
r21:   0 r22:   0 r23:   0 r24:   0 r25:   0 r26:   6 r27:   6 r28:  83 
r29:  83 r30:  89 r31:  89 
Registers used: 13 out of 35 (37.1%)

"ATmega32" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   2 add   :   4 adiw  :  26 and   :   0 
andi  :   2 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :  19 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :  14 brlt  :   0 brmi  :   0 
brne  :  39 brpl  :   0 brsh  :   2 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   0 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   4 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :  14 cpc   :   0 
cpi   :  56 cpse  :   0 dec   :  12 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :  37 inc   :   9 jmp   :   3 
ld    :  29 ldd   :  36 ldi   : 121 lds   :   0 lpm   :  14 lsl   :   4 
lsr   :   1 mov   :  11 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   0 or    :   1 ori   :   0 out   :  14 pop   : 235 
push  : 233 rcall :  69 ret   :  18 reti  :   2 rjmp  :  33 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   7 sbi   :   0 sbic  :   0 sbis  :   1 
sbiw  :   1 sbr   :   0 sbrc  :   0 sbrs  :   1 sec   :   0 seh   :   0 
sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :  20 std   :  14 sts   :   0 
sub   :   4 subi  :  11 swap  :   1 tst   :   0 wdr   :   0 
Instructions used: 40 out of 113 (35.4%)

"ATmega32" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0010c6   2242   2008   4250   32768  13.0%
[.dseg] 0x000060 0x00010e      0    174    174    2048   8.5%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
