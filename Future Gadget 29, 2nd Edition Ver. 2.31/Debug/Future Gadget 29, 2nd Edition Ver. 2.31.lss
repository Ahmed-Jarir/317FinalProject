
AVRASM ver. 2.2.8  C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\main.asm Fri Jan 19 02:51:55 2024

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m32def.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\main.asm(105): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\ascii.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\main.asm(106): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\io.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\main.asm(107): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\read-mem.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\read-mem.inc(18): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\ascii.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\read-mem.inc(19): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\io.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\main.asm(108): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\write-mem.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\write-mem.inc(18): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\ascii.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\write-mem.inc(19): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\io.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\main.asm(109): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\read-io.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\read-io.inc(18): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\ascii.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\read-io.inc(19): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\io.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\read-io.inc(20): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\io-name-to-addr.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\main.asm(110): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\write-io.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\write-io.inc(18): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\ascii.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\write-io.inc(19): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\io.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\write-io.inc(20): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\io-name-to-addr.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m32def.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\main.asm(105): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\ascii.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\main.asm(106): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\io.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\main.asm(107): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\read-mem.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\read-mem.inc(18): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\ascii.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\read-mem.inc(19): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\io.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\main.asm(108): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\write-mem.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\write-mem.inc(18): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\ascii.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\write-mem.inc(19): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\io.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\main.asm(109): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\read-io.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\read-io.inc(18): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\ascii.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\read-io.inc(19): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\io.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\read-io.inc(20): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\io-name-to-addr.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\main.asm(110): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\write-io.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\write-io.inc(18): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\ascii.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\write-io.inc(19): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\io.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\write-io.inc(20): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\io-name-to-addr.inc'
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega32.xml ************
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m32def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega32
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega32
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M32DEF_INC_
                                 #define _M32DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega32
                                 #pragma AVRPART ADMIN PART_NAME ATmega32
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x02
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	OCR0	= 0x3c
                                 .equ	GICR	= 0x3b
                                 .equ	GIFR	= 0x3a
                                 .equ	TIMSK	= 0x39
                                 .equ	TIFR	= 0x38
                                 .equ	SPMCR	= 0x37
                                 .equ	TWCR	= 0x36
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUCSR	= 0x34
                                 .equ	TCCR0	= 0x33
                                 .equ	TCNT0	= 0x32
                                 .equ	OSCCAL	= 0x31
                                 .equ	OCDR	= 0x31
                                 .equ	SFIOR	= 0x30
                                 .equ	TCCR1A	= 0x2f
                                 .equ	TCCR1B	= 0x2e
                                 .equ	TCNT1L	= 0x2c
                                 .equ	TCNT1H	= 0x2d
                                 .equ	OCR1AL	= 0x2a
                                 .equ	OCR1AH	= 0x2b
                                 .equ	OCR1BL	= 0x28
                                 .equ	OCR1BH	= 0x29
                                 .equ	ICR1L	= 0x26
                                 .equ	ICR1H	= 0x27
                                 .equ	TCCR2	= 0x25
                                 .equ	TCNT2	= 0x24
                                 .equ	OCR2	= 0x23
                                 .equ	ASSR	= 0x22
                                 .equ	WDTCR	= 0x21
                                 .equ	UBRRH	= 0x20
                                 .equ	UCSRC	= 0x20
                                 .equ	EEARL	= 0x1e
                                 .equ	EEARH	= 0x1f
                                 .equ	EEDR	= 0x1d
                                 .equ	EECR	= 0x1c
                                 .equ	PORTA	= 0x1b
                                 .equ	DDRA	= 0x1a
                                 .equ	PINA	= 0x19
                                 .equ	PORTB	= 0x18
                                 .equ	DDRB	= 0x17
                                 .equ	PINB	= 0x16
                                 .equ	PORTC	= 0x15
                                 .equ	DDRC	= 0x14
                                 .equ	PINC	= 0x13
                                 .equ	PORTD	= 0x12
                                 .equ	DDRD	= 0x11
                                 .equ	PIND	= 0x10
                                 .equ	SPDR	= 0x0f
                                 .equ	SPSR	= 0x0e
                                 .equ	SPCR	= 0x0d
                                 .equ	UDR	= 0x0c
                                 .equ	UCSRA	= 0x0b
                                 .equ	UCSRB	= 0x0a
                                 .equ	UBRRL	= 0x09
                                 .equ	ACSR	= 0x08
                                 .equ	ADMUX	= 0x07
                                 .equ	ADCSRA	= 0x06
                                 .equ	ADCH	= 0x05
                                 .equ	ADCL	= 0x04
                                 .equ	TWDR	= 0x03
                                 .equ	TWAR	= 0x02
                                 .equ	TWSR	= 0x01
                                 .equ	TWBR	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEWE	= 1	; EEPROM Write Enable
                                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDTOE	= 4	; RW
                                 .equ	WDDE	= WDTOE	; For compatibility
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; GICR - General Interrupt Control Register
                                 .equ	GIMSK	= GICR	; For compatibility
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	INT2	= 5	; External Interrupt Request 2 Enable
                                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 7	; External Interrupt Request 1 Enable
                                 
                                 ; GIFR - General Interrupt Flag Register
                                 .equ	INTF2	= 5	; External Interrupt Flag 2
                                 .equ	INTF0	= 6	; External Interrupt Flag 0
                                 .equ	INTF1	= 7	; External Interrupt Flag 1
                                 
                                 ; MCUCR - General Interrupt Control Register
                                 .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	ISC2	= 6	; Interrupt Sense Control 2
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TCCR0 - Timer/Counter Control Register
                                 .equ	CS00	= 0	; Clock Select 1
                                 .equ	CS01	= 1	; Clock Select 1
                                 .equ	CS02	= 2	; Clock Select 2
                                 .equ	WGM01	= 3	; Waveform Generation Mode 1
                                 .equ	CTC0	= WGM01	; For compatibility
                                 .equ	COM00	= 4	; Compare match Output Mode 0
                                 .equ	COM01	= 5	; Compare Match Output Mode 1
                                 .equ	WGM00	= 6	; Waveform Generation Mode
                                 .equ	PWM0	= WGM00	; For compatibility
                                 .equ	FOC0	= 7	; Force Output Compare
                                 
                                 ; TCNT0 - Timer/Counter Register
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0 - Output Compare Register
                                 .equ	OCR0_0	= 0	; 
                                 .equ	OCR0_1	= 1	; 
                                 .equ	OCR0_2	= 2	; 
                                 .equ	OCR0_3	= 3	; 
                                 .equ	OCR0_4	= 4	; 
                                 .equ	OCR0_5	= 5	; 
                                 .equ	OCR0_6	= 6	; 
                                 .equ	OCR0_7	= 7	; 
                                 
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0	= 1	; Timer/Counter0 Output Compare Match Interrupt register
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0	= 1	; Output Compare Flag 0
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 6	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	OCIE2	= 7	; Timer/Counter2 Output Compare Match Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2	= 7	; Output Compare Flag 2
                                 
                                 ; TCCR2 - Timer/Counter2 Control Register
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM21	= 3	; Clear Timer/Counter2 on Compare Match
                                 .equ	CTC2	= WGM21	; For compatibility
                                 .equ	COM20	= 4	; Compare Output Mode bit 0
                                 .equ	COM21	= 5	; Compare Output Mode bit 1
                                 .equ	WGM20	= 6	; Pulse Width Modulator Enable
                                 .equ	PWM2	= WGM20	; For compatibility
                                 .equ	FOC2	= 7	; Force Output Compare
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2 - Timer/Counter2 Output Compare Register
                                 .equ	OCR2_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2UB	= 0	; Timer/counter Control Register2 Update Busy
                                 .equ	OCR2UB	= 1	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 2	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 3	; Asynchronous Timer/counter2
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	PWM10	= WGM10	; For compatibility
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	PWM11	= WGM11	; For compatibility
                                 .equ	FOC1B	= 2	; Force Output Compare 1B
                                 .equ	FOC1A	= 3	; Force Output Compare 1A
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	CTC10	= WGM12	; For compatibility
                                 .equ	CTC1	= WGM12	; For compatibility
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	CTC11	= WGM13	; For compatibility
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** USART ************************
                                 ; UDR - USART I/O Data Register
                                 .equ	UDR0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSRA - USART Control and Status Register A
                                 .equ	USR	= UCSRA	; For compatibility
                                 .equ	MPCM	= 0	; Multi-processor Communication Mode
                                 .equ	U2X	= 1	; Double the USART transmission speed
                                 .equ	UPE	= 2	; Parity Error
                                 .equ	PE	= UPE	; For compatibility
                                 .equ	DOR	= 3	; Data overRun
                                 .equ	FE	= 4	; Framing Error
                                 .equ	UDRE	= 5	; USART Data Register Empty
                                 .equ	TXC	= 6	; USART Transmitt Complete
                                 .equ	RXC	= 7	; USART Receive Complete
                                 
                                 ; UCSRB - USART Control and Status Register B
                                 .equ	UCR	= UCSRB	; For compatibility
                                 .equ	TXB8	= 0	; Transmit Data Bit 8
                                 .equ	RXB8	= 1	; Receive Data Bit 8
                                 .equ	UCSZ2	= 2	; Character Size
                                 .equ	CHR9	= UCSZ2	; For compatibility
                                 .equ	TXEN	= 3	; Transmitter Enable
                                 .equ	RXEN	= 4	; Receiver Enable
                                 .equ	UDRIE	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSRC - USART Control and Status Register C
                                 .equ	UCPOL	= 0	; Clock Polarity
                                 .equ	UCSZ0	= 1	; Character Size
                                 .equ	UCSZ1	= 2	; Character Size
                                 .equ	USBS	= 3	; Stop Bit Select
                                 .equ	UPM0	= 4	; Parity Mode Bit 0
                                 .equ	UPM1	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL	= 6	; USART Mode Select
                                 .equ	URSEL	= 7	; Register Select
                                 
                                 .equ	UBRRHI	= UBRRH	; For compatibility
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; SFIOR - Special Function IO Register
                                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register
                                 .equ	ADCSR	= ADCSRA	; For compatibility
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; When this bit is written to one,the Timer/Counter2 prescaler will be reset.The bit will be cleared by hardware after the operation is performed.Writing a zero to this bit will have no effect.This bit will always be read as zero if Timer/C                                 ounter2 is clocked by the internal CPU clock.If this bit is written when Timer/Counter2 is operating in asynchronous mode,the bit will remain one until the prescaler has been reset.
                                 .equ	ADFR	= ADATE	; For compatibility
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	ADTS0	= 5	; ADC Auto Trigger Source 0
                                 .equ	ADTS1	= 6	; ADC Auto Trigger Source 1
                                 .equ	ADTS2	= 7	; ADC Auto Trigger Source 2
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 ;.equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 ;.equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 ;.equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 ;.equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 .equ	SM0	= 4	; Sleep Mode Select
                                 .equ	SM1	= 5	; Sleep Mode Select
                                 .equ	SM2	= 6	; Sleep Mode Select
                                 .equ	SE	= 7	; Sleep Enable
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	MCUSR	= MCUCSR	; For compatibility
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	PSR10	= 0	; Prescaler Reset Timer/Counter1&0
                                 .equ	PSR2	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PUD	= 2	; Pull-up Disable
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	ASRE	= RWWSRE	; For compatibility
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	ASB	= RWWSB	; For compatibility
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler bits
                                 .equ	TWPS1	= 1	; TWI Prescaler bits
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	BODEN	= 6	; Brown out detector enable
                                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x003f
                                 .equ	SRAM_START	= 0x0060
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x085f
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	OC2addr	= 0x0008	; Timer/Counter2 Compare Match
                                 .equ	OVF2addr	= 0x000a	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x000c	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x000e	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0010	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x0012	; Timer/Counter1 Overflow
                                 .equ	OC0addr	= 0x0014	; Timer/Counter0 Compare Match
                                 .equ	OVF0addr	= 0x0016	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0018	; Serial Transfer Complete
                                 .equ	URXCaddr	= 0x001a	; USART, Rx Complete
                                 .equ	UDREaddr	= 0x001c	; USART Data Register Empty
                                 .equ	UTXCaddr	= 0x001e	; USART, Tx Complete
                                 .equ	ADCCaddr	= 0x0020	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x0022	; EEPROM Ready
                                 .equ	ACIaddr	= 0x0024	; Analog Comparator
                                 .equ	TWIaddr	= 0x0026	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0028	; Store Program Memory Ready
                                 
                                 .equ	INT_VECTORS_SIZE	= 42	; size in words
                                 
                                 #endif  /* _M32DEF_INC_ */
                                 
                                 
                                 ;
                                 ; Future Gadget 29, 2nd Edition Ver. 2.31
                                 ;
                                 ; COMP317 Final Project
                                 ;
                                 ; Authors:
                                 ; - Ameer Taweel (0077340)
                                 ; - Ahmed Jareer (0074982)
                                 ;
                                 ; Resources Usage:
                                 ; - Program Size: 4238 Bytes
                                 ; - Data    Size: 174  Bytes
                                 ;
                                 ; Summary:
                                 ;
                                 ; Multiple times during this course, we faced a situation where the code works
                                 ; in the debugger/simulator but not on the physical microcontroller. Debugging
                                 ; and fixing such issues was hard because we couldn't inspect the system's
                                 ; internal state.
                                 ;
                                 ; Therefore, built a system that is easy to inspect. It exposes a shell using
                                 ; the ANSI standard over USART. The system has commands to check the system's
                                 ; state, like memory regions and I/O pin values. Moreover, the system supports
                                 ; periodic tasks, like logging a memory region every two minutes.
                                 ;
                                 ; It also has commands for modifying the system's state, like setting a memory
                                 ; region or setting the mode of an I/O pin.
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; # Code Style
                                 ;;
                                 ;;   - No global register aliases.
                                 ;;   - Capitalize all user-defined names (constants, register aliases, labels).
                                 ;;   - Pass subroutine parameters using the stack.
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; # Constants
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 ; Baud Rate in Bits Per Second (bps)
                                 .equ BAUD_RATE = 9600
                                 ; System Clock Frequency
                                 .equ F_CLK     = 4 * 1024 * 1024
                                 ; System Oscillator Clock Frequency
                                 .equ F_OSC     = 4 * 1000 * 1000
                                 ; Contents of the UBRRH and UBRRL Registers (0 - 4095)
                                 ; Asynchronous Normal Mode (U2X = 0)
                                 .equ BAUD_UBRR = (F_OSC / (16 * BAUD_RATE)) - 1
                                 
                                 .equ T1_PRESCALE = 1024
                                 .equ T1_MAX_VAL  = (F_CLK / T1_PRESCALE) - 1
                                 
                                 ; Maximum Command Length
                                 .equ CMD_MAX_LEN     = 32
                                 .equ MAX_REPEAT_CMDS = 4
                                 ; 1           Byte  -> Counter
                                 ; 1           Byte  -> Interval
                                 ; 1           Byte  -> Command Length
                                 ; CMD_MAX_LEN Bytes -> Command
                                 .equ REPEAT_CMD_LEN  = CMD_MAX_LEN + 3
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; # Data Segment
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 ; Data Segment Start
                                 .dseg
                                 
000060                           CMD    : .byte CMD_MAX_LEN
000080                           CMD_IDX: .byte 1
                                 
000081                           REPEAT_CMDS: .byte REPEAT_CMD_LEN * MAX_REPEAT_CMDS
00010d                           REPEAT_IDX : .byte 1
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; # Interrupt Vector Table
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 ; Code Segment Start
                                 .cseg
                                 
                                 .org 0x0000
000000 940c 05b2                 	jmp RESET
                                 .org 0x000E
00000e 940c 061e                 	jmp T1_COMPA
                                 .org 0x001A 
00001a 940c 05d0                 	jmp USART_RX_COMPLETE
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; # Imports
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 .INCLUDE "ascii.inc"
                                 
                                 ;; Include Guard
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 .ifdef INCLUDE_ASCII
                                 .endif
                                 
                                 .equ INCLUDE_ASCII = 1
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; ASCII Codes
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 .equ ASCII_BACKSPACE = 0x08
                                 .equ ASCII_NEW_LINE  = 0x0D
                                 .equ ASCII_SPACE     = 0x20
                                 .equ ASCII_ZERO      = 0x30
                                 .equ ASCII_NINE      = 0x39
                                 .equ ASCII_ARROW_R   = 0x3E
                                 .equ ASCII_UPPER_A   = 0x41
                                 .equ ASCII_UPPER_E   = 0x45
                                 .equ ASCII_UPPER_F   = 0x46
                                 .equ ASCII_UPPER_G   = 0x47
                                 .equ ASCII_LOWER_A   = 0x61
                                 .equ ASCII_LOWER_D   = 0x64
                                 .equ ASCII_LOWER_F   = 0x66
                                 .equ ASCII_LOWER_G   = 0x67
                                 .equ ASCII_LOWER_I   = 0x69
                                 .equ ASCII_LOWER_L   = 0x6C
                                 .equ ASCII_LOWER_O   = 0x6F
                                 .equ ASCII_LOWER_P   = 0x70
                                 .equ ASCII_LOWER_R   = 0x72
                                 .equ ASCII_LOWER_S   = 0x73
                                 .equ ASCII_LOWER_W   = 0x77
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Parse ASCII Character As Hex
                                 ;;
                                 ;; Inputs:
                                 ;; - Constant Zero <- SP + 4
                                 ;; - ASCII    Char <- SP + 3 (First Byte Before Return Address)
                                 ;;
                                 ;; Outputs:
                                 ;; - Error Status  -> SP + 4
                                 ;; - Hex   Digit   -> SP + 3 (First Byte Before Return Address)
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 ASCII_BYTE_TO_HEX:
                                 	.def CHAR = R16
                                 
                                 	; Number of pushes
                                 	.set STACK_OFFSET = 5
                                 	; Backup Registers
00001c 930f                      	push CHAR
00001d 93df                      	push YH
00001e 93cf                      	push YL
00001f 93ff                      	push ZH
000020 93ef                      	push ZL
                                 
                                 	; Load Stack Pointer
                                 	; Y <- SP
000021 b7de                      	in YH, SPH
000022 b7cd                      	in YL, SPL
                                 
                                 	; Load ASCII Character
000023 8508                      	ldd CHAR, Y+(STACK_OFFSET + 3)
                                 
000024 e0f1                      	ldi ZH, HIGH(ASCII_TO_HEX_LOOKUP_TABLE << 1)
000025 e7e0                      	ldi ZL, LOW (ASCII_TO_HEX_LOOKUP_TABLE << 1)
                                 
000026 0fe0                      	add ZL, CHAR
000027 e000                      	ldi CHAR, 0
000028 1ff0                      	adc ZH, CHAR
                                 
000029 9104                      	lpm CHAR, Z
                                 
00002a 3100                      	cpi CHAR, 16
                                 	; CHAR Invalid
00002b f410                      	brsh ASCII_BYTE_TO_HEX_ERR
00002c 8708                      	std Y+(STACK_OFFSET + 3), CHAR
00002d c002                      	rjmp ASCII_BYTE_TO_HEX_RET
                                 
                                 	ASCII_BYTE_TO_HEX_ERR:
                                 		; Error Status <- True
00002e e001                      		ldi CHAR, 1
00002f 8709                      		std Y+(STACK_OFFSET + 4), CHAR
                                 
                                 	ASCII_BYTE_TO_HEX_RET:
                                 		; Restore Registers
000030 91ef                      		pop ZL
000031 91ff                      		pop ZH
000032 91cf                      		pop YL
000033 91df                      		pop YH
000034 910f                      		pop CHAR
                                 
000035 9508                      		ret
                                 
                                 	.undef CHAR
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Parse Two ASCII Digits As Hex
                                 ;;
                                 ;; Inputs:
                                 ;; - Constant Zero          <- SP + 5
                                 ;; - ASCII String Pointer H <- SP + 4
                                 ;; - ASCII String Pointer L <- SP + 3 (First Byte Before Return Address)
                                 ;;
                                 ;; Outputs:
                                 ;; - Error Status           -> SP + 5
                                 ;; - No    Output           -> SP + 4
                                 ;; - Return Value           -> SP + 3 (First Byte Before Return Address)
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 ASCII_WORD_TO_HEX:
                                 	.def TEMP = R16
                                 	.def BYTE = R17
                                 
                                 	; Number of pushes
                                 	.set STACK_OFFSET = 6
                                 	; Backup Registers
000036 930f                      	push TEMP
000037 931f                      	push BYTE
000038 93df                      	push YH
000039 93cf                      	push YL
00003a 93ff                      	push ZH
00003b 93ef                      	push ZL
                                 
                                 	; Load Stack Pointer
                                 	; Y <- SP
00003c b7de                      	in YH, SPH
00003d b7cd                      	in YL, SPL
                                 
                                 	; Load String Address
00003e 85fa                      	ldd ZH, Y+(STACK_OFFSET + 4)
00003f 85e9                      	ldd ZL, Y+(STACK_OFFSET + 3)
                                 
                                 	; Push Zero To Stack
000040 e000                      	ldi TEMP, 0
000041 930f                      	push TEMP
                                 	; Load Most Significant ASCII Character
000042 9101                      	ld TEMP, Z+
                                 	; Push ASCII Character To Stack
000043 930f                      	push TEMP
000044 dfd7                      	rcall ASCII_BYTE_TO_HEX
                                 	; Get Return Value
000045 911f                      	pop BYTE
                                 	; Get Error Status
000046 910f                      	pop TEMP
                                 	; IF (SUBROUTINE ERR != 0) THEN ERR
000047 3000                      	cpi TEMP, 0
000048 f481                      	brne ASCII_WORD_TO_HEX_ERR
                                 
                                 	; Byte <- Byte << 4
000049 0f11                      	lsl BYTE
00004a 0f11                      	lsl BYTE
00004b 0f11                      	lsl BYTE
00004c 0f11                      	lsl BYTE
                                 
                                 	; Push Zero To Stack
00004d e000                      	ldi TEMP, 0
00004e 930f                      	push TEMP
                                 	; Load Most Significant ASCII Character
00004f 8100                      	ld TEMP, Z
                                 	; Push ASCII Character To Stack
000050 930f                      	push TEMP
000051 dfca                      	rcall ASCII_BYTE_TO_HEX
                                 	; Get Return Value
000052 910f                      	pop TEMP
                                 	; Append Return Value To Byte
000053 2b10                      	or BYTE, TEMP
                                 	; Get Error Status
000054 910f                      	pop TEMP
                                 	; IF (SUBROUTINE ERR != 0) THEN ERR
000055 3000                      	cpi TEMP, 0
000056 f411                      	brne ASCII_WORD_TO_HEX_ERR
                                 
                                 	; Return Valid Value
000057 8719                      	std Y+(STACK_OFFSET + 3), BYTE
000058 c002                      	rjmp ASCII_WORD_TO_HEX_RET
                                 
                                 	ASCII_WORD_TO_HEX_ERR:
000059 e001                      		ldi TEMP, 1
00005a 870b                      		std Y+(STACK_OFFSET + 5), TEMP
                                 
                                 	ASCII_WORD_TO_HEX_RET:
                                 		; Restore Registers
00005b 91ef                      		pop ZL
00005c 91ff                      		pop ZH
00005d 91cf                      		pop YL
00005e 91df                      		pop YH
00005f 911f                      		pop BYTE
000060 910f                      		pop TEMP
                                 
000061 9508                      		ret
                                 
                                 	.undef TEMP
                                 	.undef BYTE
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Parse Four ASCII Digits As Hex
                                 ;;
                                 ;; Inputs:
                                 ;; - Constant Zero          <- SP + 5
                                 ;; - ASCII String Pointer H <- SP + 4
                                 ;; - ASCII String Pointer L <- SP + 3 (First Byte Before Return Address)
                                 ;;
                                 ;; Outputs:
                                 ;; - Error Status           -> SP + 5
                                 ;; - Return Value H         -> SP + 4
                                 ;; - Return Value L         -> SP + 3 (First Byte Before Return Address)
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 ASCII_QUAD_TO_HEX:
                                 	.def TEMP  = R16
                                 	.def BYTEH = R17
                                 	.def BYTEL = R18
                                 
                                 	; Number of pushes
                                 	.set STACK_OFFSET = 7
                                 	; Backup Registers
000062 930f                      	push TEMP
000063 931f                      	push BYTEH
000064 932f                      	push BYTEL
000065 93df                      	push YH
000066 93cf                      	push YL
000067 93ff                      	push ZH
000068 93ef                      	push ZL
                                 
                                 	; Load Stack Pointer
                                 	; Y <- SP
000069 b7de                      	in YH, SPH
00006a b7cd                      	in YL, SPL
                                 
                                 	; Load String Address
00006b 85fb                      	ldd ZH, Y+(STACK_OFFSET + 4)
00006c 85ea                      	ldd ZL, Y+(STACK_OFFSET + 3)
                                 
                                 	; Push Arguments To Stack
00006d e000                      	ldi TEMP, 0
00006e 930f                      	push TEMP
00006f 93ff                      	push ZH
000070 93ef                      	push ZL
                                 	; Parse High Bytes
000071 dfc4                      	rcall ASCII_WORD_TO_HEX
                                 	; Get Return Value
000072 911f                      	pop BYTEH
                                 	; Discard Dummy Output
000073 910f                      	pop TEMP
                                 	; Get Error Status
000074 910f                      	pop TEMP
                                 	; IF (SUBROUTINE ERR != 0) THEN ERR
000075 3000                      	cpi TEMP, 0
000076 f471                      	brne ASCII_QUAD_TO_HEX_ERR
                                 
                                 	; Advance To Low Bytes
000077 9632                      	adiw ZH:ZL, 2
                                 
                                 	; Push Arguments To Stack
000078 e000                      	ldi TEMP, 0
000079 930f                      	push TEMP
00007a 93ff                      	push ZH
00007b 93ef                      	push ZL
                                 	; Parse Low Bytes
00007c dfb9                      	rcall ASCII_WORD_TO_HEX
                                 	; Get Return Value
00007d 912f                      	pop BYTEL
                                 	; Discard Dummy Output
00007e 910f                      	pop TEMP
                                 	; Get Error Status
00007f 910f                      	pop TEMP
                                 	; IF (SUBROUTINE ERR != 0) THEN ERR
000080 3000                      	cpi TEMP, 0
000081 f419                      	brne ASCII_QUAD_TO_HEX_ERR
                                 
                                 	; Return Valid Value
000082 871b                      	std Y+(STACK_OFFSET + 4), BYTEH
000083 872a                      	std Y+(STACK_OFFSET + 3), BYTEL
000084 c002                      	rjmp ASCII_QUAD_TO_HEX_RET
                                 
                                 	ASCII_QUAD_TO_HEX_ERR:
000085 e001                      		ldi TEMP, 1
000086 870c                      		std Y+(STACK_OFFSET + 5), TEMP
                                 
                                 	ASCII_QUAD_TO_HEX_RET:
                                 		; Restore Registers
000087 91ef                      		pop ZL
000088 91ff                      		pop ZH
000089 91cf                      		pop YL
00008a 91df                      		pop YH
00008b 912f                      		pop BYTEL
00008c 911f                      		pop BYTEH
00008d 910f                      		pop TEMP
                                 
00008e 9508                      		ret
                                 
                                 	.undef TEMP
                                 	.undef BYTEH
                                 	.undef BYTEL
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Convert Hex Nibble To ASCII Character
                                 ;;
                                 ;; Inputs:
                                 ;; - Nibble     <- SP + 3 (First Byte Before Return Address)
                                 ;;
                                 ;; Outputs:
                                 ;; - ASCII Char -> SP + 3 (First Byte Before Return Address)
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 HEX_NIBBLE_TO_ASCII:
                                 	.def NIBBLE = R16
                                 
                                 	; Number of pushes
                                 	.set STACK_OFFSET = 3
                                 	; Backup Registers
00008f 930f                      	push NIBBLE
000090 93df                      	push YH
000091 93cf                      	push YL
                                 
                                 	; Load Stack Pointer
                                 	; Y <- SP
000092 b7de                      	in YH, SPH
000093 b7cd                      	in YL, SPL
                                 
                                 	; Load Hex Nibble
000094 810e                      	ldd NIBBLE, Y+(STACK_OFFSET + 3)
                                 
000095 300a                      	cpi NIBBLE, 10
000096 f010                      	brlo HEX_NIBBLE_TO_ASCII_DIGIT
                                 
                                 	HEX_NIBBLE_TO_ASCII_CHAR:
                                 		; NIBBLE <- NIBBLE - 10 + ASCII_UPPER_A
000097 5c09                      		subi NIBBLE, (10 - ASCII_UPPER_A)
000098 c001                      		rjmp HEX_NIBBLE_TO_ASCII_RET
                                 
                                 	HEX_NIBBLE_TO_ASCII_DIGIT:
                                 		; NIBBLE <- NIBBLE + ASCII_ZERO
000099 5d00                      		subi NIBBLE, (-ASCII_ZERO)
                                 
                                 	HEX_NIBBLE_TO_ASCII_RET:
00009a 830e                      		std Y+(STACK_OFFSET + 3), NIBBLE
                                 
                                 		; Restore Registers
00009b 91cf                      		pop YL
00009c 91df                      		pop YH
00009d 910f                      		pop NIBBLE
                                 
00009e 9508                      		ret
                                 
                                 	.undef NIBBLE
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Convert Hex Byte To Two ASCII Characters
                                 ;;
                                 ;; Inputs:
                                 ;; - Dummy Input                    <- SP + 4
                                 ;; - Byte                           <- SP + 3 (First Byte Before Return Address)
                                 ;;
                                 ;; Outputs:
                                 ;; - ASCII Char (Most  Significant) -> SP + 4
                                 ;; - ASCII Char (Least Significant) -> SP + 3 (First Byte Before Return Address)
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 HEX_BYTE_TO_ASCII:
                                 	.def BYTE   = R16
                                 	.def NIBBLE = R17
                                 
                                 	; Number of pushes
                                 	.set STACK_OFFSET = 4
                                 	; Backup Registers
00009f 930f                      	push BYTE
0000a0 931f                      	push NIBBLE
0000a1 93df                      	push YH
0000a2 93cf                      	push YL
                                 
                                 	; Load Stack Pointer
                                 	; Y <- SP
0000a3 b7de                      	in YH, SPH
0000a4 b7cd                      	in YL, SPL
                                 
                                 	; Load Hex Byte
0000a5 810f                      	ldd BYTE, Y+(STACK_OFFSET + 3)
                                 
                                 	; Convert Least Significant Nibble
0000a6 2f10                      	mov NIBBLE, BYTE
0000a7 701f                      	andi NIBBLE, 0x0F
0000a8 931f                      	push NIBBLE
0000a9 dfe5                      	rcall HEX_NIBBLE_TO_ASCII
0000aa 911f                      	pop NIBBLE
                                 
                                 	; Output Least Significant Nibble
0000ab 831f                      	std Y+(STACK_OFFSET + 3), NIBBLE
                                 
                                 	; Convert Most Significant Nibble
0000ac 2f10                      	mov NIBBLE, BYTE
0000ad 7f10                      	andi NIBBLE, 0xF0
0000ae 9512                      	swap NIBBLE
0000af 931f                      	push NIBBLE
0000b0 dfde                      	rcall HEX_NIBBLE_TO_ASCII
0000b1 911f                      	pop NIBBLE
                                 
                                 	; Output Most Significant Nibble
0000b2 8718                      	std Y+(STACK_OFFSET + 4), NIBBLE
                                 
                                 	; Restore Registers
0000b3 91cf                      	pop YL
0000b4 91df                      	pop YH
0000b5 911f                      	pop NIBBLE
0000b6 910f                      	pop BYTE
                                 
0000b7 9508                      	ret
                                 
                                 	.undef BYTE
                                 	.undef NIBBLE
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Lookup Table To Convert ASCII To Hex
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 ASCII_TO_HEX_LOOKUP_TABLE:
0000b8 ffff                      	.db 0xFF, 0xFF
0000b9 ffff                      	.db 0xFF, 0xFF
0000ba ffff                      	.db 0xFF, 0xFF
0000bb ffff                      	.db 0xFF, 0xFF
0000bc ffff                      	.db 0xFF, 0xFF
0000bd ffff                      	.db 0xFF, 0xFF
0000be ffff                      	.db 0xFF, 0xFF
0000bf ffff                      	.db 0xFF, 0xFF
0000c0 ffff                      	.db 0xFF, 0xFF
0000c1 ffff                      	.db 0xFF, 0xFF
0000c2 ffff                      	.db 0xFF, 0xFF
0000c3 ffff                      	.db 0xFF, 0xFF
0000c4 ffff                      	.db 0xFF, 0xFF
0000c5 ffff                      	.db 0xFF, 0xFF
0000c6 ffff                      	.db 0xFF, 0xFF
0000c7 ffff                      	.db 0xFF, 0xFF
0000c8 ffff                      	.db 0xFF, 0xFF
0000c9 ffff                      	.db 0xFF, 0xFF
0000ca ffff                      	.db 0xFF, 0xFF
0000cb ffff                      	.db 0xFF, 0xFF
0000cc ffff                      	.db 0xFF, 0xFF
0000cd ffff                      	.db 0xFF, 0xFF
0000ce ffff                      	.db 0xFF, 0xFF
0000cf ffff                      	.db 0xFF, 0xFF
0000d0 0100                      	.db 0x00, 0x01
0000d1 0302                      	.db 0x02, 0x03
0000d2 0504                      	.db 0x04, 0x05
0000d3 0706                      	.db 0x06, 0x07
0000d4 0908                      	.db 0x08, 0x09
0000d5 ffff                      	.db 0xFF, 0xFF
0000d6 ffff                      	.db 0xFF, 0xFF
0000d7 ffff                      	.db 0xFF, 0xFF
0000d8 0aff                      	.db 0xFF, 0x0A
0000d9 0c0b                      	.db 0x0B, 0x0C
0000da 0e0d                      	.db 0x0D, 0x0E
0000db ff0f                      	.db 0x0F, 0xFF
0000dc ffff                      	.db 0xFF, 0xFF
0000dd ffff                      	.db 0xFF, 0xFF
0000de ffff                      	.db 0xFF, 0xFF
0000df ffff                      	.db 0xFF, 0xFF
0000e0 ffff                      	.db 0xFF, 0xFF
0000e1 ffff                      	.db 0xFF, 0xFF
0000e2 ffff                      	.db 0xFF, 0xFF
0000e3 ffff                      	.db 0xFF, 0xFF
0000e4 ffff                      	.db 0xFF, 0xFF
0000e5 ffff                      	.db 0xFF, 0xFF
0000e6 ffff                      	.db 0xFF, 0xFF
0000e7 ffff                      	.db 0xFF, 0xFF
0000e8 0aff                      	.db 0xFF, 0x0A
0000e9 0c0b                      	.db 0x0B, 0x0C
0000ea 0e0d                      	.db 0x0D, 0x0E
0000eb ff0f                      	.db 0x0F, 0xFF
0000ec ffff                      	.db 0xFF, 0xFF
0000ed ffff                      	.db 0xFF, 0xFF
0000ee ffff                      	.db 0xFF, 0xFF
0000ef ffff                      	.db 0xFF, 0xFF
0000f0 ffff                      	.db 0xFF, 0xFF
0000f1 ffff                      	.db 0xFF, 0xFF
0000f2 ffff                      	.db 0xFF, 0xFF
0000f3 ffff                      	.db 0xFF, 0xFF
0000f4 ffff                      	.db 0xFF, 0xFF
0000f5 ffff                      	.db 0xFF, 0xFF
0000f6 ffff                      	.db 0xFF, 0xFF
0000f7 ffff                      	.db 0xFF, 0xFF
0000f8 ffff                      	.db 0xFF, 0xFF
0000f9 ffff                      	.db 0xFF, 0xFF
0000fa ffff                      	.db 0xFF, 0xFF
0000fb ffff                      	.db 0xFF, 0xFF
0000fc ffff                      	.db 0xFF, 0xFF
0000fd ffff                      	.db 0xFF, 0xFF
0000fe ffff                      	.db 0xFF, 0xFF
0000ff ffff                      	.db 0xFF, 0xFF
000100 ffff                      	.db 0xFF, 0xFF
000101 ffff                      	.db 0xFF, 0xFF
000102 ffff                      	.db 0xFF, 0xFF
000103 ffff                      	.db 0xFF, 0xFF
000104 ffff                      	.db 0xFF, 0xFF
000105 ffff                      	.db 0xFF, 0xFF
000106 ffff                      	.db 0xFF, 0xFF
000107 ffff                      	.db 0xFF, 0xFF
000108 ffff                      	.db 0xFF, 0xFF
000109 ffff                      	.db 0xFF, 0xFF
00010a ffff                      	.db 0xFF, 0xFF
00010b ffff                      	.db 0xFF, 0xFF
00010c ffff                      	.db 0xFF, 0xFF
00010d ffff                      	.db 0xFF, 0xFF
00010e ffff                      	.db 0xFF, 0xFF
00010f ffff                      	.db 0xFF, 0xFF
000110 ffff                      	.db 0xFF, 0xFF
000111 ffff                      	.db 0xFF, 0xFF
000112 ffff                      	.db 0xFF, 0xFF
000113 ffff                      	.db 0xFF, 0xFF
000114 ffff                      	.db 0xFF, 0xFF
000115 ffff                      	.db 0xFF, 0xFF
000116 ffff                      	.db 0xFF, 0xFF
000117 ffff                      	.db 0xFF, 0xFF
000118 ffff                      	.db 0xFF, 0xFF
000119 ffff                      	.db 0xFF, 0xFF
00011a ffff                      	.db 0xFF, 0xFF
00011b ffff                      	.db 0xFF, 0xFF
00011c ffff                      	.db 0xFF, 0xFF
00011d ffff                      	.db 0xFF, 0xFF
00011e ffff                      	.db 0xFF, 0xFF
00011f ffff                      	.db 0xFF, 0xFF
000120 ffff                      	.db 0xFF, 0xFF
000121 ffff                      	.db 0xFF, 0xFF
000122 ffff                      	.db 0xFF, 0xFF
000123 ffff                      	.db 0xFF, 0xFF
000124 ffff                      	.db 0xFF, 0xFF
000125 ffff                      	.db 0xFF, 0xFF
000126 ffff                      	.db 0xFF, 0xFF
000127 ffff                      	.db 0xFF, 0xFF
000128 ffff                      	.db 0xFF, 0xFF
000129 ffff                      	.db 0xFF, 0xFF
00012a ffff                      	.db 0xFF, 0xFF
00012b ffff                      	.db 0xFF, 0xFF
00012c ffff                      	.db 0xFF, 0xFF
00012d ffff                      	.db 0xFF, 0xFF
00012e ffff                      	.db 0xFF, 0xFF
00012f ffff                      	.db 0xFF, 0xFF
000130 ffff                      	.db 0xFF, 0xFF
000131 ffff                      	.db 0xFF, 0xFF
000132 ffff                      	.db 0xFF, 0xFF
000133 ffff                      	.db 0xFF, 0xFF
000134 ffff                      	.db 0xFF, 0xFF
000135 ffff                      	.db 0xFF, 0xFF
000136 ffff                      	.db 0xFF, 0xFF
                                 .INCLUDE "io.inc"
000137 ffff                      
                                 ;; Include Guard
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 .ifdef INCLUDE_IO
                                 .endif
                                 
                                 .equ INCLUDE_IO = 1
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Transmit Character Over USART
                                 ;;
                                 ;; Inputs:
                                 ;; - Char      <- SP + 3 (First Byte Before Return Address)
                                 ;;
                                 ;; Outputs:
                                 ;; - No Output -> SP + 3 (First Byte Before Return Address)
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 PUTCHAR:
                                 	; Set Register Aliases
                                 	.def CHAR = R16
                                 
                                 	; Number of pushes
                                 	.set STACK_OFFSET = 3
                                 	; Backup Registers
000138 930f                      	push CHAR
000139 93df                      	push YH
00013a 93cf                      	push YL
                                 
                                 	; Load Stack Pointer
                                 	; Y <- SP
00013b b7de                      	in YH, SPH
00013c b7cd                      	in YL, SPL
                                 
                                 	; Load Character
00013d 810e                      	ldd CHAR, Y+(STACK_OFFSET + 3)
                                 
                                 	; Wait until sending is safe
                                 	PUTCHAR_WAIT_SAFE_SEND:	
00013e 9b5d                      		sbis UCSRA, UDRE
00013f cffe                      		rjmp PUTCHAR_WAIT_SAFE_SEND
                                 
000140 b90c                      	out UDR, CHAR
                                 	
                                 	; Restore Registers
000141 91cf                      	pop YL
000142 91df                      	pop YH
000143 910f                      	pop CHAR
                                 
000144 9508                      	ret
                                 
                                 	.undef CHAR
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Print a Null-Terminated Program Memory String Over USART
                                 ;;
                                 ;; Inputs:
                                 ;; - String Address H <- SP + 4
                                 ;; - String Address L <- SP + 3 (First Byte Before Return Address)
                                 ;;
                                 ;; Outputs:
                                 ;; - No Output        -> SP + 4
                                 ;; - No Output        -> SP + 3 (First Byte Before Return Address)
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 PUTSTR:
                                 	.def CHAR = R16
                                 
                                 	; Number of pushes
                                 	.set STACK_OFFSET = 5
                                 	; Backup Registers
000145 930f                      	push CHAR
000146 93df                      	push YH
000147 93cf                      	push YL
000148 93ff                      	push ZH
000149 93ef                      	push ZL
                                 
                                 	; Load Stack Pointer
                                 	; Y <- SP
00014a b7de                      	in YH, SPH
00014b b7cd                      	in YL, SPL
                                 
                                 	; Load String Address
00014c 85f9                      	ldd ZH, Y+(STACK_OFFSET + 4)
00014d 85e8                      	ldd ZL, Y+(STACK_OFFSET + 3)
                                 
                                 	PUTSTR_LOOP:
00014e 9104                      		lpm CHAR, Z
00014f 3000                      		cpi CHAR, 0
000150 f029                      		breq PUTSTR_RET
000151 930f                      		push CHAR
000152 dfe5                      		rcall PUTCHAR
000153 910f                      		pop CHAR
000154 9631                      		adiw ZH:ZL, 1
000155 cff8                      		rjmp PUTSTR_LOOP
                                 
                                 	PUTSTR_RET:
                                 		; Restore Registers
000156 91ef                      		pop ZL
000157 91ff                      		pop ZH
000158 91cf                      		pop YL
000159 91df                      		pop YH
00015a 910f                      		pop CHAR
                                 
00015b 9508                      		ret
                                 
                                 .INCLUDE "read-mem.inc"
                                 
                                 ;; Include Guard
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 .ifdef INCLUDE_READ_MEM
                                 .endif
                                 
                                 .equ INCLUDE_READ_MEM = 1
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Imports
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 .INCLUDE "ascii.inc"
                                 
                                 ;; Include Guard
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 .ifdef INCLUDE_ASCII
                                 .INCLUDE "io.inc"
                                 
                                 ;; Include Guard
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 .ifdef INCLUDE_IO
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Read Memory Region
                                 ;;
                                 ;; Inputs:
                                 ;; - Command Length           <- SP + 5
                                 ;; - Command String Pointer H <- SP + 4
                                 ;; - Command String Pointer L <- SP + 3 (First Byte Before Return Address)
                                 ;;
                                 ;; Outputs:
                                 ;; - No Output                -> SP + 5
                                 ;; - No Output                -> SP + 4
                                 ;; - No Output                -> SP + 3 (First Byte Before Return Address)
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
00015c 5245
00015d 4f52
00015e 3a52
00015f 4920
000160 766e
000161 6c61
000162 6469
000163 4920
000164 706e
000165 7475
000166 4620
000167 726f
000168 6020
000169 6552
00016a 6461
00016b 654d
00016c 606d
00016d 000d                      READ_MEM_ERR_MSG: .db "ERROR: Invalid Input For `ReadMem`", ASCII_NEW_LINE, 0
                                 
                                 
                                 READ_MEM:
                                 	.def TEMP = R16
                                 
                                 	; Number of pushes
                                 	.set STACK_OFFSET = 5
                                 	; Backup Registers
00016e 930f                      	push TEMP
00016f 93df                      	push YH
000170 93cf                      	push YL
000171 93ff                      	push ZH
000172 93ef                      	push ZL
                                 
                                 	; Load Stack Pointer
                                 	; Y <- SP
000173 b7de                      	in YH, SPH
000174 b7cd                      	in YL, SPL
                                 
                                 	; Load Command Length
000175 850a                      	ldd TEMP, Y+(STACK_OFFSET + 5)
                                 
                                 	; r XXXX YYYY
000176 300b                      	cpi TEMP, 11
000177 f5f9                      	brne READ_MEM_ERR
                                 
                                 	; Load Command Address
000178 85f9                      	ldd ZH, Y+(STACK_OFFSET + 4)
000179 85e8                      	ldd ZL, Y+(STACK_OFFSET + 3)
                                 
                                 	; Get string address of first memory address
00017a 9632                      	adiw ZH:ZL, 2
                                 
                                 	; Parse first memory address
00017b e000                      	ldi TEMP, 0
00017c 930f                      	push TEMP
00017d 93ff                      	push ZH
00017e 93ef                      	push ZL
00017f dee2                      	rcall ASCII_QUAD_TO_HEX
000180 91cf                      	pop YL
000181 91df                      	pop YH
000182 910f                      	pop TEMP
                                 	; IF (SUBROUTINE ERR != 0) THEN ERR
000183 3000                      	cpi TEMP, 0
000184 f591                      	brne READ_MEM_ERR
                                 
                                 	; There should be a space between parameters
000185 9634                      	adiw ZH:ZL, 4
000186 8100                      	ld TEMP, Z
000187 3200                      	cpi TEMP, ASCII_SPACE
000188 f571                      	brne READ_MEM_ERR
                                 
                                 	; Get string address of second memory address
000189 9631                      	adiw ZH:ZL, 1
                                 
                                 	; Parse second memory address
00018a e000                      	ldi TEMP, 0
00018b 930f                      	push TEMP
00018c 93ff                      	push ZH
00018d 93ef                      	push ZL
00018e ded3                      	rcall ASCII_QUAD_TO_HEX
00018f 91ef                      	pop ZL
000190 91ff                      	pop ZH
000191 910f                      	pop TEMP
                                 	; IF (SUBROUTINE ERR != 0) THEN ERR
000192 3000                      	cpi TEMP, 0
000193 f519                      	brne READ_MEM_ERR
                                 
                                 	; Ensure First Address <= Second Address
000194 17df                      	cp YH, ZH
000195 f020                      	brlo READ_MEM_PARAMS_LOOP
000196 f501                      	brne READ_MEM_ERR
                                 
                                 	; High byte equal
                                 	; Check low byte
000197 17ce                      	cp YL, ZL
000198 f008                      	brlo READ_MEM_PARAMS_LOOP
000199 f4e9                      	brne READ_MEM_ERR
                                 
                                 	; Params Valid
                                 	READ_MEM_PARAMS_LOOP:
                                 		; Read Memory
00019a 9109                      		ld TEMP, Y+
                                 
                                 		; Print as ASCII
00019b 930f                      		push TEMP
00019c 930f                      		push TEMP
00019d df01                      		rcall HEX_BYTE_TO_ASCII
                                 		; Get Least Significant Char
00019e 910f                      		pop TEMP
00019f df98                      		rcall PUTCHAR
0001a0 930f                      		push TEMP
0001a1 df96                      		rcall PUTCHAR
0001a2 910f                      		pop TEMP
0001a3 910f                      		pop TEMP
0001a4 e200                      		ldi TEMP, ASCII_SPACE
0001a5 930f                      		push TEMP
0001a6 df91                      		rcall PUTCHAR
0001a7 910f                      		pop TEMP
                                 
0001a8 17df                      		cp YH, ZH
0001a9 f380                      		brlo READ_MEM_PARAMS_LOOP
0001aa f419                      		brne READ_MEM_PARAMS_LOOP_EXIT
                                 
0001ab 17ce                      		cp YL, ZL
0001ac f368                      		brlo READ_MEM_PARAMS_LOOP
0001ad f361                      		breq READ_MEM_PARAMS_LOOP
                                 
                                 	READ_MEM_PARAMS_LOOP_EXIT:
0001ae e008                      		ldi TEMP, ASCII_BACKSPACE
0001af 930f                      		push TEMP
0001b0 df87                      		rcall PUTCHAR
0001b1 910f                      		pop TEMP
0001b2 e00d                      		ldi TEMP, ASCII_NEW_LINE
0001b3 930f                      		push TEMP
0001b4 df83                      		rcall PUTCHAR
0001b5 910f                      		pop TEMP
0001b6 c007                      		rjmp READ_MEM_RET
                                 
                                 	READ_MEM_ERR:
0001b7 e002                      		ldi TEMP, HIGH(READ_MEM_ERR_MSG << 1)
0001b8 930f                      		push TEMP
0001b9 eb08                      		ldi TEMP, LOW (READ_MEM_ERR_MSG << 1)
0001ba 930f                      		push TEMP
0001bb df89                      		rcall PUTSTR
0001bc 910f                      		pop TEMP
0001bd 910f                      		pop TEMP
                                 
                                 	READ_MEM_RET:
                                 		; Restore Registers
0001be 91ef                      		pop ZL
0001bf 91ff                      		pop ZH
0001c0 91cf                      		pop YL
0001c1 91df                      		pop YH
0001c2 910f                      		pop TEMP
                                 
0001c3 9508                      		ret
                                 	
                                 .INCLUDE "write-mem.inc"
                                 
                                 ;; Include Guard
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 .ifdef INCLUDE_WRITE_MEM
                                 .endif
                                 
                                 .equ INCLUDE_WRITE_MEM = 1
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Imports
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 .INCLUDE "ascii.inc"
                                 
                                 ;; Include Guard
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 .ifdef INCLUDE_ASCII
                                 .INCLUDE "io.inc"
                                 
                                 ;; Include Guard
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 .ifdef INCLUDE_IO
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Write Memory Address
                                 ;;
                                 ;; Inputs:
                                 ;; - Command Length           <- SP + 5
                                 ;; - Command String Pointer H <- SP + 4
                                 ;; - Command String Pointer L <- SP + 3 (First Byte Before Return Address)
                                 ;;
                                 ;; Outputs:
                                 ;; - No Output                -> SP + 5
                                 ;; - No Output                -> SP + 4
                                 ;; - No Output                -> SP + 3 (First Byte Before Return Address)
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
0001c4 5245
0001c5 4f52
0001c6 3a52
0001c7 4920
0001c8 766e
0001c9 6c61
0001ca 6469
0001cb 4920
0001cc 706e
0001cd 7475
0001ce 4620
0001cf 726f
0001d0 6020
0001d1 7257
0001d2 7469
0001d3 4d65
0001d4 6d65
0001d5 0d60
0001d6 0000                      WRITE_MEM_ERR_MSG: .db "ERROR: Invalid Input For `WriteMem`", ASCII_NEW_LINE, 0, 0
0001d7 654d
0001d8 6f6d
0001d9 7972
0001da 5720
0001db 6972
0001dc 6574
0001dd 4320
0001de 6d6f
0001df 6c70
0001e0 7465
0001e1 0d65
0001e2 0000                      WRITE_MEM_SUC_MSG: .db "Memory Write Complete", ASCII_NEW_LINE, 0, 0
                                 
                                 
                                 WRITE_MEM:
                                 	.def TEMP  = R16
                                 	.def COUNT = R17
                                 	.def LEN   = R18
                                 
                                 	; Number of pushes
                                 	.set STACK_OFFSET = 7
                                 	; Backup Registers
0001e3 930f                      	push TEMP
0001e4 931f                      	push COUNT
0001e5 932f                      	push LEN
0001e6 93df                      	push YH
0001e7 93cf                      	push YL
0001e8 93ff                      	push ZH
0001e9 93ef                      	push ZL
                                 
                                 	; Load Stack Pointer
                                 	; Y <- SP
0001ea b7de                      	in YH, SPH
0001eb b7cd                      	in YL, SPL
                                 
                                 	; Load Command Length
0001ec 852c                      	ldd LEN, Y+(STACK_OFFSET + 5)
                                 
                                 	; w XXXX (YY)+
0001ed 3029                      	cpi LEN, 9
0001ee f1f0                      	brlo WRITE_MEM_ERR
                                 
                                 	; Length should be odd
0001ef ff20                      	sbrs LEN, 0
0001f0 c03c                      	rjmp WRITE_MEM_ERR
                                 
                                 	; Load Command Address
0001f1 85fb                      	ldd ZH, Y+(STACK_OFFSET + 4)
0001f2 85ea                      	ldd ZL, Y+(STACK_OFFSET + 3)
                                 
                                 	; Get string address of memory address
0001f3 9632                      	adiw ZH:ZL, 2
                                 
                                 	; Parse memory address
0001f4 e000                      	ldi TEMP, 0
0001f5 930f                      	push TEMP
0001f6 93ff                      	push ZH
0001f7 93ef                      	push ZL
0001f8 de69                      	rcall ASCII_QUAD_TO_HEX
0001f9 91cf                      	pop YL
0001fa 91df                      	pop YH
0001fb 910f                      	pop TEMP
                                 	; IF (SUBROUTINE ERR != 0) THEN ERR
0001fc 3000                      	cpi TEMP, 0
0001fd f579                      	brne WRITE_MEM_ERR
                                 
                                 	; There should be a space between parameters
0001fe 9634                      	adiw ZH:ZL, 4
0001ff 8100                      	ld TEMP, Z
000200 3200                      	cpi TEMP, ASCII_SPACE
000201 f559                      	brne WRITE_MEM_ERR
                                 
                                 	; Get string address of bytes to write
000202 9631                      	adiw ZH:ZL, 1
                                 
000203 93ff                      	push ZH
000204 93ef                      	push ZL
                                 
                                 	; Get max iterations
000205 5027                      	subi LEN, 7
000206 9526                      	lsr LEN
000207 e010                      	ldi COUNT, 0
                                 
                                 	WRITE_MEM_VALIDATE_LOOP:
000208 e000                      		ldi TEMP, 0
000209 930f                      		push TEMP
00020a 8100                      		ld TEMP, Z
00020b 930f                      		push TEMP
00020c de0f                      		rcall ASCII_BYTE_TO_HEX
00020d 910f                      		pop TEMP
00020e 910f                      		pop TEMP
                                 		; IF (SUBROUTINE ERR != 0) THEN ERR
00020f 3000                      		cpi TEMP, 0
000210 f4e1                      		brne WRITE_MEM_ERR
000211 9513                      		inc COUNT
                                 		; Get Next Byte
000212 9631                      		adiw ZH:ZL, 1
000213 1712                      		cp COUNT, LEN
000214 f799                      		brne WRITE_MEM_VALIDATE_LOOP
                                 
000215 91ef                      	pop ZL
000216 91ff                      	pop ZH
000217 e010                      	ldi COUNT, 0
                                 	WRITE_MEM_WRITE:
000218 e000                      		ldi TEMP, 0
000219 930f                      		push TEMP
00021a 93ff                      		push ZH
00021b 93ef                      		push ZL
00021c de19                      		rcall ASCII_WORD_TO_HEX
00021d 910f                      		pop TEMP
00021e 9309                      		st Y+, TEMP
00021f 910f                      		pop TEMP
000220 910f                      		pop TEMP
000221 9632                      		adiw ZH:ZL, 2
000222 9513                      		inc COUNT
000223 1712                      		cp COUNT, LEN
000224 f799                      		brne WRITE_MEM_WRITE
                                 
000225 e003                      	ldi TEMP, HIGH(WRITE_MEM_SUC_MSG << 1)
000226 930f                      	push TEMP
000227 ea0e                      	ldi TEMP, LOW (WRITE_MEM_SUC_MSG << 1)
000228 930f                      	push TEMP
000229 df1b                      	rcall PUTSTR
00022a 910f                      	pop TEMP
00022b 910f                      	pop TEMP
                                 
00022c c007                      	rjmp WRITE_MEM_RET
                                 
                                 	WRITE_MEM_ERR:
00022d e003                      		ldi TEMP, HIGH(WRITE_MEM_ERR_MSG << 1)
00022e 930f                      		push TEMP
00022f e808                      		ldi TEMP, LOW (WRITE_MEM_ERR_MSG << 1)
000230 930f                      		push TEMP
000231 df13                      		rcall PUTSTR
000232 910f                      		pop TEMP
000233 910f                      		pop TEMP
                                 
                                 	WRITE_MEM_RET:
                                 		; Restore Registers
000234 91ef                      		pop ZL
000235 91ff                      		pop ZH
000236 91cf                      		pop YL
000237 91df                      		pop YH
000238 912f                      		pop LEN
000239 911f                      		pop COUNT
00023a 910f                      		pop TEMP
                                 
00023b 9508                      		ret
                                 	
                                 	.undef TEMP
                                 	.undef COUNT
                                 .INCLUDE "read-io.inc"
                                 
                                 ;; Include Guard
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 .ifdef INCLUDE_READ_IO
                                 .endif
                                 
                                 .equ INCLUDE_READ_IO = 1
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Imports
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 .INCLUDE "ascii.inc"
                                 
                                 ;; Include Guard
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 .ifdef INCLUDE_ASCII
                                 .INCLUDE "io.inc"
                                 
                                 ;; Include Guard
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 .ifdef INCLUDE_IO
                                 .INCLUDE "io-name-to-addr.inc"
                                 
                                 ;; Include Guard
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 .ifdef INCLUDE_IO_NAME_TO_ADDR
                                 .endif
                                 
                                 .equ INCLUDE_IO_NAME_TO_ADDR = 1
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Parse String As IO Register And Return Memory Address
                                 ;;
                                 ;; Inputs:
                                 ;; - String Length          <- SP + 5
                                 ;; - ASCII String Pointer H <- SP + 4
                                 ;; - ASCII String Pointer L <- SP + 3 (First Byte Before Return Address)
                                 ;;
                                 ;; Outputs:
                                 ;; - Error Status           -> SP + 5
                                 ;; - Return Value H         -> SP + 4
                                 ;; - Return Value L         -> SP + 3 (First Byte Before Return Address)
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 ASCII_IO_REG_TO_MEM_ADDR:
                                 	.def LEN  = R16
                                 	.def CHAR = R17
                                 	.def CNTR = R18
                                 	.def TEMP = R19
                                 
                                 	; Number of pushes
                                 	.set STACK_OFFSET = 8
                                 	; Backup Registers
00023c 930f                      	push LEN
00023d 931f                      	push CHAR
00023e 932f                      	push CNTR
00023f 933f                      	push TEMP
000240 93df                      	push YH
000241 93cf                      	push YL
000242 93ff                      	push ZH
000243 93ef                      	push ZL
                                 
                                 	; Load Stack Pointer
                                 	; Z <- SP
000244 b7fe                      	in ZH, SPH
000245 b7ed                      	in ZL, SPL
                                 
                                 	; Load String Length
000246 8505                      	ldd LEN, Z+(STACK_OFFSET + 5)
                                 
                                 	; Load String Pointer
000247 85d4                      	ldd YH, Z+(STACK_OFFSET + 4)
000248 85c3                      	ldd YL, Z+(STACK_OFFSET + 3)
                                 
                                 	; Load Tree Pointer (Program Memory)
000249 e0f4                      	ldi ZH, HIGH(IO_LOOKUP_TREE << 1)
00024a eee8                      	ldi ZL, LOW (IO_LOOKUP_TREE << 1)
                                 
00024b e020                      	ldi CNTR, 0
                                 
                                 	ASCII_IO_REG_TO_MEM_ADDR_LOOP:
00024c 8118                      		ld CHAR, Y
                                 		; Skip Done Leaf
00024d 9632                      		adiw ZH:ZL, 2
                                 		ASCII_IO_REG_TO_MEM_ADDR_INNER_LOOP:
                                 			; Get Character In Tree
00024e 9134                      			lpm TEMP, Z
00024f 3030                      			cpi TEMP, 0
                                 			; Invlaid String
000250 f0c1                      			breq ASCII_IO_REG_TO_MEM_ADDR_ERR
000251 1731                      			cp TEMP, CHAR
000252 f011                      			breq ASCII_IO_REG_TO_MEM_ADDR_INNER_LOOP_MATCH
                                 			; No Match
000253 9634                      			adiw ZH:ZL, 4
000254 cff9                      			rjmp ASCII_IO_REG_TO_MEM_ADDR_INNER_LOOP
                                 			ASCII_IO_REG_TO_MEM_ADDR_INNER_LOOP_MATCH:
000255 9632                      				adiw ZH:ZL, 2
                                 				; High Byte
000256 9134                      				lpm TEMP, Z
000257 9631                      				adiw ZH:ZL, 1
                                 				; Low Byte
000258 9114                      				lpm CHAR, Z
000259 2ff3                      				mov ZH, TEMP
00025a 2fe1                      				mov ZL, CHAR
00025b 9621                      				adiw YH:YL, 1
00025c 9523                      				inc CNTR
00025d 1720                      				cp CNTR, LEN
00025e f368                      				brlo ASCII_IO_REG_TO_MEM_ADDR_LOOP
                                 
                                 	; Load Stack Pointer
                                 	; Y <- SP
00025f b7de                      	in YH, SPH
000260 b7cd                      	in YL, SPL
                                 			
                                 	; We have a valid string
                                 	; Get memory address
                                 	; High Byte
000261 9134                      	lpm TEMP, Z
000262 873c                      	std Y+(STACK_OFFSET + 4), TEMP
000263 9631                      	adiw ZH:ZL, 1
                                 	; Low Byte
000264 9134                      	lpm TEMP, Z
000265 873b                      	std Y+(STACK_OFFSET + 3), TEMP
                                 	; No Error
000266 e030                      	ldi TEMP, 0
000267 873d                      	std Y+(STACK_OFFSET + 5), TEMP
                                 	
000268 c002                      	rjmp ASCII_IO_REG_TO_MEM_ADDR_RET
                                 
                                 	ASCII_IO_REG_TO_MEM_ADDR_ERR:
                                 		; Error Status <- True
000269 e031                      		ldi TEMP, 1
00026a 873d                      		std Y+(STACK_OFFSET + 5), TEMP
                                 
                                 	ASCII_IO_REG_TO_MEM_ADDR_RET:
                                 		; Restore Registers
00026b 91ef                      		pop ZL
00026c 91ff                      		pop ZH
00026d 91cf                      		pop YL
00026e 91df                      		pop YH
00026f 913f                      		pop TEMP
000270 912f                      		pop CNTR
000271 911f                      		pop CHAR
000272 910f                      		pop LEN
                                 
000273 9508                      		ret
                                 
                                 	.undef LEN
                                 	.undef CHAR
                                 	.undef CNTR
                                 	.undef TEMP
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Lookup Tree To Convert ASCII To IO Register Memory Address
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 IO_LOOKUP_TREE:
000274 0000                              .db HIGH(0x00), LOW(0x00)
000275 0041
000276 1c05                              .db "A", 0, HIGH(IO_LOOKUP_TREE_A << 1), LOW(IO_LOOKUP_TREE_A << 1)
000277 0044
000278 a005                              .db "D", 0, HIGH(IO_LOOKUP_TREE_D << 1), LOW(IO_LOOKUP_TREE_D << 1)
000279 0045
00027a d405                              .db "E", 0, HIGH(IO_LOOKUP_TREE_E << 1), LOW(IO_LOOKUP_TREE_E << 1)
00027b 0047
00027c 2006                              .db "G", 0, HIGH(IO_LOOKUP_TREE_G << 1), LOW(IO_LOOKUP_TREE_G << 1)
00027d 0049
00027e 4c06                              .db "I", 0, HIGH(IO_LOOKUP_TREE_I << 1), LOW(IO_LOOKUP_TREE_I << 1)
00027f 004d
000280 7806                              .db "M", 0, HIGH(IO_LOOKUP_TREE_M << 1), LOW(IO_LOOKUP_TREE_M << 1)
000281 004f
000282 ac06                              .db "O", 0, HIGH(IO_LOOKUP_TREE_O << 1), LOW(IO_LOOKUP_TREE_O << 1)
000283 0050
000284 4007                              .db "P", 0, HIGH(IO_LOOKUP_TREE_P << 1), LOW(IO_LOOKUP_TREE_P << 1)
000285 0053
000286 ac07                              .db "S", 0, HIGH(IO_LOOKUP_TREE_S << 1), LOW(IO_LOOKUP_TREE_S << 1)
000287 0054
000288 4808                              .db "T", 0, HIGH(IO_LOOKUP_TREE_T << 1), LOW(IO_LOOKUP_TREE_T << 1)
000289 0055
00028a 4c09                              .db "U", 0, HIGH(IO_LOOKUP_TREE_U << 1), LOW(IO_LOOKUP_TREE_U << 1)
00028b 0057
00028c d009                              .db "W", 0, HIGH(IO_LOOKUP_TREE_W << 1), LOW(IO_LOOKUP_TREE_W << 1)
00028d 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_A:
00028e 0000                              .db HIGH(0x00), LOW(0x00)
00028f 0043
000290 2c05                              .db "C", 0, HIGH(IO_LOOKUP_TREE_AC << 1), LOW(IO_LOOKUP_TREE_AC << 1)
000291 0044
000292 4005                              .db "D", 0, HIGH(IO_LOOKUP_TREE_AD << 1), LOW(IO_LOOKUP_TREE_AD << 1)
000293 0053
000294 8c05                              .db "S", 0, HIGH(IO_LOOKUP_TREE_AS << 1), LOW(IO_LOOKUP_TREE_AS << 1)
000295 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_AC:
000296 0000                              .db HIGH(0x00), LOW(0x00)
000297 0053
000298 3405                              .db "S", 0, HIGH(IO_LOOKUP_TREE_ACS << 1), LOW(IO_LOOKUP_TREE_ACS << 1)
000299 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_ACS:
00029a 0000                              .db HIGH(0x00), LOW(0x00)
00029b 0052
00029c 3c05                              .db "R", 0, HIGH(IO_LOOKUP_TREE_ACSR << 1), LOW(IO_LOOKUP_TREE_ACSR << 1)
00029d 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_ACSR:
00029e 2800                              .db HIGH(0x28), LOW(0x28)
00029f 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_AD:
0002a0 0000                              .db HIGH(0x00), LOW(0x00)
0002a1 0043
0002a2 4c05                              .db "C", 0, HIGH(IO_LOOKUP_TREE_ADC << 1), LOW(IO_LOOKUP_TREE_ADC << 1)
0002a3 004d
0002a4 7805                              .db "M", 0, HIGH(IO_LOOKUP_TREE_ADM << 1), LOW(IO_LOOKUP_TREE_ADM << 1)
0002a5 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_ADC:
0002a6 0000                              .db HIGH(0x00), LOW(0x00)
0002a7 0048
0002a8 5c05                              .db "H", 0, HIGH(IO_LOOKUP_TREE_ADCH << 1), LOW(IO_LOOKUP_TREE_ADCH << 1)
0002a9 004c
0002aa 6005                              .db "L", 0, HIGH(IO_LOOKUP_TREE_ADCL << 1), LOW(IO_LOOKUP_TREE_ADCL << 1)
0002ab 0053
0002ac 6405                              .db "S", 0, HIGH(IO_LOOKUP_TREE_ADCS << 1), LOW(IO_LOOKUP_TREE_ADCS << 1)
0002ad 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_ADCH:
0002ae 2500                              .db HIGH(0x25), LOW(0x25)
0002af 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_ADCL:
0002b0 2400                              .db HIGH(0x24), LOW(0x24)
0002b1 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_ADCS:
0002b2 0000                              .db HIGH(0x00), LOW(0x00)
0002b3 0052
0002b4 6c05                              .db "R", 0, HIGH(IO_LOOKUP_TREE_ADCSR << 1), LOW(IO_LOOKUP_TREE_ADCSR << 1)
0002b5 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_ADCSR:
0002b6 0000                              .db HIGH(0x00), LOW(0x00)
0002b7 0041
0002b8 7405                              .db "A", 0, HIGH(IO_LOOKUP_TREE_ADCSRA << 1), LOW(IO_LOOKUP_TREE_ADCSRA << 1)
0002b9 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_ADCSRA:
0002ba 2600                              .db HIGH(0x26), LOW(0x26)
0002bb 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_ADM:
0002bc 0000                              .db HIGH(0x00), LOW(0x00)
0002bd 0055
0002be 8005                              .db "U", 0, HIGH(IO_LOOKUP_TREE_ADMU << 1), LOW(IO_LOOKUP_TREE_ADMU << 1)
0002bf 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_ADMU:
0002c0 0000                              .db HIGH(0x00), LOW(0x00)
0002c1 0058
0002c2 8805                              .db "X", 0, HIGH(IO_LOOKUP_TREE_ADMUX << 1), LOW(IO_LOOKUP_TREE_ADMUX << 1)
0002c3 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_ADMUX:
0002c4 2700                              .db HIGH(0x27), LOW(0x27)
0002c5 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_AS:
0002c6 0000                              .db HIGH(0x00), LOW(0x00)
0002c7 0053
0002c8 9405                              .db "S", 0, HIGH(IO_LOOKUP_TREE_ASS << 1), LOW(IO_LOOKUP_TREE_ASS << 1)
0002c9 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_ASS:
0002ca 0000                              .db HIGH(0x00), LOW(0x00)
0002cb 0052
0002cc 9c05                              .db "R", 0, HIGH(IO_LOOKUP_TREE_ASSR << 1), LOW(IO_LOOKUP_TREE_ASSR << 1)
0002cd 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_ASSR:
0002ce 4200                              .db HIGH(0x42), LOW(0x42)
0002cf 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_D:
0002d0 0000                              .db HIGH(0x00), LOW(0x00)
0002d1 0044
0002d2 a805                              .db "D", 0, HIGH(IO_LOOKUP_TREE_DD << 1), LOW(IO_LOOKUP_TREE_DD << 1)
0002d3 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_DD:
0002d4 0000                              .db HIGH(0x00), LOW(0x00)
0002d5 0052
0002d6 b005                              .db "R", 0, HIGH(IO_LOOKUP_TREE_DDR << 1), LOW(IO_LOOKUP_TREE_DDR << 1)
0002d7 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_DDR:
0002d8 0000                              .db HIGH(0x00), LOW(0x00)
0002d9 0041
0002da c405                              .db "A", 0, HIGH(IO_LOOKUP_TREE_DDRA << 1), LOW(IO_LOOKUP_TREE_DDRA << 1)
0002db 0042
0002dc c805                              .db "B", 0, HIGH(IO_LOOKUP_TREE_DDRB << 1), LOW(IO_LOOKUP_TREE_DDRB << 1)
0002dd 0043
0002de cc05                              .db "C", 0, HIGH(IO_LOOKUP_TREE_DDRC << 1), LOW(IO_LOOKUP_TREE_DDRC << 1)
0002df 0044
0002e0 d005                              .db "D", 0, HIGH(IO_LOOKUP_TREE_DDRD << 1), LOW(IO_LOOKUP_TREE_DDRD << 1)
0002e1 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_DDRA:
0002e2 3a00                              .db HIGH(0x3A), LOW(0x3A)
0002e3 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_DDRB:
0002e4 3700                              .db HIGH(0x37), LOW(0x37)
0002e5 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_DDRC:
0002e6 3400                              .db HIGH(0x34), LOW(0x34)
0002e7 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_DDRD:
0002e8 3100                              .db HIGH(0x31), LOW(0x31)
0002e9 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_E:
0002ea 0000                              .db HIGH(0x00), LOW(0x00)
0002eb 0045
0002ec dc05                              .db "E", 0, HIGH(IO_LOOKUP_TREE_EE << 1), LOW(IO_LOOKUP_TREE_EE << 1)
0002ed 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_EE:
0002ee 0000                              .db HIGH(0x00), LOW(0x00)
0002ef 0041
0002f0 ec05                              .db "A", 0, HIGH(IO_LOOKUP_TREE_EEA << 1), LOW(IO_LOOKUP_TREE_EEA << 1)
0002f1 0043
0002f2 0806                              .db "C", 0, HIGH(IO_LOOKUP_TREE_EEC << 1), LOW(IO_LOOKUP_TREE_EEC << 1)
0002f3 0044
0002f4 1406                              .db "D", 0, HIGH(IO_LOOKUP_TREE_EED << 1), LOW(IO_LOOKUP_TREE_EED << 1)
0002f5 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_EEA:
0002f6 0000                              .db HIGH(0x00), LOW(0x00)
0002f7 0052
0002f8 f405                              .db "R", 0, HIGH(IO_LOOKUP_TREE_EEAR << 1), LOW(IO_LOOKUP_TREE_EEAR << 1)
0002f9 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_EEAR:
0002fa 0000                              .db HIGH(0x00), LOW(0x00)
0002fb 0048
0002fc 0006                              .db "H", 0, HIGH(IO_LOOKUP_TREE_EEARH << 1), LOW(IO_LOOKUP_TREE_EEARH << 1)
0002fd 004c
0002fe 0406                              .db "L", 0, HIGH(IO_LOOKUP_TREE_EEARL << 1), LOW(IO_LOOKUP_TREE_EEARL << 1)
0002ff 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_EEARH:
000300 3f00                              .db HIGH(0x3F), LOW(0x3F)
000301 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_EEARL:
000302 3e00                              .db HIGH(0x3E), LOW(0x3E)
000303 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_EEC:
000304 0000                              .db HIGH(0x00), LOW(0x00)
000305 0052
000306 1006                              .db "R", 0, HIGH(IO_LOOKUP_TREE_EECR << 1), LOW(IO_LOOKUP_TREE_EECR << 1)
000307 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_EECR:
000308 3c00                              .db HIGH(0x3C), LOW(0x3C)
000309 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_EED:
00030a 0000                              .db HIGH(0x00), LOW(0x00)
00030b 0052
00030c 1c06                              .db "R", 0, HIGH(IO_LOOKUP_TREE_EEDR << 1), LOW(IO_LOOKUP_TREE_EEDR << 1)
00030d 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_EEDR:
00030e 3d00                              .db HIGH(0x3D), LOW(0x3D)
00030f 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_G:
000310 0000                              .db HIGH(0x00), LOW(0x00)
000311 0049
000312 2806                              .db "I", 0, HIGH(IO_LOOKUP_TREE_GI << 1), LOW(IO_LOOKUP_TREE_GI << 1)
000313 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_GI:
000314 0000                              .db HIGH(0x00), LOW(0x00)
000315 0043
000316 3406                              .db "C", 0, HIGH(IO_LOOKUP_TREE_GIC << 1), LOW(IO_LOOKUP_TREE_GIC << 1)
000317 0046
000318 4006                              .db "F", 0, HIGH(IO_LOOKUP_TREE_GIF << 1), LOW(IO_LOOKUP_TREE_GIF << 1)
000319 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_GIC:
00031a 0000                              .db HIGH(0x00), LOW(0x00)
00031b 0052
00031c 3c06                              .db "R", 0, HIGH(IO_LOOKUP_TREE_GICR << 1), LOW(IO_LOOKUP_TREE_GICR << 1)
00031d 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_GICR:
00031e 5b00                              .db HIGH(0x5B), LOW(0x5B)
00031f 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_GIF:
000320 0000                              .db HIGH(0x00), LOW(0x00)
000321 0052
000322 4806                              .db "R", 0, HIGH(IO_LOOKUP_TREE_GIFR << 1), LOW(IO_LOOKUP_TREE_GIFR << 1)
000323 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_GIFR:
000324 5a00                              .db HIGH(0x5A), LOW(0x5A)
000325 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_I:
000326 0000                              .db HIGH(0x00), LOW(0x00)
000327 0043
000328 5406                              .db "C", 0, HIGH(IO_LOOKUP_TREE_IC << 1), LOW(IO_LOOKUP_TREE_IC << 1)
000329 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_IC:
00032a 0000                              .db HIGH(0x00), LOW(0x00)
00032b 0052
00032c 5c06                              .db "R", 0, HIGH(IO_LOOKUP_TREE_ICR << 1), LOW(IO_LOOKUP_TREE_ICR << 1)
00032d 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_ICR:
00032e 0000                              .db HIGH(0x00), LOW(0x00)
00032f 0031
000330 6406                              .db "1", 0, HIGH(IO_LOOKUP_TREE_ICR1 << 1), LOW(IO_LOOKUP_TREE_ICR1 << 1)
000331 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_ICR1:
000332 0000                              .db HIGH(0x00), LOW(0x00)
000333 0048
000334 7006                              .db "H", 0, HIGH(IO_LOOKUP_TREE_ICR1H << 1), LOW(IO_LOOKUP_TREE_ICR1H << 1)
000335 004c
000336 7406                              .db "L", 0, HIGH(IO_LOOKUP_TREE_ICR1L << 1), LOW(IO_LOOKUP_TREE_ICR1L << 1)
000337 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_ICR1H:
000338 4700                              .db HIGH(0x47), LOW(0x47)
000339 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_ICR1L:
00033a 4600                              .db HIGH(0x46), LOW(0x46)
00033b 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_M:
00033c 0000                              .db HIGH(0x00), LOW(0x00)
00033d 0043
00033e 8006                              .db "C", 0, HIGH(IO_LOOKUP_TREE_MC << 1), LOW(IO_LOOKUP_TREE_MC << 1)
00033f 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_MC:
000340 0000                              .db HIGH(0x00), LOW(0x00)
000341 0055
000342 8806                              .db "U", 0, HIGH(IO_LOOKUP_TREE_MCU << 1), LOW(IO_LOOKUP_TREE_MCU << 1)
000343 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_MCU:
000344 0000                              .db HIGH(0x00), LOW(0x00)
000345 0043
000346 9006                              .db "C", 0, HIGH(IO_LOOKUP_TREE_MCUC << 1), LOW(IO_LOOKUP_TREE_MCUC << 1)
000347 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_MCUC:
000348 0000                              .db HIGH(0x00), LOW(0x00)
000349 0052
00034a 9c06                              .db "R", 0, HIGH(IO_LOOKUP_TREE_MCUCR << 1), LOW(IO_LOOKUP_TREE_MCUCR << 1)
00034b 0053
00034c a006                              .db "S", 0, HIGH(IO_LOOKUP_TREE_MCUCS << 1), LOW(IO_LOOKUP_TREE_MCUCS << 1)
00034d 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_MCUCR:
00034e 5500                              .db HIGH(0x55), LOW(0x55)
00034f 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_MCUCS:
000350 0000                              .db HIGH(0x00), LOW(0x00)
000351 0052
000352 a806                              .db "R", 0, HIGH(IO_LOOKUP_TREE_MCUCSR << 1), LOW(IO_LOOKUP_TREE_MCUCSR << 1)
000353 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_MCUCSR:
000354 5400                              .db HIGH(0x54), LOW(0x54)
000355 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_O:
000356 0000                              .db HIGH(0x00), LOW(0x00)
000357 0043
000358 b806                              .db "C", 0, HIGH(IO_LOOKUP_TREE_OC << 1), LOW(IO_LOOKUP_TREE_OC << 1)
000359 0053
00035a 1c07                              .db "S", 0, HIGH(IO_LOOKUP_TREE_OS << 1), LOW(IO_LOOKUP_TREE_OS << 1)
00035b 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_OC:
00035c 0000                              .db HIGH(0x00), LOW(0x00)
00035d 0044
00035e c406                              .db "D", 0, HIGH(IO_LOOKUP_TREE_OCD << 1), LOW(IO_LOOKUP_TREE_OCD << 1)
00035f 0052
000360 d006                              .db "R", 0, HIGH(IO_LOOKUP_TREE_OCR << 1), LOW(IO_LOOKUP_TREE_OCR << 1)
000361 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_OCD:
000362 0000                              .db HIGH(0x00), LOW(0x00)
000363 0052
000364 cc06                              .db "R", 0, HIGH(IO_LOOKUP_TREE_OCDR << 1), LOW(IO_LOOKUP_TREE_OCDR << 1)
000365 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_OCDR:
000366 5100                              .db HIGH(0x51), LOW(0x51)
000367 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_OCR:
000368 0000                              .db HIGH(0x00), LOW(0x00)
000369 0030
00036a e006                              .db "0", 0, HIGH(IO_LOOKUP_TREE_OCR0 << 1), LOW(IO_LOOKUP_TREE_OCR0 << 1)
00036b 0031
00036c e406                              .db "1", 0, HIGH(IO_LOOKUP_TREE_OCR1 << 1), LOW(IO_LOOKUP_TREE_OCR1 << 1)
00036d 0032
00036e 1807                              .db "2", 0, HIGH(IO_LOOKUP_TREE_OCR2 << 1), LOW(IO_LOOKUP_TREE_OCR2 << 1)
00036f 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_OCR0:
000370 5c00                              .db HIGH(0x5C), LOW(0x5C)
000371 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_OCR1:
000372 0000                              .db HIGH(0x00), LOW(0x00)
000373 0041
000374 f006                              .db "A", 0, HIGH(IO_LOOKUP_TREE_OCR1A << 1), LOW(IO_LOOKUP_TREE_OCR1A << 1)
000375 0042
000376 0407                              .db "B", 0, HIGH(IO_LOOKUP_TREE_OCR1B << 1), LOW(IO_LOOKUP_TREE_OCR1B << 1)
000377 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_OCR1A:
000378 0000                              .db HIGH(0x00), LOW(0x00)
000379 0048
00037a fc06                              .db "H", 0, HIGH(IO_LOOKUP_TREE_OCR1AH << 1), LOW(IO_LOOKUP_TREE_OCR1AH << 1)
00037b 004c
00037c 0007                              .db "L", 0, HIGH(IO_LOOKUP_TREE_OCR1AL << 1), LOW(IO_LOOKUP_TREE_OCR1AL << 1)
00037d 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_OCR1AH:
00037e 4b00                              .db HIGH(0x4B), LOW(0x4B)
00037f 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_OCR1AL:
000380 4a00                              .db HIGH(0x4A), LOW(0x4A)
000381 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_OCR1B:
000382 0000                              .db HIGH(0x00), LOW(0x00)
000383 0048
000384 1007                              .db "H", 0, HIGH(IO_LOOKUP_TREE_OCR1BH << 1), LOW(IO_LOOKUP_TREE_OCR1BH << 1)
000385 004c
000386 1407                              .db "L", 0, HIGH(IO_LOOKUP_TREE_OCR1BL << 1), LOW(IO_LOOKUP_TREE_OCR1BL << 1)
000387 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_OCR1BH:
000388 4900                              .db HIGH(0x49), LOW(0x49)
000389 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_OCR1BL:
00038a 4800                              .db HIGH(0x48), LOW(0x48)
00038b 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_OCR2:
00038c 4300                              .db HIGH(0x43), LOW(0x43)
00038d 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_OS:
00038e 0000                              .db HIGH(0x00), LOW(0x00)
00038f 0043
000390 2407                              .db "C", 0, HIGH(IO_LOOKUP_TREE_OSC << 1), LOW(IO_LOOKUP_TREE_OSC << 1)
000391 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_OSC:
000392 0000                              .db HIGH(0x00), LOW(0x00)
000393 0043
000394 2c07                              .db "C", 0, HIGH(IO_LOOKUP_TREE_OSCC << 1), LOW(IO_LOOKUP_TREE_OSCC << 1)
000395 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_OSCC:
000396 0000                              .db HIGH(0x00), LOW(0x00)
000397 0041
000398 3407                              .db "A", 0, HIGH(IO_LOOKUP_TREE_OSCCA << 1), LOW(IO_LOOKUP_TREE_OSCCA << 1)
000399 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_OSCCA:
00039a 0000                              .db HIGH(0x00), LOW(0x00)
00039b 004c
00039c 3c07                              .db "L", 0, HIGH(IO_LOOKUP_TREE_OSCCAL << 1), LOW(IO_LOOKUP_TREE_OSCCAL << 1)
00039d 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_OSCCAL:
00039e 5100                              .db HIGH(0x51), LOW(0x51)
00039f 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_P:
0003a0 0000                              .db HIGH(0x00), LOW(0x00)
0003a1 0049
0003a2 4c07                              .db "I", 0, HIGH(IO_LOOKUP_TREE_PI << 1), LOW(IO_LOOKUP_TREE_PI << 1)
0003a3 004f
0003a4 7807                              .db "O", 0, HIGH(IO_LOOKUP_TREE_PO << 1), LOW(IO_LOOKUP_TREE_PO << 1)
0003a5 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_PI:
0003a6 0000                              .db HIGH(0x00), LOW(0x00)
0003a7 004e
0003a8 5407                              .db "N", 0, HIGH(IO_LOOKUP_TREE_PIN << 1), LOW(IO_LOOKUP_TREE_PIN << 1)
0003a9 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_PIN:
0003aa 0000                              .db HIGH(0x00), LOW(0x00)
0003ab 0041
0003ac 6807                              .db "A", 0, HIGH(IO_LOOKUP_TREE_PINA << 1), LOW(IO_LOOKUP_TREE_PINA << 1)
0003ad 0042
0003ae 6c07                              .db "B", 0, HIGH(IO_LOOKUP_TREE_PINB << 1), LOW(IO_LOOKUP_TREE_PINB << 1)
0003af 0043
0003b0 7007                              .db "C", 0, HIGH(IO_LOOKUP_TREE_PINC << 1), LOW(IO_LOOKUP_TREE_PINC << 1)
0003b1 0044
0003b2 7407                              .db "D", 0, HIGH(IO_LOOKUP_TREE_PIND << 1), LOW(IO_LOOKUP_TREE_PIND << 1)
0003b3 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_PINA:
0003b4 3900                              .db HIGH(0x39), LOW(0x39)
0003b5 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_PINB:
0003b6 3600                              .db HIGH(0x36), LOW(0x36)
0003b7 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_PINC:
0003b8 3300                              .db HIGH(0x33), LOW(0x33)
0003b9 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_PIND:
0003ba 3000                              .db HIGH(0x30), LOW(0x30)
0003bb 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_PO:
0003bc 0000                              .db HIGH(0x00), LOW(0x00)
0003bd 0052
0003be 8007                              .db "R", 0, HIGH(IO_LOOKUP_TREE_POR << 1), LOW(IO_LOOKUP_TREE_POR << 1)
0003bf 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_POR:
0003c0 0000                              .db HIGH(0x00), LOW(0x00)
0003c1 0054
0003c2 8807                              .db "T", 0, HIGH(IO_LOOKUP_TREE_PORT << 1), LOW(IO_LOOKUP_TREE_PORT << 1)
0003c3 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_PORT:
0003c4 0000                              .db HIGH(0x00), LOW(0x00)
0003c5 0041
0003c6 9c07                              .db "A", 0, HIGH(IO_LOOKUP_TREE_PORTA << 1), LOW(IO_LOOKUP_TREE_PORTA << 1)
0003c7 0042
0003c8 a007                              .db "B", 0, HIGH(IO_LOOKUP_TREE_PORTB << 1), LOW(IO_LOOKUP_TREE_PORTB << 1)
0003c9 0043
0003ca a407                              .db "C", 0, HIGH(IO_LOOKUP_TREE_PORTC << 1), LOW(IO_LOOKUP_TREE_PORTC << 1)
0003cb 0044
0003cc a807                              .db "D", 0, HIGH(IO_LOOKUP_TREE_PORTD << 1), LOW(IO_LOOKUP_TREE_PORTD << 1)
0003cd 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_PORTA:
0003ce 3b00                              .db HIGH(0x3B), LOW(0x3B)
0003cf 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_PORTB:
0003d0 3800                              .db HIGH(0x38), LOW(0x38)
0003d1 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_PORTC:
0003d2 3500                              .db HIGH(0x35), LOW(0x35)
0003d3 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_PORTD:
0003d4 3200                              .db HIGH(0x32), LOW(0x32)
0003d5 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_S:
0003d6 0000                              .db HIGH(0x00), LOW(0x00)
0003d7 0046
0003d8 bc07                              .db "F", 0, HIGH(IO_LOOKUP_TREE_SF << 1), LOW(IO_LOOKUP_TREE_SF << 1)
0003d9 0050
0003da d807                              .db "P", 0, HIGH(IO_LOOKUP_TREE_SP << 1), LOW(IO_LOOKUP_TREE_SP << 1)
0003db 0052
0003dc 3408                              .db "R", 0, HIGH(IO_LOOKUP_TREE_SR << 1), LOW(IO_LOOKUP_TREE_SR << 1)
0003dd 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_SF:
0003de 0000                              .db HIGH(0x00), LOW(0x00)
0003df 0049
0003e0 c407                              .db "I", 0, HIGH(IO_LOOKUP_TREE_SFI << 1), LOW(IO_LOOKUP_TREE_SFI << 1)
0003e1 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_SFI:
0003e2 0000                              .db HIGH(0x00), LOW(0x00)
0003e3 004f
0003e4 cc07                              .db "O", 0, HIGH(IO_LOOKUP_TREE_SFIO << 1), LOW(IO_LOOKUP_TREE_SFIO << 1)
0003e5 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_SFIO:
0003e6 0000                              .db HIGH(0x00), LOW(0x00)
0003e7 0052
0003e8 d407                              .db "R", 0, HIGH(IO_LOOKUP_TREE_SFIOR << 1), LOW(IO_LOOKUP_TREE_SFIOR << 1)
0003e9 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_SFIOR:
0003ea 5000                              .db HIGH(0x50), LOW(0x50)
0003eb 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_SP:
0003ec 0000                              .db HIGH(0x00), LOW(0x00)
0003ed 0043
0003ee f407                              .db "C", 0, HIGH(IO_LOOKUP_TREE_SPC << 1), LOW(IO_LOOKUP_TREE_SPC << 1)
0003ef 0044
0003f0 0008                              .db "D", 0, HIGH(IO_LOOKUP_TREE_SPD << 1), LOW(IO_LOOKUP_TREE_SPD << 1)
0003f1 0048
0003f2 0c08                              .db "H", 0, HIGH(IO_LOOKUP_TREE_SPH << 1), LOW(IO_LOOKUP_TREE_SPH << 1)
0003f3 004c
0003f4 1008                              .db "L", 0, HIGH(IO_LOOKUP_TREE_SPL << 1), LOW(IO_LOOKUP_TREE_SPL << 1)
0003f5 004d
0003f6 1408                              .db "M", 0, HIGH(IO_LOOKUP_TREE_SPM << 1), LOW(IO_LOOKUP_TREE_SPM << 1)
0003f7 0053
0003f8 2808                              .db "S", 0, HIGH(IO_LOOKUP_TREE_SPS << 1), LOW(IO_LOOKUP_TREE_SPS << 1)
0003f9 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_SPC:
0003fa 0000                              .db HIGH(0x00), LOW(0x00)
0003fb 0052
0003fc fc07                              .db "R", 0, HIGH(IO_LOOKUP_TREE_SPCR << 1), LOW(IO_LOOKUP_TREE_SPCR << 1)
0003fd 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_SPCR:
0003fe 2d00                              .db HIGH(0x2D), LOW(0x2D)
0003ff 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_SPD:
000400 0000                              .db HIGH(0x00), LOW(0x00)
000401 0052
000402 0808                              .db "R", 0, HIGH(IO_LOOKUP_TREE_SPDR << 1), LOW(IO_LOOKUP_TREE_SPDR << 1)
000403 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_SPDR:
000404 2f00                              .db HIGH(0x2F), LOW(0x2F)
000405 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_SPH:
000406 5e00                              .db HIGH(0x5E), LOW(0x5E)
000407 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_SPL:
000408 5d00                              .db HIGH(0x5D), LOW(0x5D)
000409 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_SPM:
00040a 0000                              .db HIGH(0x00), LOW(0x00)
00040b 0043
00040c 1c08                              .db "C", 0, HIGH(IO_LOOKUP_TREE_SPMC << 1), LOW(IO_LOOKUP_TREE_SPMC << 1)
00040d 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_SPMC:
00040e 0000                              .db HIGH(0x00), LOW(0x00)
00040f 0052
000410 2408                              .db "R", 0, HIGH(IO_LOOKUP_TREE_SPMCR << 1), LOW(IO_LOOKUP_TREE_SPMCR << 1)
000411 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_SPMCR:
000412 5700                              .db HIGH(0x57), LOW(0x57)
000413 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_SPS:
000414 0000                              .db HIGH(0x00), LOW(0x00)
000415 0052
000416 3008                              .db "R", 0, HIGH(IO_LOOKUP_TREE_SPSR << 1), LOW(IO_LOOKUP_TREE_SPSR << 1)
000417 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_SPSR:
000418 2e00                              .db HIGH(0x2E), LOW(0x2E)
000419 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_SR:
00041a 0000                              .db HIGH(0x00), LOW(0x00)
00041b 0045
00041c 3c08                              .db "E", 0, HIGH(IO_LOOKUP_TREE_SRE << 1), LOW(IO_LOOKUP_TREE_SRE << 1)
00041d 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_SRE:
00041e 0000                              .db HIGH(0x00), LOW(0x00)
00041f 0047
000420 4408                              .db "G", 0, HIGH(IO_LOOKUP_TREE_SREG << 1), LOW(IO_LOOKUP_TREE_SREG << 1)
000421 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_SREG:
000422 5f00                              .db HIGH(0x5F), LOW(0x5F)
000423 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_T:
000424 0000                              .db HIGH(0x00), LOW(0x00)
000425 0043
000426 5808                              .db "C", 0, HIGH(IO_LOOKUP_TREE_TC << 1), LOW(IO_LOOKUP_TREE_TC << 1)
000427 0049
000428 cc08                              .db "I", 0, HIGH(IO_LOOKUP_TREE_TI << 1), LOW(IO_LOOKUP_TREE_TI << 1)
000429 0057
00042a f808                              .db "W", 0, HIGH(IO_LOOKUP_TREE_TW << 1), LOW(IO_LOOKUP_TREE_TW << 1)
00042b 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_TC:
00042c 0000                              .db HIGH(0x00), LOW(0x00)
00042d 0043
00042e 6408                              .db "C", 0, HIGH(IO_LOOKUP_TREE_TCC << 1), LOW(IO_LOOKUP_TREE_TCC << 1)
00042f 004e
000430 9808                              .db "N", 0, HIGH(IO_LOOKUP_TREE_TCN << 1), LOW(IO_LOOKUP_TREE_TCN << 1)
000431 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_TCC:
000432 0000                              .db HIGH(0x00), LOW(0x00)
000433 0052
000434 6c08                              .db "R", 0, HIGH(IO_LOOKUP_TREE_TCCR << 1), LOW(IO_LOOKUP_TREE_TCCR << 1)
000435 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_TCCR:
000436 0000                              .db HIGH(0x00), LOW(0x00)
000437 0030
000438 7c08                              .db "0", 0, HIGH(IO_LOOKUP_TREE_TCCR0 << 1), LOW(IO_LOOKUP_TREE_TCCR0 << 1)
000439 0031
00043a 8008                              .db "1", 0, HIGH(IO_LOOKUP_TREE_TCCR1 << 1), LOW(IO_LOOKUP_TREE_TCCR1 << 1)
00043b 0032
00043c 9408                              .db "2", 0, HIGH(IO_LOOKUP_TREE_TCCR2 << 1), LOW(IO_LOOKUP_TREE_TCCR2 << 1)
00043d 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_TCCR0:
00043e 5300                              .db HIGH(0x53), LOW(0x53)
00043f 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_TCCR1:
000440 0000                              .db HIGH(0x00), LOW(0x00)
000441 0041
000442 8c08                              .db "A", 0, HIGH(IO_LOOKUP_TREE_TCCR1A << 1), LOW(IO_LOOKUP_TREE_TCCR1A << 1)
000443 0042
000444 9008                              .db "B", 0, HIGH(IO_LOOKUP_TREE_TCCR1B << 1), LOW(IO_LOOKUP_TREE_TCCR1B << 1)
000445 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_TCCR1A:
000446 4f00                              .db HIGH(0x4F), LOW(0x4F)
000447 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_TCCR1B:
000448 4e00                              .db HIGH(0x4E), LOW(0x4E)
000449 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_TCCR2:
00044a 4500                              .db HIGH(0x45), LOW(0x45)
00044b 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_TCN:
00044c 0000                              .db HIGH(0x00), LOW(0x00)
00044d 0054
00044e a008                              .db "T", 0, HIGH(IO_LOOKUP_TREE_TCNT << 1), LOW(IO_LOOKUP_TREE_TCNT << 1)
00044f 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_TCNT:
000450 0000                              .db HIGH(0x00), LOW(0x00)
000451 0030
000452 b008                              .db "0", 0, HIGH(IO_LOOKUP_TREE_TCNT0 << 1), LOW(IO_LOOKUP_TREE_TCNT0 << 1)
000453 0031
000454 b408                              .db "1", 0, HIGH(IO_LOOKUP_TREE_TCNT1 << 1), LOW(IO_LOOKUP_TREE_TCNT1 << 1)
000455 0032
000456 c808                              .db "2", 0, HIGH(IO_LOOKUP_TREE_TCNT2 << 1), LOW(IO_LOOKUP_TREE_TCNT2 << 1)
000457 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_TCNT0:
000458 5200                              .db HIGH(0x52), LOW(0x52)
000459 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_TCNT1:
00045a 0000                              .db HIGH(0x00), LOW(0x00)
00045b 0048
00045c c008                              .db "H", 0, HIGH(IO_LOOKUP_TREE_TCNT1H << 1), LOW(IO_LOOKUP_TREE_TCNT1H << 1)
00045d 004c
00045e c408                              .db "L", 0, HIGH(IO_LOOKUP_TREE_TCNT1L << 1), LOW(IO_LOOKUP_TREE_TCNT1L << 1)
00045f 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_TCNT1H:
000460 4d00                              .db HIGH(0x4D), LOW(0x4D)
000461 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_TCNT1L:
000462 4c00                              .db HIGH(0x4C), LOW(0x4C)
000463 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_TCNT2:
000464 4400                              .db HIGH(0x44), LOW(0x44)
000465 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_TI:
000466 0000                              .db HIGH(0x00), LOW(0x00)
000467 0046
000468 d808                              .db "F", 0, HIGH(IO_LOOKUP_TREE_TIF << 1), LOW(IO_LOOKUP_TREE_TIF << 1)
000469 004d
00046a e408                              .db "M", 0, HIGH(IO_LOOKUP_TREE_TIM << 1), LOW(IO_LOOKUP_TREE_TIM << 1)
00046b 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_TIF:
00046c 0000                              .db HIGH(0x00), LOW(0x00)
00046d 0052
00046e e008                              .db "R", 0, HIGH(IO_LOOKUP_TREE_TIFR << 1), LOW(IO_LOOKUP_TREE_TIFR << 1)
00046f 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_TIFR:
000470 5800                              .db HIGH(0x58), LOW(0x58)
000471 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_TIM:
000472 0000                              .db HIGH(0x00), LOW(0x00)
000473 0053
000474 ec08                              .db "S", 0, HIGH(IO_LOOKUP_TREE_TIMS << 1), LOW(IO_LOOKUP_TREE_TIMS << 1)
000475 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_TIMS:
000476 0000                              .db HIGH(0x00), LOW(0x00)
000477 004b
000478 f408                              .db "K", 0, HIGH(IO_LOOKUP_TREE_TIMSK << 1), LOW(IO_LOOKUP_TREE_TIMSK << 1)
000479 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_TIMSK:
00047a 5900                              .db HIGH(0x59), LOW(0x59)
00047b 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_TW:
00047c 0000                              .db HIGH(0x00), LOW(0x00)
00047d 0041
00047e 1009                              .db "A", 0, HIGH(IO_LOOKUP_TREE_TWA << 1), LOW(IO_LOOKUP_TREE_TWA << 1)
00047f 0042
000480 1c09                              .db "B", 0, HIGH(IO_LOOKUP_TREE_TWB << 1), LOW(IO_LOOKUP_TREE_TWB << 1)
000481 0043
000482 2809                              .db "C", 0, HIGH(IO_LOOKUP_TREE_TWC << 1), LOW(IO_LOOKUP_TREE_TWC << 1)
000483 0044
000484 3409                              .db "D", 0, HIGH(IO_LOOKUP_TREE_TWD << 1), LOW(IO_LOOKUP_TREE_TWD << 1)
000485 0053
000486 4009                              .db "S", 0, HIGH(IO_LOOKUP_TREE_TWS << 1), LOW(IO_LOOKUP_TREE_TWS << 1)
000487 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_TWA:
000488 0000                              .db HIGH(0x00), LOW(0x00)
000489 0052
00048a 1809                              .db "R", 0, HIGH(IO_LOOKUP_TREE_TWAR << 1), LOW(IO_LOOKUP_TREE_TWAR << 1)
00048b 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_TWAR:
00048c 2200                              .db HIGH(0x22), LOW(0x22)
00048d 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_TWB:
00048e 0000                              .db HIGH(0x00), LOW(0x00)
00048f 0052
000490 2409                              .db "R", 0, HIGH(IO_LOOKUP_TREE_TWBR << 1), LOW(IO_LOOKUP_TREE_TWBR << 1)
000491 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_TWBR:
000492 2000                              .db HIGH(0x20), LOW(0x20)
000493 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_TWC:
000494 0000                              .db HIGH(0x00), LOW(0x00)
000495 0052
000496 3009                              .db "R", 0, HIGH(IO_LOOKUP_TREE_TWCR << 1), LOW(IO_LOOKUP_TREE_TWCR << 1)
000497 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_TWCR:
000498 5600                              .db HIGH(0x56), LOW(0x56)
000499 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_TWD:
00049a 0000                              .db HIGH(0x00), LOW(0x00)
00049b 0052
00049c 3c09                              .db "R", 0, HIGH(IO_LOOKUP_TREE_TWDR << 1), LOW(IO_LOOKUP_TREE_TWDR << 1)
00049d 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_TWDR:
00049e 2300                              .db HIGH(0x23), LOW(0x23)
00049f 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_TWS:
0004a0 0000                              .db HIGH(0x00), LOW(0x00)
0004a1 0052
0004a2 4809                              .db "R", 0, HIGH(IO_LOOKUP_TREE_TWSR << 1), LOW(IO_LOOKUP_TREE_TWSR << 1)
0004a3 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_TWSR:
0004a4 2100                              .db HIGH(0x21), LOW(0x21)
0004a5 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_U:
0004a6 0000                              .db HIGH(0x00), LOW(0x00)
0004a7 0042
0004a8 6009                              .db "B", 0, HIGH(IO_LOOKUP_TREE_UB << 1), LOW(IO_LOOKUP_TREE_UB << 1)
0004a9 0043
0004aa 8409                              .db "C", 0, HIGH(IO_LOOKUP_TREE_UC << 1), LOW(IO_LOOKUP_TREE_UC << 1)
0004ab 0044
0004ac a809                              .db "D", 0, HIGH(IO_LOOKUP_TREE_UD << 1), LOW(IO_LOOKUP_TREE_UD << 1)
0004ad 0052
0004ae b409                              .db "R", 0, HIGH(IO_LOOKUP_TREE_UR << 1), LOW(IO_LOOKUP_TREE_UR << 1)
0004af 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_UB:
0004b0 0000                              .db HIGH(0x00), LOW(0x00)
0004b1 0052
0004b2 6809                              .db "R", 0, HIGH(IO_LOOKUP_TREE_UBR << 1), LOW(IO_LOOKUP_TREE_UBR << 1)
0004b3 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_UBR:
0004b4 0000                              .db HIGH(0x00), LOW(0x00)
0004b5 0052
0004b6 7009                              .db "R", 0, HIGH(IO_LOOKUP_TREE_UBRR << 1), LOW(IO_LOOKUP_TREE_UBRR << 1)
0004b7 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_UBRR:
0004b8 0000                              .db HIGH(0x00), LOW(0x00)
0004b9 0048
0004ba 7c09                              .db "H", 0, HIGH(IO_LOOKUP_TREE_UBRRH << 1), LOW(IO_LOOKUP_TREE_UBRRH << 1)
0004bb 004c
0004bc 8009                              .db "L", 0, HIGH(IO_LOOKUP_TREE_UBRRL << 1), LOW(IO_LOOKUP_TREE_UBRRL << 1)
0004bd 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_UBRRH:
0004be 4000                              .db HIGH(0x40), LOW(0x40)
0004bf 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_UBRRL:
0004c0 2900                              .db HIGH(0x29), LOW(0x29)
0004c1 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_UC:
0004c2 0000                              .db HIGH(0x00), LOW(0x00)
0004c3 0053
0004c4 8c09                              .db "S", 0, HIGH(IO_LOOKUP_TREE_UCS << 1), LOW(IO_LOOKUP_TREE_UCS << 1)
0004c5 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_UCS:
0004c6 0000                              .db HIGH(0x00), LOW(0x00)
0004c7 0052
0004c8 9409                              .db "R", 0, HIGH(IO_LOOKUP_TREE_UCSR << 1), LOW(IO_LOOKUP_TREE_UCSR << 1)
0004c9 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_UCSR:
0004ca 0000                              .db HIGH(0x00), LOW(0x00)
0004cb 0041
0004cc a009                              .db "A", 0, HIGH(IO_LOOKUP_TREE_UCSRA << 1), LOW(IO_LOOKUP_TREE_UCSRA << 1)
0004cd 0042
0004ce a409                              .db "B", 0, HIGH(IO_LOOKUP_TREE_UCSRB << 1), LOW(IO_LOOKUP_TREE_UCSRB << 1)
0004cf 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_UCSRA:
0004d0 2b00                              .db HIGH(0x2B), LOW(0x2B)
0004d1 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_UCSRB:
0004d2 2a00                              .db HIGH(0x2A), LOW(0x2A)
0004d3 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_UD:
0004d4 0000                              .db HIGH(0x00), LOW(0x00)
0004d5 0052
0004d6 b009                              .db "R", 0, HIGH(IO_LOOKUP_TREE_UDR << 1), LOW(IO_LOOKUP_TREE_UDR << 1)
0004d7 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_UDR:
0004d8 2c00                              .db HIGH(0x2C), LOW(0x2C)
0004d9 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_UR:
0004da 0000                              .db HIGH(0x00), LOW(0x00)
0004db 0053
0004dc bc09                              .db "S", 0, HIGH(IO_LOOKUP_TREE_URS << 1), LOW(IO_LOOKUP_TREE_URS << 1)
0004dd 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_URS:
0004de 0000                              .db HIGH(0x00), LOW(0x00)
0004df 0045
0004e0 c409                              .db "E", 0, HIGH(IO_LOOKUP_TREE_URSE << 1), LOW(IO_LOOKUP_TREE_URSE << 1)
0004e1 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_URSE:
0004e2 0000                              .db HIGH(0x00), LOW(0x00)
0004e3 004c
0004e4 cc09                              .db "L", 0, HIGH(IO_LOOKUP_TREE_URSEL << 1), LOW(IO_LOOKUP_TREE_URSEL << 1)
0004e5 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_URSEL:
0004e6 4000                              .db HIGH(0x40), LOW(0x40)
0004e7 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_W:
0004e8 0000                              .db HIGH(0x00), LOW(0x00)
0004e9 0044
0004ea d809                              .db "D", 0, HIGH(IO_LOOKUP_TREE_WD << 1), LOW(IO_LOOKUP_TREE_WD << 1)
0004eb 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_WD:
0004ec 0000                              .db HIGH(0x00), LOW(0x00)
0004ed 0054
0004ee e009                              .db "T", 0, HIGH(IO_LOOKUP_TREE_WDT << 1), LOW(IO_LOOKUP_TREE_WDT << 1)
0004ef 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_WDT:
0004f0 0000                              .db HIGH(0x00), LOW(0x00)
0004f1 0043
0004f2 e809                              .db "C", 0, HIGH(IO_LOOKUP_TREE_WDTC << 1), LOW(IO_LOOKUP_TREE_WDTC << 1)
0004f3 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_WDTC:
0004f4 0000                              .db HIGH(0x00), LOW(0x00)
0004f5 0052
0004f6 f009                              .db "R", 0, HIGH(IO_LOOKUP_TREE_WDTCR << 1), LOW(IO_LOOKUP_TREE_WDTCR << 1)
0004f7 0000                              .db 0, 0
                                 IO_LOOKUP_TREE_WDTCR:
0004f8 4100                              .db HIGH(0x41), LOW(0x41)
0004f9 0000                      
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Read IO Register
                                 ;;
                                 ;; Inputs:
                                 ;; - Command Length           <- SP + 5
                                 ;; - Command String Pointer H <- SP + 4
                                 ;; - Command String Pointer L <- SP + 3 (First Byte Before Return Address)
                                 ;;
                                 ;; Outputs:
                                 ;; - No Output                -> SP + 5
                                 ;; - No Output                -> SP + 4
                                 ;; - No Output                -> SP + 3 (First Byte Before Return Address)
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
0004fa 5245
0004fb 4f52
0004fc 3a52
0004fd 4920
0004fe 766e
0004ff 6c61
000500 6469
000501 4920
000502 706e
000503 7475
000504 4620
000505 726f
000506 6020
000507 6552
000508 6461
000509 4f49
00050a 0d60
00050b 0000                      READ_IO_ERR_MSG: .db "ERROR: Invalid Input For `ReadIO`", ASCII_NEW_LINE, 0, 0
                                 
                                 
                                 READ_IO:
                                 	.def TEMP = R16
                                 
                                 	; Number of pushes
                                 	.set STACK_OFFSET = 5
                                 	; Backup Registers
00050c 930f                      	push TEMP
00050d 93df                      	push YH
00050e 93cf                      	push YL
00050f 93ff                      	push ZH
000510 93ef                      	push ZL
                                 
                                 	; Load Stack Pointer
                                 	; Y <- SP
000511 b7de                      	in YH, SPH
000512 b7cd                      	in YL, SPL
                                 
                                 	; Load Command Length
000513 850a                      	ldd TEMP, Y+(STACK_OFFSET + 5)
                                 
                                 	; o (X)+
000514 3003                      	cpi TEMP, 3
000515 f0e0                      	brlo READ_IO_ERR
                                 
                                 	; Load Command Address
000516 85f9                      	ldd ZH, Y+(STACK_OFFSET + 4)
000517 85e8                      	ldd ZL, Y+(STACK_OFFSET + 3)
                                 
                                 	; Get string address of IO register name
000518 9632                      	adiw ZH:ZL, 2
                                 	; Decrease length by 2
000519 5002                      	subi TEMP, 2
                                 
00051a 930f                      	push TEMP
00051b 93ff                      	push ZH
00051c 93ef                      	push ZL
00051d dd1e                      	rcall ASCII_IO_REG_TO_MEM_ADDR
00051e 91ef                      	pop ZL
00051f 91ff                      	pop ZH
000520 910f                      	pop TEMP
                                 	; IF (SUBROUTINE ERR != 0) THEN ERR
000521 3000                      	cpi TEMP, 0
000522 f479                      	brne READ_IO_ERR
                                 
                                 	; Read IO Register Value
000523 8100                      	ld TEMP, Z
                                 	; Print as ASCII
000524 930f                      	push TEMP
000525 930f                      	push TEMP
000526 db78                      	rcall HEX_BYTE_TO_ASCII
                                 	; Get Least Significant Char
000527 910f                      	pop TEMP
000528 dc0f                      	rcall PUTCHAR
000529 930f                      	push TEMP
00052a dc0d                      	rcall PUTCHAR
00052b 910f                      	pop TEMP
00052c 910f                      	pop TEMP
                                 
                                 	; Print New Line
00052d e00d                      	ldi TEMP, ASCII_NEW_LINE
00052e 930f                      	push TEMP
00052f dc08                      	rcall PUTCHAR
000530 910f                      	pop TEMP
                                 
000531 c007                      	rjmp READ_IO_RET
                                 
                                 	READ_IO_ERR:
000532 e009                      		ldi TEMP, HIGH(READ_IO_ERR_MSG << 1)
000533 930f                      		push TEMP
000534 ef04                      		ldi TEMP, LOW (READ_IO_ERR_MSG << 1)
000535 930f                      		push TEMP
000536 dc0e                      		rcall PUTSTR
000537 910f                      		pop TEMP
000538 910f                      		pop TEMP
                                 
                                 	READ_IO_RET:
                                 		; Restore Registers
000539 91ef                      		pop ZL
00053a 91ff                      		pop ZH
00053b 91cf                      		pop YL
00053c 91df                      		pop YH
00053d 910f                      		pop TEMP
                                 
00053e 9508                      		ret
                                 	
                                 .INCLUDE "write-io.inc"
                                 
                                 ;; Include Guard
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 .ifdef INCLUDE_WRITE_IO
                                 .endif
                                 
                                 .equ INCLUDE_WRITE_IO = 1
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Imports
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 .INCLUDE "ascii.inc"
                                 
                                 ;; Include Guard
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 .ifdef INCLUDE_ASCII
                                 .INCLUDE "io.inc"
                                 
                                 ;; Include Guard
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 .ifdef INCLUDE_IO
                                 .INCLUDE "io-name-to-addr.inc"
                                 
                                 ;; Include Guard
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 .ifdef INCLUDE_IO_NAME_TO_ADDR
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Write IO Register
                                 ;;
                                 ;; Inputs:
                                 ;; - Command Length           <- SP + 5
                                 ;; - Command String Pointer H <- SP + 4
                                 ;; - Command String Pointer L <- SP + 3 (First Byte Before Return Address)
                                 ;;
                                 ;; Outputs:
                                 ;; - No Output                -> SP + 5
                                 ;; - No Output                -> SP + 4
                                 ;; - No Output                -> SP + 3 (First Byte Before Return Address)
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
00053f 5245
000540 4f52
000541 3a52
000542 4920
000543 766e
000544 6c61
000545 6469
000546 4920
000547 706e
000548 7475
000549 4620
00054a 726f
00054b 6020
00054c 7257
00054d 7469
00054e 4965
00054f 604f
000550 000d                      WRITE_IO_ERR_MSG: .db "ERROR: Invalid Input For `WriteIO`", ASCII_NEW_LINE, 0
000551 4f49
000552 5220
000553 6765
000554 7369
000555 6574
000556 2072
000557 7257
000558 7469
000559 2065
00055a 6f43
00055b 706d
00055c 656c
00055d 6574
00055e 000d                      WRITE_IO_SUC_MSG: .db "IO Register Write Complete", ASCII_NEW_LINE, 0
                                 
                                 
                                 WRITE_IO:
                                 	.def TEMP = R16
                                 	.def BYTE = R17
                                 
                                 	; Number of pushes
                                 	.set STACK_OFFSET = 6
                                 	; Backup Registers
00055f 930f                      	push TEMP
000560 931f                      	push BYTE
000561 93df                      	push YH
000562 93cf                      	push YL
000563 93ff                      	push ZH
000564 93ef                      	push ZL
                                 
                                 	; Load Stack Pointer
                                 	; Y <- SP
000565 b7de                      	in YH, SPH
000566 b7cd                      	in YL, SPL
                                 
                                 	; Load Command Length
000567 850b                      	ldd TEMP, Y+(STACK_OFFSET + 5)
                                 
                                 	; i YY (X)+
000568 3006                      	cpi TEMP, 6
000569 f110                      	brlo WRITE_IO_ERR
                                 
                                 	; Load Command Address
00056a 85fa                      	ldd ZH, Y+(STACK_OFFSET + 4)
00056b 85e9                      	ldd ZL, Y+(STACK_OFFSET + 3)
                                 
                                 	; Get string address of byte to store
00056c 9632                      	adiw ZH:ZL, 2
                                 
00056d e000                      	ldi TEMP, 0
00056e 930f                      	push TEMP
00056f 93ff                      	push ZH
000570 93ef                      	push ZL
000571 dac4                      	rcall ASCII_WORD_TO_HEX
000572 911f                      	pop BYTE
000573 910f                      	pop TEMP
000574 910f                      	pop TEMP
                                 	; IF (SUBROUTINE ERR != 0) THEN ERR
000575 3000                      	cpi TEMP, 0
000576 f4a9                      	brne WRITE_IO_ERR
                                 
                                 	; Get string address of IO register name
000577 9633                      	adiw ZH:ZL, 3
                                 	; Load Command Length
000578 850b                      	ldd TEMP, Y+(STACK_OFFSET + 5)
                                 	; Decrease length by 5
000579 5005                      	subi TEMP, 5
                                 
00057a 930f                      	push TEMP
00057b 93ff                      	push ZH
00057c 93ef                      	push ZL
00057d dcbe                      	rcall ASCII_IO_REG_TO_MEM_ADDR
00057e 91ef                      	pop ZL
00057f 91ff                      	pop ZH
000580 910f                      	pop TEMP
                                 	; IF (SUBROUTINE ERR != 0) THEN ERR
000581 3000                      	cpi TEMP, 0
000582 f449                      	brne WRITE_IO_ERR
                                 
000583 8310                      	st Z, BYTE
                                 
000584 e00a                      	ldi TEMP, HIGH(WRITE_IO_SUC_MSG << 1)
000585 930f                      	push TEMP
000586 ea02                      	ldi TEMP, LOW (WRITE_IO_SUC_MSG << 1)
000587 930f                      	push TEMP
000588 dbbc                      	rcall PUTSTR
000589 910f                      	pop TEMP
00058a 910f                      	pop TEMP
                                 
00058b c007                      	rjmp WRITE_IO_RET
                                 
                                 	WRITE_IO_ERR:
00058c e00a                      		ldi TEMP, HIGH(WRITE_IO_ERR_MSG << 1)
00058d 930f                      		push TEMP
00058e e70e                      		ldi TEMP, LOW (WRITE_IO_ERR_MSG << 1)
00058f 930f                      		push TEMP
000590 dbb4                      		rcall PUTSTR
000591 910f                      		pop TEMP
000592 910f                      		pop TEMP
                                 
                                 	WRITE_IO_RET:
                                 		; Restore Registers
000593 91ef                      		pop ZL
000594 91ff                      		pop ZH
000595 91cf                      		pop YL
000596 91df                      		pop YH
000597 911f                      		pop BYTE
000598 910f                      		pop TEMP
                                 
000599 9508                      		ret
                                 	
                                 	.undef TEMP
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; # Program Memory Constants
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 .equ PROMPT_LEN = 6
                                 
                                 PROMPT:
00059a 4746
00059b 3e3e
00059c 203e
00059d 0000                      	.db "FG>>> ", 0, 0
                                 REPEATED_COMMAND_NOTIFICATION:
00059e 4550
00059f 4952
0005a0 444f
0005a1 4349
0005a2 4320
0005a3 444d
0005a4 203a
0005a5 0000                      	.db "PERIODIC CMD: ", 0, 0
                                 EXEC_INVALID_CMD:
0005a6 5245
0005a7 4f52
0005a8 3a52
0005a9 4920
0005aa 766e
0005ab 6c61
0005ac 6469
0005ad 4320
0005ae 6d6f
0005af 616d
0005b0 646e
0005b1 000d                      	.db "ERROR: Invalid Command", ASCII_NEW_LINE, 0
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; # Main Routine
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 RESET:
                                 	; Set Register Aliases
                                 	.def TEMP = R16
                                 
                                 	; Initialize Stack Pointer
0005b2 e008                      	ldi TEMP, HIGH(RAMEND)
0005b3 bf0e                      	out SPH, TEMP
0005b4 e50f                      	ldi TEMP, LOW(RAMEND)
0005b5 bf0d                      	out SPL, TEMP
                                 
                                 	; Initialize USART BEGIN
                                 
                                 	; Set Baud Rate
0005b6 e000                      	ldi TEMP, HIGH(BAUD_UBRR)
0005b7 bd00                      	out UBRRH, TEMP
0005b8 e109                      	ldi TEMP, LOW(BAUD_UBRR)
0005b9 b909                      	out UBRRL, TEMP
                                 
                                 	; TXEN  -> Enable Transmitter
                                 	; RXEN  -> Enable Receiver
                                 	; RXCIE -> Enable Rx Complete Interrupt
0005ba e908                      	ldi TEMP, (1 << RXCIE) | (1 << RXEN) | (1 << TXEN)
0005bb b90a                      	out UCSRB, TEMP
                                 
                                 	; Set Frame Format:	; - 8 Data Bits	; - 2 Stop Bits	ldi TEMP, (1 << URSEL) | (1 << USBS) | (1 << UCSZ0) | (1 << UCSZ1)	out UCSRC, TEMP
                                 
                                 	; Initialize USART END
                                 
                                 	; Initialize command index to 0
0005bc e0f0                      	ldi ZH, HIGH(CMD_IDX)
0005bd e8e0                      	ldi ZL, LOW (CMD_IDX)
0005be 2700                      	clr TEMP
0005bf 8300                      	st Z, TEMP
                                 
                                 	; Initialize repeat index to 0
0005c0 e0f1                      	ldi ZH, HIGH(REPEAT_IDX)
0005c1 e0ed                      	ldi ZL, LOW (REPEAT_IDX)
0005c2 2700                      	clr TEMP
0005c3 8300                      	st Z, TEMP
                                 
                                 	; Set Timer 1 Max Value
0005c4 e00f                      	ldi TEMP, HIGH(T1_MAX_VAL)
0005c5 bd0b                      	out OCR1AH, TEMP
0005c6 ef0f                      	ldi TEMP, LOW(T1_MAX_VAL)
0005c7 bd0a                      	out OCR1AL, TEMP
                                 
                                 	; Enable Timer 1 Output Compare Interrupt
0005c8 e100                      	ldi TEMP, 1 << OCIE1A
0005c9 bf09                      	out TIMSK, TEMP
0005ca e000                      	ldi TEMP, 0
0005cb bd0f                      	out TCCR1A, TEMP
                                 
                                 	; Set Timer 1 Prescale
0005cc e00d                      	ldi TEMP, (1 << WGM12) | (1 << CS12) | (1 << CS10)
0005cd bd0e                      	out TCCR1B, TEMP
                                 
                                 	; Enable Global Interrupts
0005ce 9478                          sei
                                 
                                 	RESET_LOOP:
0005cf cfff                      		rjmp RESET_LOOP
                                 
                                 	; Clear Register Aliases
                                 	.undef TEMP
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; # Interrupt Handlers
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 USART_RX_COMPLETE:
                                 	; Set Register Aliases
                                 	.def TEMP = R16
                                 	.def CHAR = R17
                                 	.def IDX  = R18
                                 
                                 	; Backup Registers
0005d0 930f                      	push TEMP
0005d1 b70f                      	in TEMP, SREG
0005d2 930f                      	push TEMP
0005d3 93ff                      	push ZH
0005d4 93ef                      	push ZL
0005d5 93df                      	push YH
0005d6 93cf                      	push YL
0005d7 931f                      	push CHAR
0005d8 932f                      	push IDX
                                 
                                 	; Read ASCII Character
0005d9 b11c                      	in CHAR, UDR
                                 
                                 	; Read command index
0005da e0f0                      	ldi ZH, HIGH(CMD_IDX)
0005db e8e0                      	ldi ZL, LOW (CMD_IDX)
0005dc 8120                      	ld IDX, Z
                                 
0005dd 301d                      	cpi CHAR, ASCII_NEW_LINE
                                 
0005de f4b9                      	brne USART_RX_COMPLETE_NOT_DONE
                                 
0005df e00d                      	ldi R16, ASCII_NEW_LINE
0005e0 930f                      	push R16
0005e1 db56                      	rcall PUTCHAR
0005e2 910f                      	pop R16
                                 	
0005e3 932f                      	push IDX
0005e4 e000                      	ldi TEMP, HIGH(CMD)
0005e5 930f                      	push TEMP
0005e6 e600                      	ldi TEMP, LOW (CMD)
0005e7 930f                      	push TEMP
0005e8 d075                      	rcall EXECUTE
0005e9 910f                      	pop TEMP
0005ea 910f                      	pop TEMP
0005eb 910f                      	pop TEMP
                                 
                                 	; Print Prompt
0005ec e00b                      	ldi TEMP, HIGH(PROMPT << 1)
0005ed 930f                      	push TEMP
0005ee e304                      	ldi TEMP, LOW (PROMPT << 1)
0005ef 930f                      	push TEMP
0005f0 db54                      	rcall PUTSTR
0005f1 910f                      	pop TEMP
0005f2 910f                      	pop TEMP
                                 
                                 	; Reset index
0005f3 2722                      	clr IDX
0005f4 8320                      	st Z, IDX
                                 
0005f5 c01e                      	rjmp USART_RX_COMPLETE_RET
                                 
                                 	USART_RX_COMPLETE_NOT_DONE:
0005f6 3018                      		cpi CHAR, ASCII_BACKSPACE
                                 
0005f7 f471                      		brne USART_RX_COMPLETE_NOT_BACKSPACE
                                 
0005f8 3020                      		cpi IDX, 0
0005f9 f0d1                      		breq USART_RX_COMPLETE_RET
                                 
0005fa 952a                      		dec IDX
0005fb 8320                      		st Z, IDX
                                 		; Echo backspace back
                                 		; Backspace -> Space -> Backspace
0005fc e008                      		ldi R16, ASCII_BACKSPACE
0005fd 930f                      		push R16
0005fe db39                      		rcall PUTCHAR
0005ff e200                      		ldi R16, ASCII_SPACE
000600 930f                      		push R16
000601 db36                      		rcall PUTCHAR
000602 910f                      		pop R16
000603 db34                      		rcall PUTCHAR
000604 910f                      		pop R16
                                 
000605 c00e                      		rjmp USART_RX_COMPLETE_RET
                                 
                                 	USART_RX_COMPLETE_NOT_BACKSPACE:
                                 		; Handle full command buffer
000606 3220                      		cpi IDX, CMD_MAX_LEN
                                 
000607 f061                      		breq USART_RX_COMPLETE_RET
                                 
                                 		; Get next-character index
000608 e0d0                      		ldi YH, HIGH(CMD)
000609 e6c0                      		ldi YL, LOW(CMD)
00060a 0fc2                      		add YL, IDX
00060b 2700                      		clr TEMP
00060c 1fd0                      		adc YH, TEMP
                                 
                                 		; Store character
00060d 8318                      		st Y, CHAR
                                 	
                                 		; Increment index
00060e 9523                      		inc IDX
00060f 8320                      		st Z, IDX
                                 
                                 		; Echo character back
000610 2f01                      		mov R16, CHAR
000611 930f                      		push R16
000612 db25                      		rcall PUTCHAR
000613 910f                      		pop R16
                                 
                                 	USART_RX_COMPLETE_RET:
                                 		; Restore Registers
000614 912f                      		pop IDX
000615 911f                      		pop CHAR
000616 91cf                      		pop YL
000617 91df                      		pop YH
000618 91ef                      		pop ZL
000619 91ff                      		pop ZH
00061a 910f                      		pop TEMP
00061b bf0f                      		out SREG, TEMP
00061c 910f                      		pop TEMP
                                 
00061d 9518                      		reti
                                 
                                 	; Clear Register Aliases
                                 	.undef TEMP
                                 	.undef CHAR
                                 	.undef IDX
                                 
                                 
                                 T1_COMPA:
                                 	; Set Register Aliases
                                 	.def TEMP = R16
                                 	.def CNTR = R17
                                 	.def IDX  = R18
                                 	.def FLAG = R19
                                 
                                 	; Backup Registers
00061e 930f                      	push TEMP
00061f b70f                      	in TEMP, SREG
000620 930f                      	push TEMP
000621 931f                      	push CNTR
000622 932f                      	push IDX
000623 933f                      	push FLAG
000624 93df                      	push YH
000625 93cf                      	push YL
                                 
                                 	; Get Commands Count
000626 e0d1                      	ldi YH, HIGH(REPEAT_IDX)
000627 e0cd                      	ldi YL, LOW (REPEAT_IDX)
000628 8128                      	ld IDX, Y
                                 
000629 3020                      	cpi IDX, 0
00062a f151                      	breq T1_COMPA_RET
                                 
00062b e0d0                      	ldi YH, HIGH(REPEAT_CMDS)
00062c e8c1                      	ldi YL, LOW (REPEAT_CMDS)
                                 
                                 	; No Command Executed Yet
00062d e030                      	ldi FLAG, 0
                                 
00062e e010                      	ldi CNTR, 0
                                 
                                 	T1_COMPA_EXEC:
                                 		; Get Count
00062f 8108                      		ld TEMP, Y
000630 950a                      		dec TEMP
000631 3000                      		cpi TEMP, 0
000632 f4c9                      		brne T1_COMPA_NO_EXEC
                                 
                                 		; Execute Command
                                 
000633 3030                      		cpi FLAG, 0
000634 f411                      		brne NO_CLEAR
                                 
000635 d1e4                      		rcall CLEAR_LINE
000636 e031                      		ldi FLAG, 1
                                 
                                 		NO_CLEAR:
                                 
                                 		; Print Notification
000637 e00b                      		ldi TEMP, HIGH(REPEATED_COMMAND_NOTIFICATION << 1)
000638 930f                      		push TEMP
000639 e30c                      		ldi TEMP, LOW (REPEATED_COMMAND_NOTIFICATION << 1)
00063a 930f                      		push TEMP
00063b db09                      		rcall PUTSTR
00063c 910f                      		pop TEMP
00063d 910f                      		pop TEMP
                                 
                                 		; Get Interval
00063e 9621                      		adiw YH:YL, 1
00063f 8108                      		ld TEMP, Y
                                 		; Set Count To Interval
000640 930a                      		st -Y, TEMP
                                 
                                 		; Get Command Length
000641 9622                      		adiw YH:YL, 2
000642 9109                      		ld TEMP, Y+
                                 
                                 		; Execute Command
000643 930f                      		push TEMP
000644 93df                      		push YH
000645 93cf                      		push YL
000646 d017                      		rcall EXECUTE
000647 910f                      		pop TEMP
000648 910f                      		pop TEMP
000649 910f                      		pop TEMP
                                 
00064a 9723                      		sbiw YH:YL, 3
                                 
00064b c001                      		rjmp T1_COMPA_COMMON
                                 
                                 		T1_COMPA_NO_EXEC:
                                 			; Set Decreased Count
00064c 8308                      			st Y, TEMP
                                 
                                 		T1_COMPA_COMMON:
00064d 5dcd                      			subi YL, -REPEAT_CMD_LEN
00064e 40d0                      			sbci YH, 0
00064f 9513                      			inc CNTR
000650 1712                      			cp CNTR, IDX
000651 f6e9                      			brne T1_COMPA_EXEC
                                 
000652 3030                      	cpi FLAG, 0
000653 f009                      	breq T1_COMPA_RET
                                 
000654 d1ea                      	rcall DIRTY_LINE
                                 
                                 	T1_COMPA_RET:
                                 		; Restore Registers
000655 91cf                      		pop YL
000656 91df                      		pop YH
000657 913f                      		pop FLAG
000658 912f                      		pop IDX
000659 911f                      		pop CNTR
00065a 910f                      		pop TEMP
00065b bf0f                      		out SREG, TEMP
00065c 910f                      		pop TEMP
                                 
00065d 9518                      		reti
                                 
                                 	; Clear Register Aliases
                                 	.undef TEMP
                                 	.undef CNTR
                                 	.undef IDX
                                 	.undef FLAG
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; # Subroutines
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Execute Command
                                 ;;
                                 ;; Inputs:
                                 ;; - Command Length           <- SP + 5
                                 ;; - Command String Pointer H <- SP + 4
                                 ;; - Command String Pointer L <- SP + 3 (First Byte Before Return Address)
                                 ;;
                                 ;; Outputs:
                                 ;; - No Output                -> SP + 5
                                 ;; - No Output                -> SP + 4
                                 ;; - No Output                -> SP + 3 (First Byte Before Return Address)
                                 ;;
                                 ;; Supported Commands:
                                 ;; - Read Memory:
                                 ;;   r $BEG_ADDR $END_ADDR
                                 ;; - Write Memory:
                                 ;;   w $BEG_ADDR $BYTES_TO_WRITE
                                 ;; - Read IO Register:
                                 ;;   o $IO_REG_NAME
                                 ;; - Write IO Register:
                                 ;;   i $IO_REG_NAME $BYTE
                                 ;; - Repeat Command:
                                 ;;   p $SECONDS $COMMAND
                                 ;; - List Repeated Commands:
                                 ;;   l
                                 ;; - Deleted Repeated Command:
                                 ;;   d $IDX
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 EXECUTE:
                                 	.def TEMP = R16
                                 	
                                 	; Number of pushes
                                 	.set STACK_OFFSET = 5
                                 	; Backup Registers
00065e 930f                      	push TEMP
00065f 93df                      	push YH
000660 93cf                      	push YL
000661 93ff                      	push ZH
000662 93ef                      	push ZL
                                 
                                 	; Load Stack Pointer
                                 	; Y <- SP
000663 b7de                      	in YH, SPH
000664 b7cd                      	in YL, SPL
                                 
                                 	; Load Command Length
000665 850a                      	ldd TEMP, Y+(STACK_OFFSET + 5)
                                 	; Push Command Length (Prepare Subroutine Call)
000666 930f                      	push TEMP
                                 
                                 	; Two Dummy Pushes In Case Error
000667 930f                      	push TEMP
000668 930f                      	push TEMP
                                 
                                 	; Empty command
000669 3000                      	cpi TEMP, 0
00066a f169                      	breq EXECUTE_INVALID
                                 
                                 	; Load Command Address
00066b 85f9                      	ldd ZH, Y+(STACK_OFFSET + 4)
00066c 85e8                      	ldd ZL, Y+(STACK_OFFSET + 3)
                                 
00066d 3001                      	cpi TEMP, 1
00066e f041                      	breq SKIP_SPACE_CHECK
                                 	; Get second character
00066f 93ff                      	push ZH
000670 93ef                      	push ZL
000671 9631                      	adiw ZH:ZL, 1
000672 8100                      	ld TEMP, Z
000673 91ef                      	pop ZL
000674 91ff                      	pop ZH
                                 	
000675 3200                      	cpi TEMP, ASCII_SPACE
000676 f509                      	brne EXECUTE_INVALID
                                 
                                 	SKIP_SPACE_CHECK:
                                 
                                 	; Remove Dummy Pushes
000677 910f                      	pop TEMP
000678 910f                      	pop TEMP
                                 
                                 	; Push Command Length (Prepare Subroutine Call)
000679 93ff                      	push ZH
00067a 93ef                      	push ZL
                                 	
00067b 8100                      	ld TEMP, Z
                                 
00067c 3702                      	cpi TEMP, ASCII_LOWER_R
00067d f411                      	brne EXECUTE_W
00067e daef                      	rcall READ_MEM
00067f c01f                      	rjmp  EXECUTE_RET
                                 
                                 	EXECUTE_W:
000680 3707                      		cpi TEMP, ASCII_LOWER_W
000681 f411                      		brne EXECUTE_O
000682 db60                      		rcall WRITE_MEM
000683 c01b                      		rjmp  EXECUTE_RET
                                 
                                 	EXECUTE_O:
000684 360f                      		cpi TEMP, ASCII_LOWER_O
000685 f411                      		brne EXECUTE_I
000686 de85                      		rcall READ_IO
000687 c017                      		rjmp  EXECUTE_RET
                                 
                                 	EXECUTE_I:
000688 3609                      		cpi TEMP, ASCII_LOWER_I
000689 f411                      		brne EXECUTE_P
00068a ded4                      		rcall WRITE_IO
00068b c013                      		rjmp  EXECUTE_RET
                                 
                                 	EXECUTE_P:
00068c 3700                      		cpi TEMP, ASCII_LOWER_P
00068d f411                      		brne EXECUTE_L
00068e d03a                      		rcall REPEAT_CMD
00068f c00f                      		rjmp  EXECUTE_RET
                                 
                                 	EXECUTE_L:
000690 360c                      		cpi TEMP, ASCII_LOWER_L
000691 f411                      		brne EXECUTE_D
000692 d0ac                      		rcall LIST_REPEAT_CMD
000693 c00b                      		rjmp  EXECUTE_RET
                                 
                                 	EXECUTE_D:
000694 3604                      		cpi TEMP, ASCII_LOWER_D
000695 f411                      		brne EXECUTE_INVALID
000696 d120                      		rcall DEL_REPEAT_CMD
000697 c007                      		rjmp  EXECUTE_RET
                                 	
                                 	EXECUTE_INVALID:
                                 		; Print Error
000698 e00b                      		ldi TEMP, HIGH(EXEC_INVALID_CMD << 1)
000699 930f                      		push TEMP
00069a e40c                      		ldi TEMP, LOW (EXEC_INVALID_CMD << 1)
00069b 930f                      		push TEMP
00069c daa8                      		rcall PUTSTR
00069d 910f                      		pop TEMP
00069e 910f                      		pop TEMP
                                 
                                 	EXECUTE_RET:
00069f 910f                      		pop TEMP
0006a0 910f                      		pop TEMP
0006a1 910f                      		pop TEMP
                                 
                                 		; Restore Registers
0006a2 91ef                      		pop ZL
0006a3 91ff                      		pop ZH
0006a4 91cf                      		pop YL
0006a5 91df                      		pop YH
0006a6 910f                      		pop TEMP
                                 	
0006a7 9508                      		ret
                                 
                                 	.undef TEMP
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Repeat Command (Add)
                                 ;;
                                 ;; Inputs:
                                 ;; - Command Length           <- SP + 5
                                 ;; - Command String Pointer H <- SP + 4
                                 ;; - Command String Pointer L <- SP + 3 (First Byte Before Return Address)
                                 ;;
                                 ;; Outputs:
                                 ;; - No Output                -> SP + 5
                                 ;; - No Output                -> SP + 4
                                 ;; - No Output                -> SP + 3 (First Byte Before Return Address)
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
0006a8 5245
0006a9 4f52
0006aa 3a52
0006ab 4920
0006ac 766e
0006ad 6c61
0006ae 6469
0006af 4920
0006b0 706e
0006b1 7475
0006b2 4620
0006b3 726f
0006b4 6020
0006b5 6552
0006b6 6570
0006b7 7461
0006b8 6f43
0006b9 6d6d
0006ba 6e61
0006bb 6064
0006bc 000d                      REPEAT_CMD_ERR_MSG: .db "ERROR: Invalid Input For `RepeatCommand`", ASCII_NEW_LINE, 0
0006bd 6550
0006be 6972
0006bf 646f
0006c0 6369
0006c1 4320
0006c2 6d6f
0006c3 616d
0006c4 646e
0006c5 4120
0006c6 6464
0006c7 6465
0006c8 000d                      REPEAT_CMD_SUC_MSG: .db "Periodic Command Added", ASCII_NEW_LINE, 0
                                 
                                 
                                 REPEAT_CMD:
                                 	.def IDX  = R16
                                 	.def LEN  = R17
                                 	.def ITRV = R18
                                 	.def TEMP = R19
                                 
                                 	; Number of pushes
                                 	.set STACK_OFFSET = 10
                                 	; Backup Registers
0006c9 930f                      	push IDX
0006ca 931f                      	push LEN
0006cb 932f                      	push ITRV
0006cc 933f                      	push TEMP
0006cd 93bf                      	push XH
0006ce 93af                      	push XL
0006cf 93df                      	push YH
0006d0 93cf                      	push YL
0006d1 93ff                      	push ZH
0006d2 93ef                      	push ZL
                                 
                                 	; Load Stack Pointer
                                 	; Y <- SP
0006d3 b7de                      	in YH, SPH
0006d4 b7cd                      	in YL, SPL
                                 
                                 	; Load Command Length
0006d5 851f                      	ldd LEN, Y+(STACK_OFFSET + 5)
                                 
                                 	; p TT r X+
0006d6 3018                      	cpi LEN, 8
0006d7 f190                      	brlo REPEAT_CMD_ERR
                                 
0006d8 e0f1                      	ldi ZH, HIGH(REPEAT_IDX)
0006d9 e0ed                      	ldi ZL, LOW (REPEAT_IDX)
                                 
                                 	; Make Sure We Have Enough Space
0006da 8100                      	ld IDX, Z
0006db 3004                      	cpi IDX, MAX_REPEAT_CMDS
0006dc f568                      	brsh REPEAT_CMD_ERR
                                 
                                 	; Get Interval
0006dd 85be                      	ldd XH, Y+(STACK_OFFSET + 4)
0006de 85ad                      	ldd XL, Y+(STACK_OFFSET + 3)
0006df 9612                      	adiw XH:XL, 2
                                 
0006e0 e030                      	ldi TEMP, 0
0006e1 933f                      	push TEMP
0006e2 93bf                      	push XH
0006e3 93af                      	push XL
0006e4 d951                      	rcall ASCII_WORD_TO_HEX
0006e5 912f                      	pop ITRV
0006e6 913f                      	pop TEMP
0006e7 913f                      	pop TEMP
                                 	; IF (SUBROUTINE ERR != 0) THEN ERR
0006e8 3030                      	cpi TEMP, 0
0006e9 f501                      	brne REPEAT_CMD_ERR
                                 
0006ea 3020                      	cpi ITRV, 0
0006eb f0f1                      	breq REPEAT_CMD_ERR
                                 
                                 	; Increment Index
0006ec 9503                      	inc IDX
0006ed 8300                      	st Z, IDX
                                 
                                 	; Get Command To Repeat
0006ee 9613                      	adiw XH:XL, 3
0006ef 5015                      	subi LEN, 5
                                 
                                 	; Get SRAM location to store
0006f0 e0f0                      	ldi ZH, HIGH(REPEAT_CMDS)
0006f1 e8e1                      	ldi ZL, LOW (REPEAT_CMDS)
0006f2 950a                      	dec IDX
                                 
                                 	REPEAT_CMD_PTR_LOOP:
0006f3 3000                      		cpi IDX, 0
0006f4 f021                      		breq REPEAT_CMD_PTR_LOOP_EXIT
0006f5 5ded                      		subi ZL, -REPEAT_CMD_LEN
0006f6 40f0                      		sbci ZH, 0
0006f7 950a                      		dec IDX
0006f8 cffa                      		rjmp REPEAT_CMD_PTR_LOOP
                                 
                                 	REPEAT_CMD_PTR_LOOP_EXIT:
                                 	
0006f9 9321                      	st Z+, ITRV
0006fa 9321                      	st Z+, ITRV
0006fb 9311                      	st Z+, LEN
                                 
                                 	; Use ITRV As Loop Counter
0006fc e020                      	ldi ITRV, 0
                                 
                                 	REPEAT_CMD_COPY:
0006fd 913d                      		ld TEMP, X+
0006fe 9331                      		st Z+, TEMP
0006ff 9523                      		inc ITRV
000700 1721                      		cp ITRV, LEN
000701 f3d8                      		brlo REPEAT_CMD_COPY
                                 
000702 e03d                      	ldi TEMP, HIGH(REPEAT_CMD_SUC_MSG << 1)
000703 933f                      	push TEMP
000704 e73a                      	ldi TEMP, LOW (REPEAT_CMD_SUC_MSG << 1)
000705 933f                      	push TEMP
000706 da3e                      	rcall PUTSTR
000707 913f                      	pop TEMP
000708 913f                      	pop TEMP
                                 
000709 c007                      	rjmp REPEAT_CMD_RET
                                 
                                 	REPEAT_CMD_ERR:
00070a e03d                      		ldi TEMP, HIGH(REPEAT_CMD_ERR_MSG << 1)
00070b 933f                      		push TEMP
00070c e530                      		ldi TEMP, LOW (REPEAT_CMD_ERR_MSG << 1)
00070d 933f                      		push TEMP
00070e da36                      		rcall PUTSTR
00070f 913f                      		pop TEMP
000710 913f                      		pop TEMP
                                 
                                 	REPEAT_CMD_RET:
                                 		; Restore Registers
000711 91ef                      		pop ZL
000712 91ff                      		pop ZH
000713 91cf                      		pop YL
000714 91df                      		pop YH
000715 91af                      		pop XL
000716 91bf                      		pop XH
000717 913f                      		pop TEMP
000718 912f                      		pop ITRV
000719 911f                      		pop LEN
00071a 910f                      		pop IDX
                                 
00071b 9508                      		ret
                                 
                                 	.undef IDX
                                 	.undef LEN
                                 	.undef ITRV
                                 	.undef TEMP
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Repeat Command (List)
                                 ;;
                                 ;; Inputs:
                                 ;; - Command Length           <- SP + 5
                                 ;; - Command String Pointer H <- SP + 4
                                 ;; - Command String Pointer L <- SP + 3 (First Byte Before Return Address)
                                 ;;
                                 ;; Outputs:
                                 ;; - No Output                -> SP + 5
                                 ;; - No Output                -> SP + 4
                                 ;; - No Output                -> SP + 3 (First Byte Before Return Address)
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
00071c 4553
00071d 2043
00071e 3e2d
00071f 0020                      LIST_REPEAT_CMD_INTERVAL: .db   "SEC -> ", 0
000720 202c
000721 4d43
000722 2044
000723 3e2d
000724 0020                      LIST_REPEAT_CMD_CMD     : .db ", CMD -> ", 0
000725 5245
000726 4f52
000727 3a52
000728 6020
000729 694c
00072a 7473
00072b 6552
00072c 6570
00072d 7461
00072e 6465
00072f 6f43
000730 6d6d
000731 6e61
000732 7364
000733 2060
000734 6f44
000735 7365
000736 4e20
000737 746f
000738 5420
000739 6b61
00073a 2065
00073b 6e49
00073c 7570
00073d 0d74
00073e 0000                      LIST_REPEAT_CMD_ERR_MSG : .db "ERROR: `ListRepeatedCommands` Does Not Take Input", ASCII_NEW_LINE, 0, 0
                                 
                                 
                                 LIST_REPEAT_CMD:
                                 	.def IDX  = R16
                                 	.def LEN  = R17
                                 	.def CNTR = R18
                                 	.def TEMP = R19
                                 
                                 	; Number of pushes
                                 	.set STACK_OFFSET = 6
                                 	; Backup Registers
00073f 930f                      	push IDX
000740 931f                      	push LEN
000741 932f                      	push CNTR
000742 933f                      	push TEMP
000743 93df                      	push YH
000744 93cf                      	push YL
                                 
                                 	; Load Stack Pointer
                                 	; Y <- SP
000745 b7de                      	in YH, SPH
000746 b7cd                      	in YL, SPL
                                 
                                 	; Load Command Length
000747 851b                      	ldd LEN, Y+(STACK_OFFSET + 5)
                                 
                                 	; l
000748 3011                      	cpi LEN, 1
000749 f5c1                      	brne LIST_REPEAT_CMD_ERR
                                 
00074a e0d1                      	ldi YH, HIGH(REPEAT_IDX)
00074b e0cd                      	ldi YL, LOW (REPEAT_IDX)
                                 
                                 	; Get Commands Count
00074c 8108                      	ld IDX, Y
                                 
00074d 3000                      	cpi IDX, 0
00074e f1d1                      	breq LIST_REPEAT_CMD_RET
                                 
                                 	; Get Data Location
00074f e0d0                      	ldi YH, HIGH(REPEAT_CMDS)
000750 e8c1                      	ldi YL, LOW (REPEAT_CMDS)
                                 
000751 e020                      	ldi CNTR, 0
                                 
                                 	LIST_REPEAT_CMD_PRINT_LOOP:
000752 e03e                      		ldi TEMP, HIGH(LIST_REPEAT_CMD_INTERVAL << 1)
000753 933f                      		push TEMP
000754 e338                      		ldi TEMP, LOW (LIST_REPEAT_CMD_INTERVAL << 1)
000755 933f                      		push TEMP
000756 d9ee                      		rcall PUTSTR
000757 913f                      		pop TEMP
000758 913f                      		pop TEMP
                                 
                                 		; Get Interval
000759 9621                      		adiw YH:YL, 1
00075a 9139                      		ld TEMP, Y+
                                 
                                 		; Print Interval
00075b 933f                      		push TEMP
00075c 933f                      		push TEMP
00075d d941                      		rcall HEX_BYTE_TO_ASCII
                                 		; Get Least Significant Char
00075e 913f                      		pop TEMP
00075f d9d8                      		rcall PUTCHAR
000760 933f                      		push TEMP
000761 d9d6                      		rcall PUTCHAR
000762 913f                      		pop TEMP
000763 913f                      		pop TEMP
                                 
000764 e03e                      		ldi TEMP, HIGH(LIST_REPEAT_CMD_CMD << 1)
000765 933f                      		push TEMP
000766 e430                      		ldi TEMP, LOW (LIST_REPEAT_CMD_CMD << 1)
000767 933f                      		push TEMP
000768 d9dc                      		rcall PUTSTR
000769 913f                      		pop TEMP
00076a 913f                      		pop TEMP
                                 
                                 		; Get Command Length
00076b 9119                      		ld LEN, Y+
                                 
00076c 932f                      		push CNTR
00076d e020                      		ldi CNTR, 0
                                 
                                 		LIST_REPEAT_CMD_PRINT_LOOP_INNER:
00076e 9139                      			ld TEMP, Y+
00076f 933f                      			push TEMP
000770 d9c7                      			rcall PUTCHAR
000771 913f                      			pop TEMP
000772 9523                      			inc CNTR
000773 1721                      			cp CNTR, LEN
000774 f3c8                      			brlo LIST_REPEAT_CMD_PRINT_LOOP_INNER
                                 
000775 e03d                      		ldi TEMP, ASCII_NEW_LINE
000776 933f                      		push TEMP
000777 d9c0                      		rcall PUTCHAR
000778 913f                      		pop TEMP
                                 
000779 ee30                      		ldi TEMP, (-1 * CMD_MAX_LEN)
00077a 0f31                      		add TEMP, LEN
00077b 1bc3                      		sub YL, TEMP
00077c 40d0                      		sbci YH, 0
                                 
00077d 912f                      		pop CNTR
00077e 9523                      		inc CNTR
00077f 1720                      		cp CNTR, IDX
000780 f288                      		brlo LIST_REPEAT_CMD_PRINT_LOOP
                                 
000781 c007                      	rjmp LIST_REPEAT_CMD_RET
                                 
                                 	LIST_REPEAT_CMD_ERR:
000782 e03e                      		ldi TEMP, HIGH(LIST_REPEAT_CMD_ERR_MSG << 1)
000783 933f                      		push TEMP
000784 e43a                      		ldi TEMP, LOW (LIST_REPEAT_CMD_ERR_MSG << 1)
000785 933f                      		push TEMP
000786 d9be                      		rcall PUTSTR
000787 913f                      		pop TEMP
000788 913f                      		pop TEMP
                                 
                                 	LIST_REPEAT_CMD_RET:
                                 		; Restore Registers
000789 91cf                      		pop YL
00078a 91df                      		pop YH
00078b 913f                      		pop TEMP
00078c 912f                      		pop CNTR
00078d 911f                      		pop LEN
00078e 910f                      		pop IDX
                                 
00078f 9508                      		ret
                                 
                                 	.undef IDX
                                 	.undef LEN
                                 	.undef CNTR
                                 	.undef TEMP
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Repeat Command (Delete)
                                 ;;
                                 ;; Inputs:
                                 ;; - Command Length           <- SP + 5
                                 ;; - Command String Pointer H <- SP + 4
                                 ;; - Command String Pointer L <- SP + 3 (First Byte Before Return Address)
                                 ;;
                                 ;; Outputs:
                                 ;; - No Output                -> SP + 5
                                 ;; - No Output                -> SP + 4
                                 ;; - No Output                -> SP + 3 (First Byte Before Return Address)
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
000790 5245
000791 4f52
000792 3a52
000793 4920
000794 766e
000795 6c61
000796 6469
000797 4920
000798 706e
000799 7475
00079a 4620
00079b 726f
00079c 6020
00079d 6544
00079e 656c
00079f 6574
0007a0 6552
0007a1 6570
0007a2 7461
0007a3 6465
0007a4 6f43
0007a5 6d6d
0007a6 6e61
0007a7 7364
0007a8 0d60
0007a9 0000                      DEL_REPEAT_CMD_ERR_MSG: .db "ERROR: Invalid Input For `DeleteRepeatedCommands`", ASCII_NEW_LINE, 0, 0
0007aa 6550
0007ab 6972
0007ac 646f
0007ad 6369
0007ae 4320
0007af 6d6f
0007b0 616d
0007b1 646e
0007b2 4420
0007b3 6c65
0007b4 7465
0007b5 6465
0007b6 000d                      DEL_REPEAT_CMD_SUC_MSG: .db "Periodic Command Deleted", ASCII_NEW_LINE, 0
                                 
                                 
                                 DEL_REPEAT_CMD:
                                 	.def IDX  = R16
                                 	.def LEN  = R17
                                 	.def TEMP = R18
                                 
                                 	; Number of pushes
                                 	.set STACK_OFFSET = 7
                                 	; Backup Registers
0007b7 930f                      	push IDX
0007b8 931f                      	push LEN
0007b9 932f                      	push TEMP
0007ba 93df                      	push YH
0007bb 93cf                      	push YL
0007bc 93ff                      	push ZH
0007bd 93ef                      	push ZL
                                 
                                 	; Load Stack Pointer
                                 	; Y <- SP
0007be b7de                      	in YH, SPH
0007bf b7cd                      	in YL, SPL
                                 
                                 	; Load Command Length
0007c0 851c                      	ldd LEN, Y+(STACK_OFFSET + 5)
                                 
                                 	; d II
0007c1 3014                      	cpi LEN, 4
0007c2 f491                      	brne DEL_REPEAT_CMD_ERR
                                 
                                 	; Load Command Pointer
0007c3 85fb                      	ldd ZH, Y+(STACK_OFFSET + 4)
0007c4 85ea                      	ldd ZL, Y+(STACK_OFFSET + 3)
                                 
0007c5 9632                      	adiw ZH:ZL, 2
                                 
0007c6 e020                      	ldi TEMP, 0
0007c7 932f                      	push TEMP
0007c8 93ff                      	push ZH
0007c9 93ef                      	push ZL
0007ca d86b                      	rcall ASCII_WORD_TO_HEX
0007cb 910f                      	pop IDX
0007cc 912f                      	pop TEMP
0007cd 912f                      	pop TEMP
                                 	; IF (SUBROUTINE ERR != 0) THEN ERR
0007ce 3020                      	cpi TEMP, 0
0007cf f429                      	brne DEL_REPEAT_CMD_ERR
                                 
0007d0 e0d1                      	ldi YH, HIGH(REPEAT_IDX)
0007d1 e0cd                      	ldi YL, LOW (REPEAT_IDX)
                                 
                                 	; Get Commands Count
0007d2 8128                      	ld TEMP, Y
                                 
                                 	; Can't Delete Command That Does Not Exist
0007d3 1702                      	cp IDX, TEMP
0007d4 f040                      	brlo DEL_REPEAT_CMD_NO_ERR
                                 
                                 	DEL_REPEAT_CMD_ERR:
0007d5 e02f                      		ldi TEMP, HIGH(DEL_REPEAT_CMD_ERR_MSG << 1)
0007d6 932f                      		push TEMP
0007d7 e220                      		ldi TEMP, LOW (DEL_REPEAT_CMD_ERR_MSG << 1)
0007d8 932f                      		push TEMP
0007d9 d96b                      		rcall PUTSTR
0007da 912f                      		pop TEMP
0007db 912f                      		pop TEMP
0007dc c035                      		rjmp DEL_REPEAT_CMD_RET
                                 
                                 	DEL_REPEAT_CMD_NO_ERR:
                                 
0007dd 952a                      	dec TEMP
0007de 8328                      	st Y, TEMP
                                 
                                 	; Done If Deleting Last Command
0007df 1702                      	cp IDX, TEMP
0007e0 f151                      	breq DEL_REPEAT_CMD_RET_PRINT
                                 
                                 	; Get Location Of Deleted Element
0007e1 e0d0                      	ldi YH, HIGH(REPEAT_CMDS)
0007e2 e8c1                      	ldi YL, LOW (REPEAT_CMDS)
                                 
0007e3 932f                      	push TEMP
0007e4 930f                      	push IDX
                                 
                                 	DEL_REPEAT_CMD_PTR_LOOP:
0007e5 3000                      		cpi IDX, 0
0007e6 f021                      		breq DEL_REPEAT_CMD_PTR_LOOP_EXIT
0007e7 5dcd                      		subi YL, -REPEAT_CMD_LEN
0007e8 40d0                      		sbci YH, 0
0007e9 950a                      		dec IDX
0007ea cffa                      		rjmp DEL_REPEAT_CMD_PTR_LOOP
                                 
                                 	DEL_REPEAT_CMD_PTR_LOOP_EXIT:
                                 
                                 	; How Many Times To Copy
0007eb 910f                      	pop IDX
0007ec 912f                      	pop TEMP
0007ed 1b20                      	sub TEMP, IDX
0007ee 2f02                      	mov IDX, TEMP
                                 
                                 	; Get Location Of Next Element
0007ef 2ffd                      	mov ZH, YH
0007f0 2fec                      	mov ZL, YL
0007f1 5ded                      	subi ZL, -REPEAT_CMD_LEN
0007f2 40f0                      	sbci ZH, 0
                                 
                                 	DEL_REPEAT_CMD_COPY_LOOP:
0007f3 3000                      		cpi IDX, 0
0007f4 f0b1                      		breq DEL_REPEAT_CMD_RET_PRINT
                                 
0007f5 9121                      		ld TEMP, Z+
0007f6 9329                      		st Y+, TEMP
0007f7 9121                      		ld TEMP, Z+
0007f8 9329                      		st Y+, TEMP
0007f9 9111                      		ld LEN, Z+
0007fa 9319                      		st Y+, LEN
                                 
0007fb 931f                      		push LEN
                                 
                                 		DEL_REPEAT_CMD_COPY_LOOP_INNER:
0007fc 3010                      			cpi LEN, 0
0007fd f021                      			breq DEL_REPEAT_CMD_COPY_LOOP_INNER_EXIT
0007fe 9121                      			ld TEMP, Z+
0007ff 9329                      			st Y+, TEMP
000800 951a                      			dec LEN
000801 cffa                      			rjmp DEL_REPEAT_CMD_COPY_LOOP_INNER
                                 
                                 		DEL_REPEAT_CMD_COPY_LOOP_INNER_EXIT:
                                 
000802 911f                      		pop LEN
                                 
000803 950a                      		dec IDX
000804 ee20                      		ldi TEMP, (-1 * CMD_MAX_LEN)
000805 0f21                      		add TEMP, LEN
000806 1bc2                      		sub YL, TEMP
000807 40d0                      		sbci YH, 0
000808 1be2                      		sub ZL, TEMP
000809 40f0                      		sbci ZH, 0
00080a cfe8                      		rjmp DEL_REPEAT_CMD_COPY_LOOP
                                 
                                 	DEL_REPEAT_CMD_RET_PRINT:
00080b e02f                      		ldi TEMP, HIGH(DEL_REPEAT_CMD_SUC_MSG << 1)
00080c 932f                      		push TEMP
00080d e524                      		ldi TEMP, LOW (DEL_REPEAT_CMD_SUC_MSG << 1)
00080e 932f                      		push TEMP
00080f d935                      		rcall PUTSTR
000810 912f                      		pop TEMP
000811 912f                      		pop TEMP
                                 
                                 	DEL_REPEAT_CMD_RET:
                                 		; Restore Registers
000812 91ef                      		pop ZL
000813 91ff                      		pop ZH
000814 91cf                      		pop YL
000815 91df                      		pop YH
000816 912f                      		pop TEMP
000817 911f                      		pop LEN
000818 910f                      		pop IDX
                                 
000819 9508                      		ret
                                 
                                 	.undef IDX
                                 	.undef LEN
                                 	.undef TEMP
                                 
                                 CLEAR_LINE:
                                 	.def TEMP = R16
                                 	.def LEN  = R17
                                 
                                 	; Backup Registers
00081a 930f                      	push TEMP
00081b 931f                      	push LEN
00081c 93df                      	push YH
00081d 93cf                      	push YL
                                 
00081e e0d0                      	ldi YH, HIGH(CMD_IDX)
00081f e8c0                      	ldi YL, LOW (CMD_IDX)
000820 8118                      	ld LEN, Y
000821 5f1a                      	subi LEN, -PROMPT_LEN
                                 
000822 e008                      	ldi TEMP, ASCII_BACKSPACE
000823 930f                      	push TEMP
                                 
000824 2f01                      	mov TEMP, LEN
                                 
                                 	CLEAR_LINE_BACKSPACE_LOOP_1:
000825 d912                      		rcall PUTCHAR
000826 950a                      		dec TEMP
000827 3000                      		cpi TEMP, 0
000828 f7e1                      		brne CLEAR_LINE_BACKSPACE_LOOP_1
                                 
000829 910f                      	pop TEMP
                                 
00082a e200                      	ldi TEMP, ASCII_SPACE
00082b 930f                      	push TEMP
                                 
00082c 2f01                      	mov TEMP, LEN
                                 
                                 	CLEAR_LINE_SPACE_LOOP:
00082d d90a                      		rcall PUTCHAR
00082e 950a                      		dec TEMP
00082f 3000                      		cpi TEMP, 0
000830 f7e1                      		brne CLEAR_LINE_SPACE_LOOP
                                 
000831 910f                      	pop TEMP
                                 
000832 e008                      	ldi TEMP, ASCII_BACKSPACE
000833 930f                      	push TEMP
                                 
000834 2f01                      	mov TEMP, LEN
                                 
                                 	CLEAR_LINE_BACKSPACE_LOOP_2:
000835 d902                      		rcall PUTCHAR
000836 950a                      		dec TEMP
000837 3000                      		cpi TEMP, 0
000838 f7e1                      		brne CLEAR_LINE_BACKSPACE_LOOP_2
                                 
000839 910f                      	pop TEMP
                                 	
                                 	; Restore Registers
00083a 91cf                      	pop YL
00083b 91df                      	pop YH
00083c 911f                      	pop LEN
00083d 910f                      	pop TEMP
                                 	
00083e 9508                      	ret
                                 
                                 	.undef TEMP
                                 	.undef LEN
                                 
                                 DIRTY_LINE:
                                 	.def TEMP = R16
                                 	.def LEN  = R17
                                 
                                 	; Backup Registers
00083f 930f                      	push TEMP
000840 931f                      	push LEN
000841 93df                      	push YH
000842 93cf                      	push YL
                                 
                                 	; Print Prompt
000843 e00b                      	ldi TEMP, HIGH(PROMPT << 1)
000844 930f                      	push TEMP
000845 e304                      	ldi TEMP, LOW (PROMPT << 1)
000846 930f                      	push TEMP
000847 d8fd                      	rcall PUTSTR
000848 910f                      	pop TEMP
000849 910f                      	pop TEMP
                                 
00084a e0d0                      	ldi YH, HIGH(CMD_IDX)
00084b e8c0                      	ldi YL, LOW (CMD_IDX)
00084c 8118                      	ld LEN, Y
                                 
00084d 3010                      	cpi LEN, 0
00084e f049                      	breq DIRTY_LINE_RET
                                 
00084f e0d0                      	ldi YH, HIGH(CMD)
000850 e6c0                      	ldi YL, LOW (CMD)
                                 
                                 	DIRTY_LINE_LOOP:
000851 9109                      		ld TEMP, Y+
000852 930f                      		push TEMP
000853 d8e4                      		rcall PUTCHAR
000854 910f                      		pop TEMP
000855 951a                      		dec LEN
000856 3010                      		cpi LEN, 0
000857 f7c9                      		brne DIRTY_LINE_LOOP
                                 
                                 	DIRTY_LINE_RET:
                                 		; Restore Registers
000858 91cf                      		pop YL
000859 91df                      		pop YH
00085a 911f                      		pop LEN
00085b 910f                      		pop TEMP
                                 	
00085c 9508                      		ret
                                 
                                 	.undef TEMP


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega32" register use summary:
x  :   1 y  :  70 z  :  35 r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 355 r17:  94 r18:  93 r19:  78 r20:   0 
r21:   0 r22:   0 r23:   0 r24:   0 r25:   0 r26:   6 r27:   6 r28:  83 
r29:  83 r30:  89 r31:  89 
Registers used: 13 out of 35 (37.1%)

"ATmega32" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   2 add   :   4 adiw  :  26 and   :   0 
andi  :   2 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :  18 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :  14 brlt  :   0 brmi  :   0 
brne  :  40 brpl  :   0 brsh  :   2 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   0 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   4 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :  14 cpc   :   0 
cpi   :  56 cpse  :   0 dec   :  12 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :  37 inc   :   9 jmp   :   3 
ld    :  29 ldd   :  36 ldi   : 120 lds   :   0 lpm   :  14 lsl   :   4 
lsr   :   1 mov   :  11 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   0 or    :   1 ori   :   0 out   :  13 pop   : 233 
push  : 233 rcall :  69 ret   :  18 reti  :   2 rjmp  :  31 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   7 sbi   :   0 sbic  :   0 sbis  :   1 
sbiw  :   1 sbr   :   0 sbrc  :   0 sbrs  :   1 sec   :   0 seh   :   0 
sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :  20 std   :  14 sts   :   0 
sub   :   4 subi  :  11 swap  :   1 tst   :   0 wdr   :   0 
Instructions used: 40 out of 113 (35.4%)

"ATmega32" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0010ba   2230   2008   4238   32768  12.9%
[.dseg] 0x000060 0x00010e      0    174    174    2048   8.5%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
