
AVRASM ver. 2.2.8  C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\main.asm Tue Jan 16 20:49:44 2024

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m32def.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\main.asm(80): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\ascii.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\main.asm(81): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\io.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\main.asm(82): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\read-mem.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\read-mem.inc(18): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\ascii.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\read-mem.inc(19): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\io.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m32def.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\main.asm(80): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\ascii.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\main.asm(81): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\io.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\main.asm(82): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\read-mem.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\read-mem.inc(18): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\ascii.inc'
C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\read-mem.inc(19): Including file 'C:\Users\ahmed\Desktop\Future Gadget 29, 2nd Edition Ver. 2.31\Future Gadget 29, 2nd Edition Ver. 2.31\io.inc'
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega32.xml ************
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m32def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega32
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega32
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M32DEF_INC_
                                 #define _M32DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega32
                                 #pragma AVRPART ADMIN PART_NAME ATmega32
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x02
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	OCR0	= 0x3c
                                 .equ	GICR	= 0x3b
                                 .equ	GIFR	= 0x3a
                                 .equ	TIMSK	= 0x39
                                 .equ	TIFR	= 0x38
                                 .equ	SPMCR	= 0x37
                                 .equ	TWCR	= 0x36
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUCSR	= 0x34
                                 .equ	TCCR0	= 0x33
                                 .equ	TCNT0	= 0x32
                                 .equ	OSCCAL	= 0x31
                                 .equ	OCDR	= 0x31
                                 .equ	SFIOR	= 0x30
                                 .equ	TCCR1A	= 0x2f
                                 .equ	TCCR1B	= 0x2e
                                 .equ	TCNT1L	= 0x2c
                                 .equ	TCNT1H	= 0x2d
                                 .equ	OCR1AL	= 0x2a
                                 .equ	OCR1AH	= 0x2b
                                 .equ	OCR1BL	= 0x28
                                 .equ	OCR1BH	= 0x29
                                 .equ	ICR1L	= 0x26
                                 .equ	ICR1H	= 0x27
                                 .equ	TCCR2	= 0x25
                                 .equ	TCNT2	= 0x24
                                 .equ	OCR2	= 0x23
                                 .equ	ASSR	= 0x22
                                 .equ	WDTCR	= 0x21
                                 .equ	UBRRH	= 0x20
                                 .equ	UCSRC	= 0x20
                                 .equ	EEARL	= 0x1e
                                 .equ	EEARH	= 0x1f
                                 .equ	EEDR	= 0x1d
                                 .equ	EECR	= 0x1c
                                 .equ	PORTA	= 0x1b
                                 .equ	DDRA	= 0x1a
                                 .equ	PINA	= 0x19
                                 .equ	PORTB	= 0x18
                                 .equ	DDRB	= 0x17
                                 .equ	PINB	= 0x16
                                 .equ	PORTC	= 0x15
                                 .equ	DDRC	= 0x14
                                 .equ	PINC	= 0x13
                                 .equ	PORTD	= 0x12
                                 .equ	DDRD	= 0x11
                                 .equ	PIND	= 0x10
                                 .equ	SPDR	= 0x0f
                                 .equ	SPSR	= 0x0e
                                 .equ	SPCR	= 0x0d
                                 .equ	UDR	= 0x0c
                                 .equ	UCSRA	= 0x0b
                                 .equ	UCSRB	= 0x0a
                                 .equ	UBRRL	= 0x09
                                 .equ	ACSR	= 0x08
                                 .equ	ADMUX	= 0x07
                                 .equ	ADCSRA	= 0x06
                                 .equ	ADCH	= 0x05
                                 .equ	ADCL	= 0x04
                                 .equ	TWDR	= 0x03
                                 .equ	TWAR	= 0x02
                                 .equ	TWSR	= 0x01
                                 .equ	TWBR	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEWE	= 1	; EEPROM Write Enable
                                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDTOE	= 4	; RW
                                 .equ	WDDE	= WDTOE	; For compatibility
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; GICR - General Interrupt Control Register
                                 .equ	GIMSK	= GICR	; For compatibility
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	INT2	= 5	; External Interrupt Request 2 Enable
                                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 7	; External Interrupt Request 1 Enable
                                 
                                 ; GIFR - General Interrupt Flag Register
                                 .equ	INTF2	= 5	; External Interrupt Flag 2
                                 .equ	INTF0	= 6	; External Interrupt Flag 0
                                 .equ	INTF1	= 7	; External Interrupt Flag 1
                                 
                                 ; MCUCR - General Interrupt Control Register
                                 .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	ISC2	= 6	; Interrupt Sense Control 2
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TCCR0 - Timer/Counter Control Register
                                 .equ	CS00	= 0	; Clock Select 1
                                 .equ	CS01	= 1	; Clock Select 1
                                 .equ	CS02	= 2	; Clock Select 2
                                 .equ	WGM01	= 3	; Waveform Generation Mode 1
                                 .equ	CTC0	= WGM01	; For compatibility
                                 .equ	COM00	= 4	; Compare match Output Mode 0
                                 .equ	COM01	= 5	; Compare Match Output Mode 1
                                 .equ	WGM00	= 6	; Waveform Generation Mode
                                 .equ	PWM0	= WGM00	; For compatibility
                                 .equ	FOC0	= 7	; Force Output Compare
                                 
                                 ; TCNT0 - Timer/Counter Register
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0 - Output Compare Register
                                 .equ	OCR0_0	= 0	; 
                                 .equ	OCR0_1	= 1	; 
                                 .equ	OCR0_2	= 2	; 
                                 .equ	OCR0_3	= 3	; 
                                 .equ	OCR0_4	= 4	; 
                                 .equ	OCR0_5	= 5	; 
                                 .equ	OCR0_6	= 6	; 
                                 .equ	OCR0_7	= 7	; 
                                 
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0	= 1	; Timer/Counter0 Output Compare Match Interrupt register
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0	= 1	; Output Compare Flag 0
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 6	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	OCIE2	= 7	; Timer/Counter2 Output Compare Match Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2	= 7	; Output Compare Flag 2
                                 
                                 ; TCCR2 - Timer/Counter2 Control Register
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM21	= 3	; Clear Timer/Counter2 on Compare Match
                                 .equ	CTC2	= WGM21	; For compatibility
                                 .equ	COM20	= 4	; Compare Output Mode bit 0
                                 .equ	COM21	= 5	; Compare Output Mode bit 1
                                 .equ	WGM20	= 6	; Pulse Width Modulator Enable
                                 .equ	PWM2	= WGM20	; For compatibility
                                 .equ	FOC2	= 7	; Force Output Compare
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2 - Timer/Counter2 Output Compare Register
                                 .equ	OCR2_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2UB	= 0	; Timer/counter Control Register2 Update Busy
                                 .equ	OCR2UB	= 1	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 2	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 3	; Asynchronous Timer/counter2
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	PWM10	= WGM10	; For compatibility
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	PWM11	= WGM11	; For compatibility
                                 .equ	FOC1B	= 2	; Force Output Compare 1B
                                 .equ	FOC1A	= 3	; Force Output Compare 1A
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	CTC10	= WGM12	; For compatibility
                                 .equ	CTC1	= WGM12	; For compatibility
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	CTC11	= WGM13	; For compatibility
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** USART ************************
                                 ; UDR - USART I/O Data Register
                                 .equ	UDR0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSRA - USART Control and Status Register A
                                 .equ	USR	= UCSRA	; For compatibility
                                 .equ	MPCM	= 0	; Multi-processor Communication Mode
                                 .equ	U2X	= 1	; Double the USART transmission speed
                                 .equ	UPE	= 2	; Parity Error
                                 .equ	PE	= UPE	; For compatibility
                                 .equ	DOR	= 3	; Data overRun
                                 .equ	FE	= 4	; Framing Error
                                 .equ	UDRE	= 5	; USART Data Register Empty
                                 .equ	TXC	= 6	; USART Transmitt Complete
                                 .equ	RXC	= 7	; USART Receive Complete
                                 
                                 ; UCSRB - USART Control and Status Register B
                                 .equ	UCR	= UCSRB	; For compatibility
                                 .equ	TXB8	= 0	; Transmit Data Bit 8
                                 .equ	RXB8	= 1	; Receive Data Bit 8
                                 .equ	UCSZ2	= 2	; Character Size
                                 .equ	CHR9	= UCSZ2	; For compatibility
                                 .equ	TXEN	= 3	; Transmitter Enable
                                 .equ	RXEN	= 4	; Receiver Enable
                                 .equ	UDRIE	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSRC - USART Control and Status Register C
                                 .equ	UCPOL	= 0	; Clock Polarity
                                 .equ	UCSZ0	= 1	; Character Size
                                 .equ	UCSZ1	= 2	; Character Size
                                 .equ	USBS	= 3	; Stop Bit Select
                                 .equ	UPM0	= 4	; Parity Mode Bit 0
                                 .equ	UPM1	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL	= 6	; USART Mode Select
                                 .equ	URSEL	= 7	; Register Select
                                 
                                 .equ	UBRRHI	= UBRRH	; For compatibility
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; SFIOR - Special Function IO Register
                                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register
                                 .equ	ADCSR	= ADCSRA	; For compatibility
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; When this bit is written to one,the Timer/Counter2 prescaler will be reset.The bit will be cleared by hardware after the operation is performed.Writing a zero to this bit will have no effect.This bit will always be read as zero if Timer/C                                 ounter2 is clocked by the internal CPU clock.If this bit is written when Timer/Counter2 is operating in asynchronous mode,the bit will remain one until the prescaler has been reset.
                                 .equ	ADFR	= ADATE	; For compatibility
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	ADTS0	= 5	; ADC Auto Trigger Source 0
                                 .equ	ADTS1	= 6	; ADC Auto Trigger Source 1
                                 .equ	ADTS2	= 7	; ADC Auto Trigger Source 2
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 ;.equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 ;.equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 ;.equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 ;.equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 .equ	SM0	= 4	; Sleep Mode Select
                                 .equ	SM1	= 5	; Sleep Mode Select
                                 .equ	SM2	= 6	; Sleep Mode Select
                                 .equ	SE	= 7	; Sleep Enable
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	MCUSR	= MCUCSR	; For compatibility
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	PSR10	= 0	; Prescaler Reset Timer/Counter1&0
                                 .equ	PSR2	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PUD	= 2	; Pull-up Disable
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	ASRE	= RWWSRE	; For compatibility
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	ASB	= RWWSB	; For compatibility
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler bits
                                 .equ	TWPS1	= 1	; TWI Prescaler bits
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	BODEN	= 6	; Brown out detector enable
                                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x003f
                                 .equ	SRAM_START	= 0x0060
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x085f
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	OC2addr	= 0x0008	; Timer/Counter2 Compare Match
                                 .equ	OVF2addr	= 0x000a	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x000c	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x000e	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0010	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x0012	; Timer/Counter1 Overflow
                                 .equ	OC0addr	= 0x0014	; Timer/Counter0 Compare Match
                                 .equ	OVF0addr	= 0x0016	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0018	; Serial Transfer Complete
                                 .equ	URXCaddr	= 0x001a	; USART, Rx Complete
                                 .equ	UDREaddr	= 0x001c	; USART Data Register Empty
                                 .equ	UTXCaddr	= 0x001e	; USART, Tx Complete
                                 .equ	ADCCaddr	= 0x0020	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x0022	; EEPROM Ready
                                 .equ	ACIaddr	= 0x0024	; Analog Comparator
                                 .equ	TWIaddr	= 0x0026	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0028	; Store Program Memory Ready
                                 
                                 .equ	INT_VECTORS_SIZE	= 42	; size in words
                                 
                                 #endif  /* _M32DEF_INC_ */
                                 
                                 
                                 ;
                                 ; Future Gadget 29, 2nd Edition Ver. 2.31
                                 ;
                                 ; COMP317 Final Project
                                 ;
                                 ; Authors:
                                 ; - Ameer Taweel (0077340)
                                 ; - Ahmed Jareer (0074982)
                                 ;
                                 ; Resources Usage:
                                 ; - Program Size: TODO
                                 ; - Data    Size: TODO
                                 ; - Registers   : TODO
                                 ;
                                 ; Summary:
                                 ;
                                 ; Multiple times during this course, we faced a situation where the code works
                                 ; in the debugger/simulator but not on the physical microcontroller. Debugging
                                 ; and fixing such issues was hard because we couldn't inspect the system's
                                 ; internal state.
                                 ;
                                 ; Therefore, built a system that is easy to inspect. It exposes a shell using
                                 ; the ANSI standard over USART. The system has commands to check the system's
                                 ; state, like memory regions and I/O pin values. Moreover, the system supports
                                 ; periodic tasks, like logging a memory region every two minutes.
                                 ;
                                 ; It also has commands for modifying the system's state, like setting a memory
                                 ; region or setting the mode of an I/O pin.
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; # Code Style
                                 ;;
                                 ;;   - No global register aliases.
                                 ;;   - Capitalize all user-defined names (constants, register aliases, labels).
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; # Constants
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 ; Baud Rate in Bits Per Second (bps)
                                 .equ BAUD_RATE = 9600
                                 ; System Oscillator Clock Frequency
                                 .equ F_OSC     = 4 * 1000 * 1000
                                 ; Contents of the UBRRH and UBRRL Registers (0 - 4095)
                                 ; Asynchronous Normal Mode (U2X = 0)
                                 .equ BAUD_UBRR = (F_OSC / (16 * BAUD_RATE)) - 1
                                 
                                 ; Maximum Command Length
                                 .equ CMD_MAX_LEN = 100
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; # Data Segment
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 ; Data Segment Start
                                 .dseg
                                 
000060                           CMD    : .byte CMD_MAX_LEN
0000c4                           CMD_IDX: .byte 1
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; # Interrupt Vector Table
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 ; Code Segment Start
                                 .cseg
                                 
                                 .org 0x0000
000000 940c 015b                 	jmp RESET
                                 .org 0x001A 
00001a 940c 016b                 	jmp USART_RX_COMPLETE
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; # Imports
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 .INCLUDE "ascii.inc"
                                 
                                 ;; Include Guard
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 .ifdef INCLUDE_ASCII
                                 .endif
                                 
                                 .equ INCLUDE_ASCII = 1
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; ASCII Codes
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 .equ ASCII_BACKSPACE = 0x08
                                 .equ ASCII_NEW_LINE  = 0x0D
                                 .equ ASCII_SPACE     = 0x20
                                 .equ ASCII_ZERO      = 0x30
                                 .equ ASCII_NINE      = 0x39
                                 .equ ASCII_ARROW_R   = 0x3E
                                 .equ ASCII_UPPER_A   = 0x41
                                 .equ ASCII_UPPER_E   = 0x45
                                 .equ ASCII_UPPER_F   = 0x46
                                 .equ ASCII_UPPER_G   = 0x47
                                 .equ ASCII_LOWER_A   = 0x61
                                 .equ ASCII_LOWER_F   = 0x66
                                 .equ ASCII_LOWER_G   = 0x67
                                 .equ ASCII_LOWER_I   = 0x69
                                 .equ ASCII_LOWER_O   = 0x6F
                                 .equ ASCII_LOWER_P   = 0x70
                                 .equ ASCII_LOWER_R   = 0x72
                                 .equ ASCII_LOWER_S   = 0x73
                                 .equ ASCII_LOWER_W   = 0x77
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Parse ASCII Character As Hex
                                 ;;
                                 ;; Inputs:
                                 ;; - Constant Zero <- SP + 4
                                 ;; - ASCII    Char <- SP + 3 (First Byte Before Return Address)
                                 ;;
                                 ;; Outputs:
                                 ;; - Error Status  -> SP + 4
                                 ;; - Hex   Digit   -> SP + 3 (First Byte Before Return Address)
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 ASCII_BYTE_TO_HEX:
                                 	.def CHAR = R16
                                 
                                 	; Number of pushes
                                 	.set STACK_OFFSET = 3
                                 	; Backup Registers
00001c 930f                      	push CHAR
00001d 93df                      	push YH
00001e 93cf                      	push YL
                                 
                                 	; Load Stack Pointer
                                 	; Y <- SP
00001f b7de                      	in YH, SPH
000020 b7cd                      	in YL, SPL
                                 
                                 	; Load ASCII Character
000021 810e                      	ldd CHAR, Y+(STACK_OFFSET + 3)
                                 
                                 	; IF (CHAR < ASCII_ZERO) THEN ERR
000022 3300                      	cpi CHAR, ASCII_ZERO
000023 f098                      	brlo ASCII_BYTE_TO_HEX_ERR
                                 
                                 	; IF (CHAR <= ASCII_NINE) THEN DIGIT
000024 330a                      	cpi CHAR, ASCII_NINE + 1
000025 f040                      	brlo ASCII_BYTE_TO_HEX_DIGIT
                                 
                                 	; IF (CHAR < ASCII_UPPER_A) THEN ERR
000026 3401                      	cpi CHAR, ASCII_UPPER_A
000027 f078                      	brlo ASCII_BYTE_TO_HEX_ERR
                                 
                                 	; IF (CHAR <= ASCII_UPPER_F) THEN UPPER CHAR
000028 3407                      	cpi CHAR, ASCII_UPPER_F + 1
000029 f038                      	brlo ASCII_BYTE_TO_HEX_UPPER_CHAR
                                 
                                 	; IF (CHAR < ASCII_LOWER_A) THEN ERR
00002a 3601                      	cpi CHAR, ASCII_LOWER_A
00002b f058                      	brlo ASCII_BYTE_TO_HEX_ERR
                                 
                                 	; IF (CHAR <= ASCII_LOWER_F) THEN LOWER CHAR
00002c 3607                      	cpi CHAR, ASCII_LOWER_F + 1
00002d f030                      	brlo ASCII_BYTE_TO_HEX_LOWER_CHAR
                                 
                                 	ASCII_BYTE_TO_HEX_DIGIT:
                                 		; CHAR <- CHAR - ASCII_ZERO
00002e 5300                      		subi CHAR, ASCII_ZERO
                                 		; Return Hex Digit
00002f 830e                      		std Y+(STACK_OFFSET + 3), CHAR
000030 c008                      		rjmp ASCII_BYTE_TO_HEX_RET
                                 
                                 	ASCII_BYTE_TO_HEX_UPPER_CHAR:
                                 		; CHAR <- CHAR - ASCII_UPPER_A + 10
000031 5307                      		subi CHAR, (ASCII_UPPER_A - 10)
                                 		; Return Hex Digit
000032 830e                      		std Y+(STACK_OFFSET + 3), CHAR
000033 c005                      		rjmp ASCII_BYTE_TO_HEX_RET
                                 
                                 	ASCII_BYTE_TO_HEX_LOWER_CHAR:
                                 		; CHAR <- CHAR - ASCII_LOWER_A + 10
000034 5507                      		subi CHAR, (ASCII_LOWER_A - 10)
                                 		; Return Hex Digit
000035 830e                      		std Y+(STACK_OFFSET + 3), CHAR
000036 c002                      		rjmp ASCII_BYTE_TO_HEX_RET
                                 
                                 	ASCII_BYTE_TO_HEX_ERR:
                                 		; Error Status <- True
000037 e001                      		ldi CHAR, 1
000038 830f                      		std Y+(STACK_OFFSET + 4), CHAR
                                 
                                 	ASCII_BYTE_TO_HEX_RET:
                                 		; Restore Registers
000039 91cf                      		pop YL
00003a 91df                      		pop YH
00003b 910f                      		pop CHAR
                                 
00003c 9508                      		ret
                                 
                                 	.undef CHAR
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Parse Two ASCII Digits As Hex
                                 ;;
                                 ;; Inputs:
                                 ;; - Constant Zero          <- SP + 5
                                 ;; - ASCII String Pointer H <- SP + 4
                                 ;; - ASCII String Pointer L <- SP + 3 (First Byte Before Return Address)
                                 ;;
                                 ;; Outputs:
                                 ;; - Error Status           -> SP + 5
                                 ;; - No    Output           -> SP + 4
                                 ;; - Return Value           -> SP + 3 (First Byte Before Return Address)
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 ASCII_WORD_TO_HEX:
                                 	.def TEMP = R16
                                 	.def BYTE = R17
                                 
                                 	; Number of pushes
                                 	.set STACK_OFFSET = 6
                                 	; Backup Registers
00003d 930f                      	push TEMP
00003e 931f                      	push BYTE
00003f 93df                      	push YH
000040 93cf                      	push YL
000041 93ff                      	push ZH
000042 93ef                      	push ZL
                                 
                                 	; Load Stack Pointer
                                 	; Y <- SP
000043 b7de                      	in YH, SPH
000044 b7cd                      	in YL, SPL
                                 
                                 	; Load String Address
000045 85fa                      	ldd ZH, Y+(STACK_OFFSET + 4)
000046 85e9                      	ldd ZL, Y+(STACK_OFFSET + 3)
                                 
                                 	; Push Zero To Stack
000047 e000                      	ldi TEMP, 0
000048 930f                      	push TEMP
                                 	; Load Most Significant ASCII Character
000049 9101                      	ld TEMP, Z+
                                 	; Push ASCII Character To Stack
00004a 930f                      	push TEMP
00004b dfd0                      	rcall ASCII_BYTE_TO_HEX
                                 	; Get Return Value
00004c 911f                      	pop BYTE
                                 	; Get Error Status
00004d 910f                      	pop TEMP
                                 	; IF (SUBROUTINE ERR != 0) THEN ERR
00004e 3000                      	cpi TEMP, 0
00004f f481                      	brne ASCII_WORD_TO_HEX_ERR
                                 
                                 	; Byte <- Byte << 4
000050 0f11                      	lsl BYTE
000051 0f11                      	lsl BYTE
000052 0f11                      	lsl BYTE
000053 0f11                      	lsl BYTE
                                 
                                 	; Push Zero To Stack
000054 e000                      	ldi TEMP, 0
000055 930f                      	push TEMP
                                 	; Load Most Significant ASCII Character
000056 8100                      	ld TEMP, Z
                                 	; Push ASCII Character To Stack
000057 930f                      	push TEMP
000058 dfc3                      	rcall ASCII_BYTE_TO_HEX
                                 	; Get Return Value
000059 910f                      	pop TEMP
                                 	; Append Return Value To Byte
00005a 2b10                      	or BYTE, TEMP
                                 	; Get Error Status
00005b 910f                      	pop TEMP
                                 	; IF (SUBROUTINE ERR != 0) THEN ERR
00005c 3000                      	cpi TEMP, 0
00005d f411                      	brne ASCII_WORD_TO_HEX_ERR
                                 
                                 	; Return Valid Value
00005e 8719                      	std Y+(STACK_OFFSET + 3), BYTE
00005f c002                      	rjmp ASCII_WORD_TO_HEX_RET
                                 
                                 	ASCII_WORD_TO_HEX_ERR:
000060 e001                      		ldi TEMP, 1
000061 870b                      		std Y+(STACK_OFFSET + 5), TEMP
                                 
                                 	ASCII_WORD_TO_HEX_RET:
                                 		; Restore Registers
000062 91ef                      		pop ZL
000063 91ff                      		pop ZH
000064 91cf                      		pop YL
000065 91df                      		pop YH
000066 911f                      		pop BYTE
000067 910f                      		pop TEMP
                                 
000068 9508                      		ret
                                 
                                 	.undef TEMP
                                 	.undef BYTE
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Parse Four ASCII Digits As Hex
                                 ;;
                                 ;; Inputs:
                                 ;; - Constant Zero          <- SP + 5
                                 ;; - ASCII String Pointer H <- SP + 4
                                 ;; - ASCII String Pointer L <- SP + 3 (First Byte Before Return Address)
                                 ;;
                                 ;; Outputs:
                                 ;; - Error Status           -> SP + 5
                                 ;; - Return Value H         -> SP + 4
                                 ;; - Return Value L         -> SP + 3 (First Byte Before Return Address)
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 ASCII_QUAD_TO_HEX:
                                 	.def TEMP  = R16
                                 	.def BYTEH = R17
                                 	.def BYTEL = R18
                                 
                                 	; Number of pushes
                                 	.set STACK_OFFSET = 7
                                 	; Backup Registers
000069 930f                      	push TEMP
00006a 931f                      	push BYTEH
00006b 932f                      	push BYTEL
00006c 93df                      	push YH
00006d 93cf                      	push YL
00006e 93ff                      	push ZH
00006f 93ef                      	push ZL
                                 
                                 	; Load Stack Pointer
                                 	; Y <- SP
000070 b7de                      	in YH, SPH
000071 b7cd                      	in YL, SPL
                                 
                                 	; Load String Address
000072 85fb                      	ldd ZH, Y+(STACK_OFFSET + 4)
000073 85ea                      	ldd ZL, Y+(STACK_OFFSET + 3)
                                 
                                 	; Push Arguments To Stack
000074 e000                      	ldi TEMP, 0
000075 930f                      	push TEMP
000076 93ff                      	push ZH
000077 93ef                      	push ZL
                                 	; Parse High Bytes
000078 dfc4                      	rcall ASCII_WORD_TO_HEX
                                 	; Get Return Value
000079 911f                      	pop BYTEH
                                 	; Discard Dummy Output
00007a 910f                      	pop TEMP
                                 	; Get Error Status
00007b 910f                      	pop TEMP
                                 	; IF (SUBROUTINE ERR != 0) THEN ERR
00007c 3000                      	cpi TEMP, 0
00007d f471                      	brne ASCII_QUAD_TO_HEX_ERR
                                 
                                 	; Advance To Low Bytes
00007e 9632                      	adiw ZH:ZL, 2
                                 
                                 	; Push Arguments To Stack
00007f e000                      	ldi TEMP, 0
000080 930f                      	push TEMP
000081 93ff                      	push ZH
000082 93ef                      	push ZL
                                 	; Parse Low Bytes
000083 dfb9                      	rcall ASCII_WORD_TO_HEX
                                 	; Get Return Value
000084 912f                      	pop BYTEL
                                 	; Discard Dummy Output
000085 910f                      	pop TEMP
                                 	; Get Error Status
000086 910f                      	pop TEMP
                                 	; IF (SUBROUTINE ERR != 0) THEN ERR
000087 3000                      	cpi TEMP, 0
000088 f419                      	brne ASCII_QUAD_TO_HEX_ERR
                                 
                                 	; Return Valid Value
000089 871b                      	std Y+(STACK_OFFSET + 4), BYTEH
00008a 872a                      	std Y+(STACK_OFFSET + 3), BYTEL
00008b c002                      	rjmp ASCII_QUAD_TO_HEX_RET
                                 
                                 	ASCII_QUAD_TO_HEX_ERR:
00008c e001                      		ldi TEMP, 1
00008d 870c                      		std Y+(STACK_OFFSET + 5), TEMP
                                 
                                 	ASCII_QUAD_TO_HEX_RET:
                                 		; Restore Registers
00008e 91ef                      		pop ZL
00008f 91ff                      		pop ZH
000090 91cf                      		pop YL
000091 91df                      		pop YH
000092 912f                      		pop BYTEL
000093 911f                      		pop BYTEH
000094 910f                      		pop TEMP
                                 
000095 9508                      		ret
                                 
                                 	.undef TEMP
                                 	.undef BYTEH
                                 	.undef BYTEL
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Convert Hex Nibble To ASCII Character
                                 ;;
                                 ;; Inputs:
                                 ;; - Nibble     <- SP + 3 (First Byte Before Return Address)
                                 ;;
                                 ;; Outputs:
                                 ;; - ASCII Char -> SP + 3 (First Byte Before Return Address)
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 HEX_NIBBLE_TO_ASCII:
                                 	.def NIBBLE = R16
                                 
                                 	; Number of pushes
                                 	.set STACK_OFFSET = 3
                                 	; Backup Registers
000096 930f                      	push NIBBLE
000097 93df                      	push YH
000098 93cf                      	push YL
                                 
                                 	; Load Stack Pointer
                                 	; Y <- SP
000099 b7de                      	in YH, SPH
00009a b7cd                      	in YL, SPL
                                 
                                 	; Load Hex Nibble
00009b 810e                      	ldd NIBBLE, Y+(STACK_OFFSET + 3)
                                 
00009c 300a                      	cpi NIBBLE, 10
00009d f010                      	brlo HEX_NIBBLE_TO_ASCII_DIGIT
                                 
                                 	HEX_NIBBLE_TO_ASCII_CHAR:
                                 		; NIBBLE <- NIBBLE - 10 + ASCII_UPPER_A
00009e 5c09                      		subi NIBBLE, (10 - ASCII_UPPER_A)
00009f c001                      		rjmp HEX_NIBBLE_TO_ASCII_RET
                                 
                                 	HEX_NIBBLE_TO_ASCII_DIGIT:
                                 		; NIBBLE <- NIBBLE + ASCII_ZERO
0000a0 5d00                      		subi NIBBLE, (-ASCII_ZERO)
                                 
                                 	HEX_NIBBLE_TO_ASCII_RET:
0000a1 830e                      		std Y+(STACK_OFFSET + 3), NIBBLE
                                 
                                 		; Restore Registers
0000a2 91cf                      		pop YL
0000a3 91df                      		pop YH
0000a4 910f                      		pop NIBBLE
                                 
0000a5 9508                      		ret
                                 
                                 	.undef NIBBLE
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Convert Hex Byte To Two ASCII Characters
                                 ;;
                                 ;; Inputs:
                                 ;; - Dummy Input                    <- SP + 4
                                 ;; - Byte                           <- SP + 3 (First Byte Before Return Address)
                                 ;;
                                 ;; Outputs:
                                 ;; - ASCII Char (Most  Significant) -> SP + 4
                                 ;; - ASCII Char (Least Significant) -> SP + 3 (First Byte Before Return Address)
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 HEX_BYTE_TO_ASCII:
                                 	.def BYTE   = R16
                                 	.def NIBBLE = R17
                                 
                                 	; Number of pushes
                                 	.set STACK_OFFSET = 4
                                 	; Backup Registers
0000a6 930f                      	push BYTE
0000a7 931f                      	push NIBBLE
0000a8 93df                      	push YH
0000a9 93cf                      	push YL
                                 
                                 	; Load Stack Pointer
                                 	; Y <- SP
0000aa b7de                      	in YH, SPH
0000ab b7cd                      	in YL, SPL
                                 
                                 	; Load Hex Byte
0000ac 810f                      	ldd BYTE, Y+(STACK_OFFSET + 3)
                                 
                                 	; Convert Least Significant Nibble
0000ad 2f10                      	mov NIBBLE, BYTE
0000ae 701f                      	andi NIBBLE, 0x0F
0000af 931f                      	push NIBBLE
0000b0 dfe5                      	rcall HEX_NIBBLE_TO_ASCII
0000b1 911f                      	pop NIBBLE
                                 
                                 	; Output Least Significant Nibble
0000b2 831f                      	std Y+(STACK_OFFSET + 3), NIBBLE
                                 
                                 	; Convert Most Significant Nibble
0000b3 2f10                      	mov NIBBLE, BYTE
0000b4 7f10                      	andi NIBBLE, 0xF0
0000b5 9512                      	swap NIBBLE
0000b6 931f                      	push NIBBLE
0000b7 dfde                      	rcall HEX_NIBBLE_TO_ASCII
0000b8 911f                      	pop NIBBLE
                                 
                                 	; Output Most Significant Nibble
0000b9 8718                      	std Y+(STACK_OFFSET + 4), NIBBLE
                                 
                                 	; Restore Registers
0000ba 91cf                      	pop YL
0000bb 91df                      	pop YH
0000bc 911f                      	pop NIBBLE
0000bd 910f                      	pop BYTE
                                 
0000be 9508                      	ret
                                 
                                 	.undef BYTE
                                 .INCLUDE "io.inc"
                                 
                                 ;; Include Guard
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 .ifdef INCLUDE_IO
                                 .endif
                                 
                                 .equ INCLUDE_IO = 1
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Transmit Character Over USART
                                 ;;
                                 ;; Inputs:
                                 ;; - Char      <- SP + 3 (First Byte Before Return Address)
                                 ;;
                                 ;; Outputs:
                                 ;; - No Output -> SP + 3 (First Byte Before Return Address)
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 PUTCHAR:
                                 	; Set Register Aliases
                                 	.def CHAR = R16
                                 
                                 	; Number of pushes
                                 	.set STACK_OFFSET = 3
                                 	; Backup Registers
0000bf 930f                      	push CHAR
0000c0 93df                      	push YH
0000c1 93cf                      	push YL
                                 
                                 	; Load Stack Pointer
                                 	; Y <- SP
0000c2 b7de                      	in YH, SPH
0000c3 b7cd                      	in YL, SPL
                                 
                                 	; Load Character
0000c4 810e                      	ldd CHAR, Y+(STACK_OFFSET + 3)
                                 
                                 	; Wait until sending is safe
                                 	PUTCHAR_WAIT_SAFE_SEND:	
0000c5 9b5d                      		sbis UCSRA, UDRE
0000c6 cffe                      		rjmp PUTCHAR_WAIT_SAFE_SEND
                                 
0000c7 b90c                      	out UDR, CHAR
                                 	
                                 	; Restore Registers
0000c8 91cf                      	pop YL
0000c9 91df                      	pop YH
0000ca 910f                      	pop CHAR
                                 
0000cb 9508                      	ret
                                 
                                 	.undef CHAR
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Print a Null-Terminated Program Memory String Over USART
                                 ;;
                                 ;; Inputs:
                                 ;; - String Address H <- SP + 4
                                 ;; - String Address L <- SP + 3 (First Byte Before Return Address)
                                 ;;
                                 ;; Outputs:
                                 ;; - No Output        -> SP + 4
                                 ;; - No Output        -> SP + 3 (First Byte Before Return Address)
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 PUTSTR:
                                 	.def CHAR = R16
                                 
                                 	; Number of pushes
                                 	.set STACK_OFFSET = 5
                                 	; Backup Registers
0000cc 930f                      	push CHAR
0000cd 93df                      	push YH
0000ce 93cf                      	push YL
0000cf 93ff                      	push ZH
0000d0 93ef                      	push ZL
                                 
                                 	; Load Stack Pointer
                                 	; Y <- SP
0000d1 b7de                      	in YH, SPH
0000d2 b7cd                      	in YL, SPL
                                 
                                 	; Load String Address
0000d3 85f9                      	ldd ZH, Y+(STACK_OFFSET + 4)
0000d4 85e8                      	ldd ZL, Y+(STACK_OFFSET + 3)
                                 
                                 	PUTSTR_LOOP:
0000d5 9104                      		lpm CHAR, Z
0000d6 3000                      		cpi CHAR, 0
0000d7 f029                      		breq PUTSTR_RET
0000d8 930f                      		push CHAR
0000d9 dfe5                      		rcall PUTCHAR
0000da 910f                      		pop CHAR
0000db 9631                      		adiw ZH:ZL, 1
0000dc cff8                      		rjmp PUTSTR_LOOP
                                 
                                 	PUTSTR_RET:
                                 		; Restore Registers
0000dd 91ef                      		pop ZL
0000de 91ff                      		pop ZH
0000df 91cf                      		pop YL
0000e0 91df                      		pop YH
0000e1 910f                      		pop CHAR
                                 
0000e2 9508                      		ret
                                 
                                 .INCLUDE "read-mem.inc"
                                 
                                 ;; Include Guard
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 .ifdef INCLUDE_READ_MEM
                                 .endif
                                 
                                 .equ INCLUDE_READ_MEM = 1
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Imports
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 .INCLUDE "ascii.inc"
                                 
                                 ;; Include Guard
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 .ifdef INCLUDE_ASCII
                                 .INCLUDE "io.inc"
                                 
                                 ;; Include Guard
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 .ifdef INCLUDE_IO
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; Read Memory Region
                                 ;;
                                 ;; Inputs:
                                 ;; - Command Length           <- SP + 5
                                 ;; - Command String Pointer H <- SP + 4
                                 ;; - Command String Pointer L <- SP + 3 (First Byte Before Return Address)
                                 ;;
                                 ;; Outputs:
                                 ;; - No Output                -> SP + 5
                                 ;; - No Output                -> SP + 4
                                 ;; - No Output                -> SP + 3 (First Byte Before Return Address)
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
0000e3 5245
0000e4 4f52
0000e5 3a52
0000e6 4920
0000e7 766e
0000e8 6c61
0000e9 6469
0000ea 4920
0000eb 706e
0000ec 7475
0000ed 4620
0000ee 726f
0000ef 6020
0000f0 6552
0000f1 6461
0000f2 654d
0000f3 606d
0000f4 000d                      READ_SRAM_ERR_MSG: .db "ERROR: Invalid Input For `ReadMem`", ASCII_NEW_LINE, 0
                                 
                                 
                                 READ_MEM:
                                 	.def TEMP  = R16
                                 
                                 	; Number of pushes
                                 	.set STACK_OFFSET = 5
                                 	; Backup Registers
0000f5 930f                      	push TEMP
0000f6 93df                      	push YH
0000f7 93cf                      	push YL
0000f8 93ff                      	push ZH
0000f9 93ef                      	push ZL
                                 
                                 	; Load Stack Pointer
                                 	; Y <- SP
0000fa b7de                      	in YH, SPH
0000fb b7cd                      	in YL, SPL
                                 
                                 	; Load Command Length
0000fc 850a                      	ldd TEMP, Y+(STACK_OFFSET + 5)
                                 
                                 	; r XXXX XXXX
0000fd 300b                      	cpi TEMP, 11
0000fe f5f9                      	brne READ_MEM_ERR
                                 
                                 	; Load Command Address
0000ff 85f9                      	ldd ZH, Y+(STACK_OFFSET + 4)
000100 85e8                      	ldd ZL, Y+(STACK_OFFSET + 3)
                                 
                                 	; Get string address of first memory address
000101 9632                      	adiw ZH:ZL, 2
                                 
                                 	; Parse first memory address
000102 e000                      	ldi TEMP, 0
000103 930f                      	push TEMP
000104 93ff                      	push ZH
000105 93ef                      	push ZL
000106 df62                      	rcall ASCII_QUAD_TO_HEX
000107 91cf                      	pop YL
000108 91df                      	pop YH
000109 910f                      	pop TEMP
                                 	; IF (SUBROUTINE ERR != 0) THEN ERR
00010a 3000                      	cpi TEMP, 0
00010b f591                      	brne READ_MEM_ERR
                                 
                                 	; There should be a space between parameters
00010c 9634                      	adiw ZH:ZL, 4
00010d 8100                      	ld TEMP, Z
00010e 3200                      	cpi TEMP, ASCII_SPACE
00010f f571                      	brne READ_MEM_ERR
                                 
                                 	; Get string address of second memory address
000110 9631                      	adiw ZH:ZL, 1
                                 
                                 	; Parse second memory address
000111 e000                      	ldi TEMP, 0
000112 930f                      	push TEMP
000113 93ff                      	push ZH
000114 93ef                      	push ZL
000115 df53                      	rcall ASCII_QUAD_TO_HEX
000116 91ef                      	pop ZL
000117 91ff                      	pop ZH
000118 910f                      	pop TEMP
                                 	; IF (SUBROUTINE ERR != 0) THEN ERR
000119 3000                      	cpi TEMP, 0
00011a f519                      	brne READ_MEM_ERR
                                 
                                 	; Ensure First Address <= Second Address
00011b 17df                      	cp YH, ZH
00011c f020                      	brlo READ_MEM_PARAMS_LOOP
00011d f501                      	brne READ_MEM_ERR
                                 
                                 	; High byte equal
                                 	; Check low byte
00011e 17ce                      	cp YL, ZL
00011f f008                      	brlo READ_MEM_PARAMS_LOOP
000120 f4e9                      	brne READ_MEM_ERR
                                 
                                 	; Params Valid
                                 	READ_MEM_PARAMS_LOOP:
                                 		; Read Memory
000121 9109                      		ld TEMP, Y+
                                 
                                 		; Print as ASCII
000122 930f                      		push TEMP
000123 930f                      		push TEMP
000124 df81                      		rcall HEX_BYTE_TO_ASCII
                                 		; Get Least Significant Char
000125 910f                      		pop TEMP
000126 df98                      		rcall PUTCHAR
000127 930f                      		push TEMP
000128 df96                      		rcall PUTCHAR
000129 910f                      		pop TEMP
00012a 910f                      		pop TEMP
00012b e200                      		ldi TEMP, ASCII_SPACE
00012c 930f                      		push TEMP
00012d df91                      		rcall PUTCHAR
00012e 910f                      		pop TEMP
                                 
00012f 17df                      		cp YH, ZH
000130 f380                      		brlo READ_MEM_PARAMS_LOOP
000131 f419                      		brne READ_MEM_PARAMS_LOOP_EXIT
                                 
000132 17ce                      		cp YL, ZL
000133 f368                      		brlo READ_MEM_PARAMS_LOOP
000134 f401                      		brne READ_MEM_PARAMS_LOOP_EXIT
                                 
                                 	READ_MEM_PARAMS_LOOP_EXIT:
000135 e008                      		ldi TEMP, ASCII_BACKSPACE
000136 930f                      		push TEMP
000137 df87                      		rcall PUTCHAR
000138 910f                      		pop TEMP
000139 e00d                      		ldi TEMP, ASCII_NEW_LINE
00013a 930f                      		push TEMP
00013b df83                      		rcall PUTCHAR
00013c 910f                      		pop TEMP
00013d c007                      		rjmp READ_MEM_RET
                                 
                                 	READ_MEM_ERR:
00013e e001                      		ldi TEMP, HIGH(READ_SRAM_ERR_MSG << 1)
00013f 930f                      		push TEMP
000140 ec06                      		ldi TEMP, LOW (READ_SRAM_ERR_MSG << 1)
000141 930f                      		push TEMP
000142 df89                      		rcall PUTSTR
000143 910f                      		pop TEMP
000144 910f                      		pop TEMP
                                 
                                 	READ_MEM_RET:
                                 		; Restore Registers
000145 91ef                      		pop ZL
000146 91ff                      		pop ZH
000147 91cf                      		pop YL
000148 91df                      		pop YH
000149 910f                      		pop TEMP
                                 
00014a 9508                      		ret
                                 	
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; # Program Memory Constants
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 PROMPT:
00014b 4746
00014c 3e3e
00014d 203e
00014e 0000                      	.db "FG>>> ", 0, 0
                                 EXEC_INVALID_CMD:
00014f 5245
000150 4f52
000151 3a52
000152 4920
000153 766e
000154 6c61
000155 6469
000156 4320
000157 6d6f
000158 616d
000159 646e
00015a 000d                      	.db "ERROR: Invalid Command", ASCII_NEW_LINE, 0
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; # Main Routine
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 RESET:
                                 	; Set Register Aliases
                                 	.def TEMP = R16
                                 
                                 	; Initialize Stack Pointer
00015b e008                      	ldi TEMP, HIGH(RAMEND)
00015c bf0e                      	out SPH, TEMP
00015d e50f                      	ldi TEMP, LOW(RAMEND)
00015e bf0d                      	out SPL, TEMP
                                 
                                 	; Initialize USART BEGIN
                                 
                                 	; Set Baud Rate
00015f e000                      	ldi TEMP, HIGH(BAUD_UBRR)
000160 bd00                      	out UBRRH, TEMP
000161 e109                      	ldi TEMP, LOW(BAUD_UBRR)
000162 b909                      	out UBRRL, TEMP
                                 
                                 	; TXEN  -> Enable Transmitter
                                 	; RXEN  -> Enable Receiver
                                 	; RXCIE -> Enable Rx Complete Interrupt
000163 e908                      	ldi TEMP, (1 << RXCIE) | (1 << RXEN) | (1 << TXEN)
000164 b90a                      	out UCSRB, TEMP
                                 
                                 	; Set Frame Format:	; - 8 Data Bits	; - 2 Stop Bits	ldi TEMP, (1 << URSEL) | (1 << USBS) | (1 << UCSZ0) | (1 << UCSZ1)	out UCSRC, TEMP
                                 
                                 	; Initialize USART END
                                 
                                 	; Initialie command index to 0
000165 e0f0                      	ldi ZH, HIGH(CMD_IDX)
000166 ece4                      	ldi ZL, LOW (CMD_IDX)
000167 2700                      	clr TEMP
000168 8300                      	st Z, TEMP
                                 
                                 	; Enable Global Interrupts
000169 9478                          sei
                                 
                                 	RESET_LOOP:
00016a cfff                      		rjmp RESET_LOOP
                                 
                                 	; Clear Register Aliases
                                 	.undef TEMP
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; # Interrupt Handlers
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 USART_RX_COMPLETE:
                                 	; Set Register Aliases
                                 	.def TEMP = R16
                                 	.def CHAR = R17
                                 	.def IDX  = R18
                                 
                                 	; Backup Registers
00016b 930f                      	push TEMP
00016c b70f                      	in TEMP, SREG
00016d 930f                      	push TEMP
00016e 93ff                      	push ZH
00016f 93ef                      	push ZL
000170 93df                      	push YH
000171 93cf                      	push YL
000172 931f                      	push CHAR
000173 932f                      	push IDX
                                 
                                 	; Read ASCII Character
000174 b11c                      	in CHAR, UDR
                                 
                                 	; Read command index
000175 e0f0                      	ldi ZH, HIGH(CMD_IDX)
000176 ece4                      	ldi ZL, LOW (CMD_IDX)
000177 8120                      	ld IDX, Z
                                 
000178 301d                      	cpi CHAR, ASCII_NEW_LINE
                                 
000179 f471                      	brne USART_RX_COMPLETE_NOT_DONE
                                 
00017a e00d                      	ldi R16, ASCII_NEW_LINE
00017b 930f                      	push R16
00017c df42                      	rcall PUTCHAR
00017d 910f                      	pop R16
                                 	
                                 	; r $begaddress $endaddress					-- read from sram
                                 	; w $begaddress $endaddress $bytestowrite	-- write to sram
                                 	; g $regname								-- read from register
                                 	; s $regname $byte							-- write to register
                                 	; o $name									-- read from io
                                 	; i $name $byte								-- write to io
                                 	; p $seconds $anyoftheabovecommands			-- repeat command
                                 	; TODO: dont forget to pass parameter
00017e 930f                      	push R16
00017f 931f                      	push R17
                                 	
000180 e600                      	ldi R16, LOW(CMD)
000181 e010                      	ldi R17, HIGH(CMD)
                                 	
000182 d02d                      	rcall EXECUTE
                                 
000183 911f                      	pop R17
000184 910f                      	pop R16
                                 
                                 	; Reset index
000185 2722                      	clr IDX
000186 8320                      	st Z, IDX
                                 
000187 c01e                      	rjmp USART_RX_COMPLETE_RET
                                 
                                 	USART_RX_COMPLETE_NOT_DONE:
000188 3018                      		cpi CHAR, ASCII_BACKSPACE
                                 
000189 f471                      		brne USART_RX_COMPLETE_NOT_BACKSPACE
                                 
00018a 3020                      		cpi IDX, 0
00018b f0d1                      		breq USART_RX_COMPLETE_RET
                                 
00018c 952a                      		dec IDX
00018d 8320                      		st Z, IDX
                                 		; Echo backspace back
                                 		; Backspace -> Space -> Backspace
00018e e008                      		ldi R16, ASCII_BACKSPACE
00018f 930f                      		push R16
000190 df2e                      		rcall PUTCHAR
000191 e200                      		ldi R16, ASCII_SPACE
000192 930f                      		push R16
000193 df2b                      		rcall PUTCHAR
000194 910f                      		pop R16
000195 df29                      		rcall PUTCHAR
000196 910f                      		pop R16
                                 
000197 c00e                      		rjmp USART_RX_COMPLETE_RET
                                 
                                 	USART_RX_COMPLETE_NOT_BACKSPACE:
                                 		; Handle full command buffer
000198 3624                      		cpi IDX, CMD_MAX_LEN
                                 
000199 f061                      		breq USART_RX_COMPLETE_RET
                                 
                                 		; Get next-character index
00019a e0d0                      		ldi YH, HIGH(CMD)
00019b e6c0                      		ldi YL, LOW(CMD)
00019c 0fc2                      		add YL, IDX
00019d 2700                      		clr TEMP
00019e 1fd0                      		adc YH, TEMP
                                 
                                 		; Store character
00019f 8318                      		st Y, CHAR
                                 	
                                 		; Increment index
0001a0 9523                      		inc IDX
0001a1 8320                      		st Z, IDX
                                 
                                 		; Echo character back
0001a2 2f01                      		mov R16, CHAR
0001a3 930f                      		push R16
0001a4 df1a                      		rcall PUTCHAR
0001a5 910f                      		pop R16
                                 
                                 	USART_RX_COMPLETE_RET:
                                 		; Restore Registers
0001a6 912f                      		pop IDX
0001a7 911f                      		pop CHAR
0001a8 91cf                      		pop YL
0001a9 91df                      		pop YH
0001aa 91ef                      		pop ZL
0001ab 91ff                      		pop ZH
0001ac 910f                      		pop TEMP
0001ad bf0f                      		out SREG, TEMP
0001ae 910f                      		pop TEMP
                                 
0001af 9518                      		reti
                                 
                                 	; Clear Register Aliases
                                 	.undef TEMP
                                 	.undef CHAR
                                 	.undef IDX
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;; # Subroutines
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 
                                 ; Inputs:
                                 ; - ADDRL: R16
                                 ; - ADDRH: R17
                                 ; - IDX  : R18
                                 EXECUTE:
                                 	.def ADDRL = R16
                                 	.def ADDRH = R17
                                 	.def IDX   = R18
                                 	.def CHAR  = R19
                                 	.def TEMP  = R20
                                 	
0001b0 934f                      	push TEMP
0001b1 93cf                      	push YL
0001b2 93df                      	push YH
                                 
                                 	; Empty command
0001b3 3022                      	cpi IDX, 2
0001b4 f158                      	brlo EXECUTE_INVALID
                                 
0001b5 2fd1                      	mov YH, ADDRH
0001b6 2fc0                      	mov YL,	ADDRL
0001b7 8138                      	ld	CHAR, Y
                                 	
0001b8 95c3                      	inc YL
0001b9 2744                      	clr TEMP
0001ba 1fd4                      	adc YH, TEMP
0001bb 8148                      	ld	TEMP, Y
                                 
0001bc 3240                      	cpi TEMP, ASCII_SPACE
0001bd f511                      	brne EXECUTE_INVALID
                                 
0001be 3732                      	cpi CHAR, ASCII_LOWER_R
0001bf f441                      	brne EXECUTE_W
0001c0 932f                      	push IDX
0001c1 931f                      	push ADDRH
0001c2 930f                      	push ADDRL
0001c3 df31                      	rcall READ_MEM
0001c4 914f                      	pop TEMP
0001c5 914f                      	pop TEMP
0001c6 914f                      	pop TEMP
0001c7 c01f                      	rjmp  EXECUTE_RET
                                 
                                 	EXECUTE_W:
0001c8 3737                      		cpi CHAR, ASCII_LOWER_W
0001c9 f411                      		brne EXECUTE_G
0001ca d027                      		rcall WRITE_SRAM
0001cb c01b                      		rjmp  EXECUTE_RET
                                 	EXECUTE_G:
0001cc 3637                      		cpi CHAR, ASCII_LOWER_G
0001cd f411                      		brne EXECUTE_S
0001ce d024                      		rcall READ_REGISTER
0001cf c017                      		rjmp  EXECUTE_RET
                                 	EXECUTE_S:
0001d0 3733                      		cpi CHAR, ASCII_LOWER_S
0001d1 f411                      		brne EXECUTE_O
0001d2 d021                      		rcall WRITE_REGISTER
0001d3 c013                      		rjmp  EXECUTE_RET
                                 	EXECUTE_O:
0001d4 363f                      		cpi CHAR, ASCII_LOWER_O
0001d5 f411                      		brne EXECUTE_I
0001d6 d01e                      		rcall READ_IO
0001d7 c00f                      		rjmp  EXECUTE_RET
                                 
                                 	EXECUTE_I:
0001d8 3639                      		cpi CHAR, ASCII_LOWER_I
0001d9 f411                      		brne EXECUTE_P
0001da d01b                      		rcall WRITE_IO
0001db c00b                      		rjmp  EXECUTE_RET
                                 
                                 	EXECUTE_P:
0001dc 3730                      		cpi CHAR, ASCII_LOWER_P
0001dd f411                      		brne EXECUTE_INVALID
0001de d018                      		rcall REPEAT_CMD
0001df c007                      		rjmp  EXECUTE_RET
                                 	
                                 	EXECUTE_INVALID:
                                 		; Print Error
0001e0 e042                      		ldi TEMP, HIGH(EXEC_INVALID_CMD << 1)
0001e1 934f                      		push TEMP
0001e2 e94e                      		ldi TEMP, LOW (EXEC_INVALID_CMD << 1)
0001e3 934f                      		push TEMP
0001e4 dee7                      		rcall PUTSTR
0001e5 914f                      		pop TEMP
0001e6 914f                      		pop TEMP
                                 
                                 	EXECUTE_RET:
                                 		; Print Prompt
0001e7 e042                      		ldi TEMP, HIGH(PROMPT << 1)
0001e8 934f                      		push TEMP
0001e9 e946                      		ldi TEMP, LOW (PROMPT << 1)
0001ea 934f                      		push TEMP
0001eb dee0                      		rcall PUTSTR
0001ec 914f                      		pop TEMP
0001ed 914f                      		pop TEMP
                                 
0001ee 91df                      		pop YH
0001ef 91cf                      		pop YL
0001f0 914f                      		pop TEMP
                                 	
0001f1 9508                      		ret
                                 
                                 	.undef ADDRL
                                 	.undef ADDRH
                                 	.undef CHAR
                                 	.undef IDX
                                 	.undef TEMP
                                 
                                 
                                 WRITE_SRAM:
0001f2 9508                      ret
                                 
                                 READ_REGISTER:
0001f3 9508                      ret
                                 
                                 WRITE_REGISTER:
0001f4 9508                      ret
                                 
                                 READ_IO:
0001f5 9508                      ret
                                 
                                 WRITE_IO:
0001f6 9508                      ret
                                 
                                 REPEAT_CMD:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega32" register use summary:
x  :   0 y  :  29 z  :   9 r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 144 r17:  38 r18:  18 r19:   8 r20:  21 
r21:   0 r22:   0 r23:   0 r24:   0 r25:   0 r26:   0 r27:   0 r28:  35 
r29:  35 r30:  28 r31:  28 
Registers used: 11 out of 35 (31.4%)

"ATmega32" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   2 add   :   1 adiw  :   5 and   :   0 
andi  :   2 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :   3 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :  12 brlt  :   0 brmi  :   0 
brne  :  22 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   0 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   4 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   4 cpc   :   0 
cpi   :  29 cpse  :   0 dec   :   1 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :  18 inc   :   2 jmp   :   2 
ld    :   7 ldd   :  13 ldi   :  34 lds   :   0 lpm   :   2 lsl   :   4 
lsr   :   0 mov   :   5 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   0 or    :   1 ori   :   0 out   :   7 pop   :  87 
push  :  87 rcall :  31 ret   :  15 reti  :   1 rjmp  :  19 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :   0 sbic  :   0 sbis  :   1 
sbiw  :   0 sbr   :   0 sbrc  :   0 sbrs  :   0 sec   :   0 seh   :   0 
sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   5 std   :  12 sts   :   0 
sub   :   0 subi  :   5 swap  :   1 tst   :   0 wdr   :   0 
Instructions used: 34 out of 113 (30.1%)

"ATmega32" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0003f0    892     68    960   32768   2.9%
[.dseg] 0x000060 0x0000c5      0    101    101    2048   4.9%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
